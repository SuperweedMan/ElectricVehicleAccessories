
ElectricVehicleAccessories.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3a8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  0800b4b8  0800b4b8  0001b4b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000354  0800bab0  0800bab0  0001bab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000340  0800be04  0800be04  0001be04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c144  0800c144  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800c144  0800c144  0001c144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c150  0800c150  0001c150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f6c  200001e8  0800c33c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001154  0800c33c  00021154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f916  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000051ef  00000000  00000000  0004fb27  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017a0  00000000  00000000  00054d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001638  00000000  00000000  000564b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a5c2  00000000  00000000  00057af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001250d  00000000  00000000  000720b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009275e  00000000  00000000  000845bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00116d1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c90  00000000  00000000  00116d98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b4a0 	.word	0x0800b4a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800b4a0 	.word	0x0800b4a0

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <selfrel_offset31>:
 8000a9c:	6803      	ldr	r3, [r0, #0]
 8000a9e:	005a      	lsls	r2, r3, #1
 8000aa0:	bf4c      	ite	mi
 8000aa2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	4418      	add	r0, r3
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <search_EIT_table>:
 8000ab0:	b361      	cbz	r1, 8000b0c <search_EIT_table+0x5c>
 8000ab2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ab6:	f101 3aff 	add.w	sl, r1, #4294967295
 8000aba:	4690      	mov	r8, r2
 8000abc:	4606      	mov	r6, r0
 8000abe:	46d1      	mov	r9, sl
 8000ac0:	2700      	movs	r7, #0
 8000ac2:	eb07 0409 	add.w	r4, r7, r9
 8000ac6:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000aca:	1064      	asrs	r4, r4, #1
 8000acc:	00e5      	lsls	r5, r4, #3
 8000ace:	1971      	adds	r1, r6, r5
 8000ad0:	4608      	mov	r0, r1
 8000ad2:	f7ff ffe3 	bl	8000a9c <selfrel_offset31>
 8000ad6:	45a2      	cmp	sl, r4
 8000ad8:	4683      	mov	fp, r0
 8000ada:	f105 0008 	add.w	r0, r5, #8
 8000ade:	4430      	add	r0, r6
 8000ae0:	d009      	beq.n	8000af6 <search_EIT_table+0x46>
 8000ae2:	f7ff ffdb 	bl	8000a9c <selfrel_offset31>
 8000ae6:	45c3      	cmp	fp, r8
 8000ae8:	f100 30ff 	add.w	r0, r0, #4294967295
 8000aec:	d805      	bhi.n	8000afa <search_EIT_table+0x4a>
 8000aee:	4540      	cmp	r0, r8
 8000af0:	d209      	bcs.n	8000b06 <search_EIT_table+0x56>
 8000af2:	1c67      	adds	r7, r4, #1
 8000af4:	e7e5      	b.n	8000ac2 <search_EIT_table+0x12>
 8000af6:	45c3      	cmp	fp, r8
 8000af8:	d905      	bls.n	8000b06 <search_EIT_table+0x56>
 8000afa:	42a7      	cmp	r7, r4
 8000afc:	d002      	beq.n	8000b04 <search_EIT_table+0x54>
 8000afe:	f104 39ff 	add.w	r9, r4, #4294967295
 8000b02:	e7de      	b.n	8000ac2 <search_EIT_table+0x12>
 8000b04:	2100      	movs	r1, #0
 8000b06:	4608      	mov	r0, r1
 8000b08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b0c:	4608      	mov	r0, r1
 8000b0e:	4770      	bx	lr

08000b10 <__gnu_unwind_get_pr_addr>:
 8000b10:	2801      	cmp	r0, #1
 8000b12:	d007      	beq.n	8000b24 <__gnu_unwind_get_pr_addr+0x14>
 8000b14:	2802      	cmp	r0, #2
 8000b16:	d007      	beq.n	8000b28 <__gnu_unwind_get_pr_addr+0x18>
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <__gnu_unwind_get_pr_addr+0x1c>)
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	bf0c      	ite	eq
 8000b1e:	4618      	moveq	r0, r3
 8000b20:	2000      	movne	r0, #0
 8000b22:	4770      	bx	lr
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <__gnu_unwind_get_pr_addr+0x20>)
 8000b26:	4770      	bx	lr
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <__gnu_unwind_get_pr_addr+0x24>)
 8000b2a:	4770      	bx	lr
 8000b2c:	0800120d 	.word	0x0800120d
 8000b30:	08001211 	.word	0x08001211
 8000b34:	08001215 	.word	0x08001215

08000b38 <get_eit_entry>:
 8000b38:	b530      	push	{r4, r5, lr}
 8000b3a:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <get_eit_entry+0x9c>)
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	4604      	mov	r4, r0
 8000b40:	1e8d      	subs	r5, r1, #2
 8000b42:	b34b      	cbz	r3, 8000b98 <get_eit_entry+0x60>
 8000b44:	a901      	add	r1, sp, #4
 8000b46:	4628      	mov	r0, r5
 8000b48:	f3af 8000 	nop.w
 8000b4c:	b1f0      	cbz	r0, 8000b8c <get_eit_entry+0x54>
 8000b4e:	9901      	ldr	r1, [sp, #4]
 8000b50:	462a      	mov	r2, r5
 8000b52:	f7ff ffad 	bl	8000ab0 <search_EIT_table>
 8000b56:	4601      	mov	r1, r0
 8000b58:	b1c0      	cbz	r0, 8000b8c <get_eit_entry+0x54>
 8000b5a:	f7ff ff9f 	bl	8000a9c <selfrel_offset31>
 8000b5e:	684b      	ldr	r3, [r1, #4]
 8000b60:	64a0      	str	r0, [r4, #72]	; 0x48
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d02f      	beq.n	8000bc6 <get_eit_entry+0x8e>
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f101 0004 	add.w	r0, r1, #4
 8000b6c:	db27      	blt.n	8000bbe <get_eit_entry+0x86>
 8000b6e:	f7ff ff95 	bl	8000a9c <selfrel_offset31>
 8000b72:	2300      	movs	r3, #0
 8000b74:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000b78:	6803      	ldr	r3, [r0, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	db13      	blt.n	8000ba6 <get_eit_entry+0x6e>
 8000b7e:	f7ff ff8d 	bl	8000a9c <selfrel_offset31>
 8000b82:	2300      	movs	r3, #0
 8000b84:	6120      	str	r0, [r4, #16]
 8000b86:	4618      	mov	r0, r3
 8000b88:	b003      	add	sp, #12
 8000b8a:	bd30      	pop	{r4, r5, pc}
 8000b8c:	2309      	movs	r3, #9
 8000b8e:	2200      	movs	r2, #0
 8000b90:	4618      	mov	r0, r3
 8000b92:	6122      	str	r2, [r4, #16]
 8000b94:	b003      	add	sp, #12
 8000b96:	bd30      	pop	{r4, r5, pc}
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <get_eit_entry+0xa0>)
 8000b9a:	4910      	ldr	r1, [pc, #64]	; (8000bdc <get_eit_entry+0xa4>)
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	1ac9      	subs	r1, r1, r3
 8000ba0:	10c9      	asrs	r1, r1, #3
 8000ba2:	9101      	str	r1, [sp, #4]
 8000ba4:	e7d4      	b.n	8000b50 <get_eit_entry+0x18>
 8000ba6:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000baa:	f7ff ffb1 	bl	8000b10 <__gnu_unwind_get_pr_addr>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	bf14      	ite	ne
 8000bb2:	2300      	movne	r3, #0
 8000bb4:	2309      	moveq	r3, #9
 8000bb6:	6120      	str	r0, [r4, #16]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	b003      	add	sp, #12
 8000bbc:	bd30      	pop	{r4, r5, pc}
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000bc4:	e7d8      	b.n	8000b78 <get_eit_entry+0x40>
 8000bc6:	2305      	movs	r3, #5
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	6122      	str	r2, [r4, #16]
 8000bce:	b003      	add	sp, #12
 8000bd0:	bd30      	pop	{r4, r5, pc}
 8000bd2:	bf00      	nop
 8000bd4:	00000000 	.word	0x00000000
 8000bd8:	0800be04 	.word	0x0800be04
 8000bdc:	0800c144 	.word	0x0800c144

08000be0 <restore_non_core_regs>:
 8000be0:	6803      	ldr	r3, [r0, #0]
 8000be2:	b510      	push	{r4, lr}
 8000be4:	07da      	lsls	r2, r3, #31
 8000be6:	4604      	mov	r4, r0
 8000be8:	d406      	bmi.n	8000bf8 <restore_non_core_regs+0x18>
 8000bea:	079b      	lsls	r3, r3, #30
 8000bec:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000bf0:	d509      	bpl.n	8000c06 <restore_non_core_regs+0x26>
 8000bf2:	f000 fc67 	bl	80014c4 <__gnu_Unwind_Restore_VFP_D>
 8000bf6:	6823      	ldr	r3, [r4, #0]
 8000bf8:	0759      	lsls	r1, r3, #29
 8000bfa:	d509      	bpl.n	8000c10 <restore_non_core_regs+0x30>
 8000bfc:	071a      	lsls	r2, r3, #28
 8000bfe:	d50e      	bpl.n	8000c1e <restore_non_core_regs+0x3e>
 8000c00:	06db      	lsls	r3, r3, #27
 8000c02:	d513      	bpl.n	8000c2c <restore_non_core_regs+0x4c>
 8000c04:	bd10      	pop	{r4, pc}
 8000c06:	f000 fc55 	bl	80014b4 <__gnu_Unwind_Restore_VFP>
 8000c0a:	6823      	ldr	r3, [r4, #0]
 8000c0c:	0759      	lsls	r1, r3, #29
 8000c0e:	d4f5      	bmi.n	8000bfc <restore_non_core_regs+0x1c>
 8000c10:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000c14:	f000 fc5e 	bl	80014d4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000c18:	6823      	ldr	r3, [r4, #0]
 8000c1a:	071a      	lsls	r2, r3, #28
 8000c1c:	d4f0      	bmi.n	8000c00 <restore_non_core_regs+0x20>
 8000c1e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000c22:	f000 fc5f 	bl	80014e4 <__gnu_Unwind_Restore_WMMXD>
 8000c26:	6823      	ldr	r3, [r4, #0]
 8000c28:	06db      	lsls	r3, r3, #27
 8000c2a:	d4eb      	bmi.n	8000c04 <restore_non_core_regs+0x24>
 8000c2c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c34:	f000 bc9a 	b.w	800156c <__gnu_Unwind_Restore_WMMXC>

08000c38 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000c38:	6803      	ldr	r3, [r0, #0]
 8000c3a:	b103      	cbz	r3, 8000c3e <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000c3c:	4403      	add	r3, r0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop

08000c44 <__gnu_unwind_24bit.isra.1>:
 8000c44:	2009      	movs	r0, #9
 8000c46:	4770      	bx	lr

08000c48 <_Unwind_DebugHook>:
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <unwind_phase2>:
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	4604      	mov	r4, r0
 8000c50:	460d      	mov	r5, r1
 8000c52:	e008      	b.n	8000c66 <unwind_phase2+0x1a>
 8000c54:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000c56:	6923      	ldr	r3, [r4, #16]
 8000c58:	6162      	str	r2, [r4, #20]
 8000c5a:	4621      	mov	r1, r4
 8000c5c:	462a      	mov	r2, r5
 8000c5e:	2001      	movs	r0, #1
 8000c60:	4798      	blx	r3
 8000c62:	2808      	cmp	r0, #8
 8000c64:	d108      	bne.n	8000c78 <unwind_phase2+0x2c>
 8000c66:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000c68:	4620      	mov	r0, r4
 8000c6a:	f7ff ff65 	bl	8000b38 <get_eit_entry>
 8000c6e:	4606      	mov	r6, r0
 8000c70:	2800      	cmp	r0, #0
 8000c72:	d0ef      	beq.n	8000c54 <unwind_phase2+0x8>
 8000c74:	f008 fdf6 	bl	8009864 <abort>
 8000c78:	2807      	cmp	r0, #7
 8000c7a:	d1fb      	bne.n	8000c74 <unwind_phase2+0x28>
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000c80:	f7ff ffe2 	bl	8000c48 <_Unwind_DebugHook>
 8000c84:	1d28      	adds	r0, r5, #4
 8000c86:	f000 fc09 	bl	800149c <__restore_core_regs>
 8000c8a:	bf00      	nop

08000c8c <unwind_phase2_forced>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	4605      	mov	r5, r0
 8000c92:	f04f 0c00 	mov.w	ip, #0
 8000c96:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000c9a:	ac03      	add	r4, sp, #12
 8000c9c:	1d0e      	adds	r6, r1, #4
 8000c9e:	4617      	mov	r7, r2
 8000ca0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cac:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000cb0:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000cb4:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000cb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000cbc:	ac02      	add	r4, sp, #8
 8000cbe:	f8c4 c000 	str.w	ip, [r4]
 8000cc2:	e021      	b.n	8000d08 <unwind_phase2_forced+0x7c>
 8000cc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000cc6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000cca:	616b      	str	r3, [r5, #20]
 8000ccc:	4621      	mov	r1, r4
 8000cce:	a87a      	add	r0, sp, #488	; 0x1e8
 8000cd0:	f008 fe27 	bl	8009922 <memcpy>
 8000cd4:	692b      	ldr	r3, [r5, #16]
 8000cd6:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000cd8:	4629      	mov	r1, r5
 8000cda:	4630      	mov	r0, r6
 8000cdc:	4798      	blx	r3
 8000cde:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000ce0:	e9cd 4900 	strd	r4, r9, [sp]
 8000ce4:	4682      	mov	sl, r0
 8000ce6:	6463      	str	r3, [r4, #68]	; 0x44
 8000ce8:	4631      	mov	r1, r6
 8000cea:	462b      	mov	r3, r5
 8000cec:	462a      	mov	r2, r5
 8000cee:	2001      	movs	r0, #1
 8000cf0:	47c0      	blx	r8
 8000cf2:	4607      	mov	r7, r0
 8000cf4:	b9f8      	cbnz	r0, 8000d36 <unwind_phase2_forced+0xaa>
 8000cf6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000cfa:	a97a      	add	r1, sp, #488	; 0x1e8
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f008 fe10 	bl	8009922 <memcpy>
 8000d02:	f1ba 0f08 	cmp.w	sl, #8
 8000d06:	d11c      	bne.n	8000d42 <unwind_phase2_forced+0xb6>
 8000d08:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000d0a:	4628      	mov	r0, r5
 8000d0c:	f7ff ff14 	bl	8000b38 <get_eit_entry>
 8000d10:	2f00      	cmp	r7, #0
 8000d12:	bf08      	it	eq
 8000d14:	2609      	moveq	r6, #9
 8000d16:	4607      	mov	r7, r0
 8000d18:	bf18      	it	ne
 8000d1a:	260a      	movne	r6, #10
 8000d1c:	2800      	cmp	r0, #0
 8000d1e:	d0d1      	beq.n	8000cc4 <unwind_phase2_forced+0x38>
 8000d20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d22:	f046 0110 	orr.w	r1, r6, #16
 8000d26:	e9cd 4900 	strd	r4, r9, [sp]
 8000d2a:	462a      	mov	r2, r5
 8000d2c:	6463      	str	r3, [r4, #68]	; 0x44
 8000d2e:	2001      	movs	r0, #1
 8000d30:	462b      	mov	r3, r5
 8000d32:	47c0      	blx	r8
 8000d34:	b100      	cbz	r0, 8000d38 <unwind_phase2_forced+0xac>
 8000d36:	2709      	movs	r7, #9
 8000d38:	4638      	mov	r0, r7
 8000d3a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	f1ba 0f07 	cmp.w	sl, #7
 8000d46:	d1f6      	bne.n	8000d36 <unwind_phase2_forced+0xaa>
 8000d48:	4638      	mov	r0, r7
 8000d4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000d4c:	f7ff ff7c 	bl	8000c48 <_Unwind_DebugHook>
 8000d50:	a803      	add	r0, sp, #12
 8000d52:	f000 fba3 	bl	800149c <__restore_core_regs>
 8000d56:	bf00      	nop

08000d58 <_Unwind_GetCFA>:
 8000d58:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000d5a:	4770      	bx	lr

08000d5c <__gnu_Unwind_RaiseException>:
 8000d5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d62:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000d64:	b0f9      	sub	sp, #484	; 0x1e4
 8000d66:	640b      	str	r3, [r1, #64]	; 0x40
 8000d68:	1d0d      	adds	r5, r1, #4
 8000d6a:	ac01      	add	r4, sp, #4
 8000d6c:	460f      	mov	r7, r1
 8000d6e:	4606      	mov	r6, r0
 8000d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000d84:	f8cd c000 	str.w	ip, [sp]
 8000d88:	e006      	b.n	8000d98 <__gnu_Unwind_RaiseException+0x3c>
 8000d8a:	6933      	ldr	r3, [r6, #16]
 8000d8c:	466a      	mov	r2, sp
 8000d8e:	4631      	mov	r1, r6
 8000d90:	4798      	blx	r3
 8000d92:	2808      	cmp	r0, #8
 8000d94:	4604      	mov	r4, r0
 8000d96:	d108      	bne.n	8000daa <__gnu_Unwind_RaiseException+0x4e>
 8000d98:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	f7ff fecc 	bl	8000b38 <get_eit_entry>
 8000da0:	2800      	cmp	r0, #0
 8000da2:	d0f2      	beq.n	8000d8a <__gnu_Unwind_RaiseException+0x2e>
 8000da4:	2009      	movs	r0, #9
 8000da6:	b079      	add	sp, #484	; 0x1e4
 8000da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000daa:	4668      	mov	r0, sp
 8000dac:	f7ff ff18 	bl	8000be0 <restore_non_core_regs>
 8000db0:	2c06      	cmp	r4, #6
 8000db2:	d1f7      	bne.n	8000da4 <__gnu_Unwind_RaiseException+0x48>
 8000db4:	4639      	mov	r1, r7
 8000db6:	4630      	mov	r0, r6
 8000db8:	f7ff ff48 	bl	8000c4c <unwind_phase2>

08000dbc <__gnu_Unwind_ForcedUnwind>:
 8000dbc:	b430      	push	{r4, r5}
 8000dbe:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000dc0:	60c1      	str	r1, [r0, #12]
 8000dc2:	6182      	str	r2, [r0, #24]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	641d      	str	r5, [r3, #64]	; 0x40
 8000dc8:	2200      	movs	r2, #0
 8000dca:	bc30      	pop	{r4, r5}
 8000dcc:	e75e      	b.n	8000c8c <unwind_phase2_forced>
 8000dce:	bf00      	nop

08000dd0 <__gnu_Unwind_Resume>:
 8000dd0:	b570      	push	{r4, r5, r6, lr}
 8000dd2:	6943      	ldr	r3, [r0, #20]
 8000dd4:	68c6      	ldr	r6, [r0, #12]
 8000dd6:	640b      	str	r3, [r1, #64]	; 0x40
 8000dd8:	b9be      	cbnz	r6, 8000e0a <__gnu_Unwind_Resume+0x3a>
 8000dda:	6903      	ldr	r3, [r0, #16]
 8000ddc:	460a      	mov	r2, r1
 8000dde:	4604      	mov	r4, r0
 8000de0:	460d      	mov	r5, r1
 8000de2:	4601      	mov	r1, r0
 8000de4:	2002      	movs	r0, #2
 8000de6:	4798      	blx	r3
 8000de8:	2807      	cmp	r0, #7
 8000dea:	d007      	beq.n	8000dfc <__gnu_Unwind_Resume+0x2c>
 8000dec:	2808      	cmp	r0, #8
 8000dee:	d103      	bne.n	8000df8 <__gnu_Unwind_Resume+0x28>
 8000df0:	4629      	mov	r1, r5
 8000df2:	4620      	mov	r0, r4
 8000df4:	f7ff ff2a 	bl	8000c4c <unwind_phase2>
 8000df8:	f008 fd34 	bl	8009864 <abort>
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000e00:	f7ff ff22 	bl	8000c48 <_Unwind_DebugHook>
 8000e04:	1d28      	adds	r0, r5, #4
 8000e06:	f000 fb49 	bl	800149c <__restore_core_regs>
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f7ff ff3e 	bl	8000c8c <unwind_phase2_forced>
 8000e10:	f008 fd28 	bl	8009864 <abort>

08000e14 <__gnu_Unwind_Resume_or_Rethrow>:
 8000e14:	68c2      	ldr	r2, [r0, #12]
 8000e16:	b12a      	cbz	r2, 8000e24 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8000e18:	b410      	push	{r4}
 8000e1a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	640c      	str	r4, [r1, #64]	; 0x40
 8000e20:	bc10      	pop	{r4}
 8000e22:	e733      	b.n	8000c8c <unwind_phase2_forced>
 8000e24:	e79a      	b.n	8000d5c <__gnu_Unwind_RaiseException>
 8000e26:	bf00      	nop

08000e28 <_Unwind_Complete>:
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <_Unwind_DeleteException>:
 8000e2c:	6883      	ldr	r3, [r0, #8]
 8000e2e:	b113      	cbz	r3, 8000e36 <_Unwind_DeleteException+0xa>
 8000e30:	4601      	mov	r1, r0
 8000e32:	2001      	movs	r0, #1
 8000e34:	4718      	bx	r3
 8000e36:	4770      	bx	lr

08000e38 <_Unwind_VRS_Get>:
 8000e38:	2904      	cmp	r1, #4
 8000e3a:	d807      	bhi.n	8000e4c <_Unwind_VRS_Get+0x14>
 8000e3c:	e8df f001 	tbb	[pc, r1]
 8000e40:	08060803 	.word	0x08060803
 8000e44:	08          	.byte	0x08
 8000e45:	00          	.byte	0x00
 8000e46:	b90b      	cbnz	r3, 8000e4c <_Unwind_VRS_Get+0x14>
 8000e48:	2a0f      	cmp	r2, #15
 8000e4a:	d903      	bls.n	8000e54 <_Unwind_VRS_Get+0x1c>
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	4770      	bx	lr
 8000e50:	2001      	movs	r0, #1
 8000e52:	4770      	bx	lr
 8000e54:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8000e58:	6842      	ldr	r2, [r0, #4]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	9b00      	ldr	r3, [sp, #0]
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <_Unwind_GetGR>:
 8000e64:	2300      	movs	r3, #0
 8000e66:	b510      	push	{r4, lr}
 8000e68:	b084      	sub	sp, #16
 8000e6a:	ac03      	add	r4, sp, #12
 8000e6c:	460a      	mov	r2, r1
 8000e6e:	9400      	str	r4, [sp, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f7ff ffe1 	bl	8000e38 <_Unwind_VRS_Get>
 8000e76:	9803      	ldr	r0, [sp, #12]
 8000e78:	b004      	add	sp, #16
 8000e7a:	bd10      	pop	{r4, pc}

08000e7c <_Unwind_VRS_Set>:
 8000e7c:	2904      	cmp	r1, #4
 8000e7e:	d807      	bhi.n	8000e90 <_Unwind_VRS_Set+0x14>
 8000e80:	e8df f001 	tbb	[pc, r1]
 8000e84:	08060803 	.word	0x08060803
 8000e88:	08          	.byte	0x08
 8000e89:	00          	.byte	0x00
 8000e8a:	b90b      	cbnz	r3, 8000e90 <_Unwind_VRS_Set+0x14>
 8000e8c:	2a0f      	cmp	r2, #15
 8000e8e:	d903      	bls.n	8000e98 <_Unwind_VRS_Set+0x1c>
 8000e90:	2002      	movs	r0, #2
 8000e92:	4770      	bx	lr
 8000e94:	2001      	movs	r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	9900      	ldr	r1, [sp, #0]
 8000e9a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000e9e:	6809      	ldr	r1, [r1, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	6051      	str	r1, [r2, #4]
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <_Unwind_SetGR>:
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	b510      	push	{r4, lr}
 8000eac:	b084      	sub	sp, #16
 8000eae:	ac04      	add	r4, sp, #16
 8000eb0:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000eb4:	9400      	str	r4, [sp, #0]
 8000eb6:	460a      	mov	r2, r1
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f7ff ffdf 	bl	8000e7c <_Unwind_VRS_Set>
 8000ebe:	b004      	add	sp, #16
 8000ec0:	bd10      	pop	{r4, pc}
 8000ec2:	bf00      	nop

08000ec4 <__gnu_Unwind_Backtrace>:
 8000ec4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eca:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000ecc:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	1d15      	adds	r5, r2, #4
 8000ed4:	ac17      	add	r4, sp, #92	; 0x5c
 8000ed6:	4607      	mov	r7, r0
 8000ed8:	460e      	mov	r6, r1
 8000eda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000eea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000eee:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 8000ef2:	e012      	b.n	8000f1a <__gnu_Unwind_Backtrace+0x56>
 8000ef4:	210c      	movs	r1, #12
 8000ef6:	a816      	add	r0, sp, #88	; 0x58
 8000ef8:	466a      	mov	r2, sp
 8000efa:	f7ff ffd5 	bl	8000ea8 <_Unwind_SetGR>
 8000efe:	4631      	mov	r1, r6
 8000f00:	a816      	add	r0, sp, #88	; 0x58
 8000f02:	47b8      	blx	r7
 8000f04:	b978      	cbnz	r0, 8000f26 <__gnu_Unwind_Backtrace+0x62>
 8000f06:	9b04      	ldr	r3, [sp, #16]
 8000f08:	aa16      	add	r2, sp, #88	; 0x58
 8000f0a:	4669      	mov	r1, sp
 8000f0c:	2008      	movs	r0, #8
 8000f0e:	4798      	blx	r3
 8000f10:	2805      	cmp	r0, #5
 8000f12:	4604      	mov	r4, r0
 8000f14:	d008      	beq.n	8000f28 <__gnu_Unwind_Backtrace+0x64>
 8000f16:	2809      	cmp	r0, #9
 8000f18:	d005      	beq.n	8000f26 <__gnu_Unwind_Backtrace+0x62>
 8000f1a:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000f1c:	4668      	mov	r0, sp
 8000f1e:	f7ff fe0b 	bl	8000b38 <get_eit_entry>
 8000f22:	2800      	cmp	r0, #0
 8000f24:	d0e6      	beq.n	8000ef4 <__gnu_Unwind_Backtrace+0x30>
 8000f26:	2409      	movs	r4, #9
 8000f28:	a816      	add	r0, sp, #88	; 0x58
 8000f2a:	f7ff fe59 	bl	8000be0 <restore_non_core_regs>
 8000f2e:	4620      	mov	r0, r4
 8000f30:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f36:	bf00      	nop

08000f38 <__gnu_unwind_pr_common>:
 8000f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f3c:	460d      	mov	r5, r1
 8000f3e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8000f40:	b089      	sub	sp, #36	; 0x24
 8000f42:	1d0c      	adds	r4, r1, #4
 8000f44:	4616      	mov	r6, r2
 8000f46:	f000 0b03 	and.w	fp, r0, #3
 8000f4a:	680a      	ldr	r2, [r1, #0]
 8000f4c:	461f      	mov	r7, r3
 8000f4e:	9406      	str	r4, [sp, #24]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d068      	beq.n	8001026 <__gnu_unwind_pr_common+0xee>
 8000f54:	2102      	movs	r1, #2
 8000f56:	0c13      	lsrs	r3, r2, #16
 8000f58:	f88d 301d 	strb.w	r3, [sp, #29]
 8000f5c:	0412      	lsls	r2, r2, #16
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000f64:	9205      	str	r2, [sp, #20]
 8000f66:	f88d 101c 	strb.w	r1, [sp, #28]
 8000f6a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000f6c:	f1bb 0f02 	cmp.w	fp, #2
 8000f70:	bf08      	it	eq
 8000f72:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000f74:	f013 0301 	ands.w	r3, r3, #1
 8000f78:	d146      	bne.n	8001008 <__gnu_unwind_pr_common+0xd0>
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	f000 0308 	and.w	r3, r0, #8
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	f8d4 9000 	ldr.w	r9, [r4]
 8000f86:	f1b9 0f00 	cmp.w	r9, #0
 8000f8a:	f000 80f3 	beq.w	8001174 <__gnu_unwind_pr_common+0x23c>
 8000f8e:	2f02      	cmp	r7, #2
 8000f90:	d045      	beq.n	800101e <__gnu_unwind_pr_common+0xe6>
 8000f92:	f8b4 9000 	ldrh.w	r9, [r4]
 8000f96:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 8000f9a:	3404      	adds	r4, #4
 8000f9c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000f9e:	f028 0a01 	bic.w	sl, r8, #1
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	4630      	mov	r0, r6
 8000fa6:	449a      	add	sl, r3
 8000fa8:	f7ff ff5c 	bl	8000e64 <_Unwind_GetGR>
 8000fac:	4582      	cmp	sl, r0
 8000fae:	d834      	bhi.n	800101a <__gnu_unwind_pr_common+0xe2>
 8000fb0:	f029 0301 	bic.w	r3, r9, #1
 8000fb4:	4453      	add	r3, sl
 8000fb6:	4283      	cmp	r3, r0
 8000fb8:	bf94      	ite	ls
 8000fba:	2000      	movls	r0, #0
 8000fbc:	2001      	movhi	r0, #1
 8000fbe:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8000fc2:	f008 0802 	and.w	r8, r8, #2
 8000fc6:	f009 0901 	and.w	r9, r9, #1
 8000fca:	ea48 0809 	orr.w	r8, r8, r9
 8000fce:	f1b8 0f01 	cmp.w	r8, #1
 8000fd2:	d03a      	beq.n	800104a <__gnu_unwind_pr_common+0x112>
 8000fd4:	d331      	bcc.n	800103a <__gnu_unwind_pr_common+0x102>
 8000fd6:	f1b8 0f02 	cmp.w	r8, #2
 8000fda:	d11a      	bne.n	8001012 <__gnu_unwind_pr_common+0xda>
 8000fdc:	6823      	ldr	r3, [r4, #0]
 8000fde:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
 8000fe2:	f1bb 0f00 	cmp.w	fp, #0
 8000fe6:	d166      	bne.n	80010b6 <__gnu_unwind_pr_common+0x17e>
 8000fe8:	b130      	cbz	r0, 8000ff8 <__gnu_unwind_pr_common+0xc0>
 8000fea:	9a00      	ldr	r2, [sp, #0]
 8000fec:	2a00      	cmp	r2, #0
 8000fee:	d06c      	beq.n	80010ca <__gnu_unwind_pr_common+0x192>
 8000ff0:	f1ba 0f00 	cmp.w	sl, #0
 8000ff4:	f000 8090 	beq.w	8001118 <__gnu_unwind_pr_common+0x1e0>
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	da00      	bge.n	8000ffe <__gnu_unwind_pr_common+0xc6>
 8000ffc:	3404      	adds	r4, #4
 8000ffe:	f10a 0301 	add.w	r3, sl, #1
 8001002:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001006:	e7bc      	b.n	8000f82 <__gnu_unwind_pr_common+0x4a>
 8001008:	4630      	mov	r0, r6
 800100a:	a905      	add	r1, sp, #20
 800100c:	f000 fb48 	bl	80016a0 <__gnu_unwind_execute>
 8001010:	b178      	cbz	r0, 8001032 <__gnu_unwind_pr_common+0xfa>
 8001012:	2009      	movs	r0, #9
 8001014:	b009      	add	sp, #36	; 0x24
 8001016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800101a:	2000      	movs	r0, #0
 800101c:	e7cf      	b.n	8000fbe <__gnu_unwind_pr_common+0x86>
 800101e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8001022:	3408      	adds	r4, #8
 8001024:	e7ba      	b.n	8000f9c <__gnu_unwind_pr_common+0x64>
 8001026:	2303      	movs	r3, #3
 8001028:	0212      	lsls	r2, r2, #8
 800102a:	9205      	str	r2, [sp, #20]
 800102c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8001030:	e79b      	b.n	8000f6a <__gnu_unwind_pr_common+0x32>
 8001032:	2008      	movs	r0, #8
 8001034:	b009      	add	sp, #36	; 0x24
 8001036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800103a:	f1bb 0f00 	cmp.w	fp, #0
 800103e:	d002      	beq.n	8001046 <__gnu_unwind_pr_common+0x10e>
 8001040:	2800      	cmp	r0, #0
 8001042:	f040 80b4 	bne.w	80011ae <__gnu_unwind_pr_common+0x276>
 8001046:	3404      	adds	r4, #4
 8001048:	e79b      	b.n	8000f82 <__gnu_unwind_pr_common+0x4a>
 800104a:	f1bb 0f00 	cmp.w	fp, #0
 800104e:	d118      	bne.n	8001082 <__gnu_unwind_pr_common+0x14a>
 8001050:	b1a8      	cbz	r0, 800107e <__gnu_unwind_pr_common+0x146>
 8001052:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001056:	1c99      	adds	r1, r3, #2
 8001058:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 800105c:	d0d9      	beq.n	8001012 <__gnu_unwind_pr_common+0xda>
 800105e:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8001062:	3301      	adds	r3, #1
 8001064:	9104      	str	r1, [sp, #16]
 8001066:	f000 80b5 	beq.w	80011d4 <__gnu_unwind_pr_common+0x29c>
 800106a:	1d20      	adds	r0, r4, #4
 800106c:	f7ff fde4 	bl	8000c38 <_Unwind_decode_typeinfo_ptr.isra.0>
 8001070:	ab04      	add	r3, sp, #16
 8001072:	4601      	mov	r1, r0
 8001074:	4628      	mov	r0, r5
 8001076:	f007 fb23 	bl	80086c0 <__cxa_type_match>
 800107a:	2800      	cmp	r0, #0
 800107c:	d167      	bne.n	800114e <__gnu_unwind_pr_common+0x216>
 800107e:	3408      	adds	r4, #8
 8001080:	e77f      	b.n	8000f82 <__gnu_unwind_pr_common+0x4a>
 8001082:	210d      	movs	r1, #13
 8001084:	4630      	mov	r0, r6
 8001086:	f8d5 8020 	ldr.w	r8, [r5, #32]
 800108a:	f7ff feeb 	bl	8000e64 <_Unwind_GetGR>
 800108e:	4580      	cmp	r8, r0
 8001090:	d1f5      	bne.n	800107e <__gnu_unwind_pr_common+0x146>
 8001092:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001094:	429c      	cmp	r4, r3
 8001096:	d1f2      	bne.n	800107e <__gnu_unwind_pr_common+0x146>
 8001098:	4620      	mov	r0, r4
 800109a:	f7ff fcff 	bl	8000a9c <selfrel_offset31>
 800109e:	210f      	movs	r1, #15
 80010a0:	4602      	mov	r2, r0
 80010a2:	4630      	mov	r0, r6
 80010a4:	f7ff ff00 	bl	8000ea8 <_Unwind_SetGR>
 80010a8:	4630      	mov	r0, r6
 80010aa:	462a      	mov	r2, r5
 80010ac:	2100      	movs	r1, #0
 80010ae:	f7ff fefb 	bl	8000ea8 <_Unwind_SetGR>
 80010b2:	2007      	movs	r0, #7
 80010b4:	e7ae      	b.n	8001014 <__gnu_unwind_pr_common+0xdc>
 80010b6:	210d      	movs	r1, #13
 80010b8:	4630      	mov	r0, r6
 80010ba:	f8d5 8020 	ldr.w	r8, [r5, #32]
 80010be:	f7ff fed1 	bl	8000e64 <_Unwind_GetGR>
 80010c2:	4580      	cmp	r8, r0
 80010c4:	d032      	beq.n	800112c <__gnu_unwind_pr_common+0x1f4>
 80010c6:	6823      	ldr	r3, [r4, #0]
 80010c8:	e796      	b.n	8000ff8 <__gnu_unwind_pr_common+0xc0>
 80010ca:	f1ba 0f00 	cmp.w	sl, #0
 80010ce:	d023      	beq.n	8001118 <__gnu_unwind_pr_common+0x1e0>
 80010d0:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80010d4:	f104 0804 	add.w	r8, r4, #4
 80010d8:	f8cd b008 	str.w	fp, [sp, #8]
 80010dc:	f8dd 9000 	ldr.w	r9, [sp]
 80010e0:	46a3      	mov	fp, r4
 80010e2:	9703      	str	r7, [sp, #12]
 80010e4:	461c      	mov	r4, r3
 80010e6:	e002      	b.n	80010ee <__gnu_unwind_pr_common+0x1b6>
 80010e8:	4557      	cmp	r7, sl
 80010ea:	46b9      	mov	r9, r7
 80010ec:	d040      	beq.n	8001170 <__gnu_unwind_pr_common+0x238>
 80010ee:	4640      	mov	r0, r8
 80010f0:	9404      	str	r4, [sp, #16]
 80010f2:	f7ff fda1 	bl	8000c38 <_Unwind_decode_typeinfo_ptr.isra.0>
 80010f6:	ab04      	add	r3, sp, #16
 80010f8:	4601      	mov	r1, r0
 80010fa:	2200      	movs	r2, #0
 80010fc:	4628      	mov	r0, r5
 80010fe:	f007 fadf 	bl	80086c0 <__cxa_type_match>
 8001102:	f109 0701 	add.w	r7, r9, #1
 8001106:	f108 0804 	add.w	r8, r8, #4
 800110a:	2800      	cmp	r0, #0
 800110c:	d0ec      	beq.n	80010e8 <__gnu_unwind_pr_common+0x1b0>
 800110e:	45d1      	cmp	r9, sl
 8001110:	465c      	mov	r4, fp
 8001112:	e9dd b702 	ldrd	fp, r7, [sp, #8]
 8001116:	d1d6      	bne.n	80010c6 <__gnu_unwind_pr_common+0x18e>
 8001118:	4630      	mov	r0, r6
 800111a:	210d      	movs	r1, #13
 800111c:	f7ff fea2 	bl	8000e64 <_Unwind_GetGR>
 8001120:	9b04      	ldr	r3, [sp, #16]
 8001122:	6228      	str	r0, [r5, #32]
 8001124:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8001128:	2006      	movs	r0, #6
 800112a:	e773      	b.n	8001014 <__gnu_unwind_pr_common+0xdc>
 800112c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800112e:	429c      	cmp	r4, r3
 8001130:	d1c9      	bne.n	80010c6 <__gnu_unwind_pr_common+0x18e>
 8001132:	2204      	movs	r2, #4
 8001134:	f04f 0800 	mov.w	r8, #0
 8001138:	18a3      	adds	r3, r4, r2
 800113a:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
 800113e:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
 8001142:	6823      	ldr	r3, [r4, #0]
 8001144:	4543      	cmp	r3, r8
 8001146:	db4d      	blt.n	80011e4 <__gnu_unwind_pr_common+0x2ac>
 8001148:	2301      	movs	r3, #1
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	e757      	b.n	8000ffe <__gnu_unwind_pr_common+0xc6>
 800114e:	4680      	mov	r8, r0
 8001150:	210d      	movs	r1, #13
 8001152:	4630      	mov	r0, r6
 8001154:	f7ff fe86 	bl	8000e64 <_Unwind_GetGR>
 8001158:	f1b8 0f02 	cmp.w	r8, #2
 800115c:	6228      	str	r0, [r5, #32]
 800115e:	d13e      	bne.n	80011de <__gnu_unwind_pr_common+0x2a6>
 8001160:	462b      	mov	r3, r5
 8001162:	9a04      	ldr	r2, [sp, #16]
 8001164:	f843 2f2c 	str.w	r2, [r3, #44]!
 8001168:	626b      	str	r3, [r5, #36]	; 0x24
 800116a:	62ac      	str	r4, [r5, #40]	; 0x28
 800116c:	2006      	movs	r0, #6
 800116e:	e751      	b.n	8001014 <__gnu_unwind_pr_common+0xdc>
 8001170:	465c      	mov	r4, fp
 8001172:	e7d1      	b.n	8001118 <__gnu_unwind_pr_common+0x1e0>
 8001174:	a905      	add	r1, sp, #20
 8001176:	4630      	mov	r0, r6
 8001178:	f000 fa92 	bl	80016a0 <__gnu_unwind_execute>
 800117c:	2800      	cmp	r0, #0
 800117e:	f47f af48 	bne.w	8001012 <__gnu_unwind_pr_common+0xda>
 8001182:	9b01      	ldr	r3, [sp, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	f43f af54 	beq.w	8001032 <__gnu_unwind_pr_common+0xfa>
 800118a:	210f      	movs	r1, #15
 800118c:	4630      	mov	r0, r6
 800118e:	f7ff fe69 	bl	8000e64 <_Unwind_GetGR>
 8001192:	210e      	movs	r1, #14
 8001194:	4602      	mov	r2, r0
 8001196:	4630      	mov	r0, r6
 8001198:	f7ff fe86 	bl	8000ea8 <_Unwind_SetGR>
 800119c:	4630      	mov	r0, r6
 800119e:	4a1a      	ldr	r2, [pc, #104]	; (8001208 <__gnu_unwind_pr_common+0x2d0>)
 80011a0:	210f      	movs	r1, #15
 80011a2:	f7ff fe81 	bl	8000ea8 <_Unwind_SetGR>
 80011a6:	2007      	movs	r0, #7
 80011a8:	b009      	add	sp, #36	; 0x24
 80011aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011ae:	4620      	mov	r0, r4
 80011b0:	f7ff fc74 	bl	8000a9c <selfrel_offset31>
 80011b4:	3404      	adds	r4, #4
 80011b6:	4607      	mov	r7, r0
 80011b8:	63ac      	str	r4, [r5, #56]	; 0x38
 80011ba:	4628      	mov	r0, r5
 80011bc:	f007 fade 	bl	800877c <__cxa_begin_cleanup>
 80011c0:	2800      	cmp	r0, #0
 80011c2:	f43f af26 	beq.w	8001012 <__gnu_unwind_pr_common+0xda>
 80011c6:	4630      	mov	r0, r6
 80011c8:	463a      	mov	r2, r7
 80011ca:	210f      	movs	r1, #15
 80011cc:	f7ff fe6c 	bl	8000ea8 <_Unwind_SetGR>
 80011d0:	2007      	movs	r0, #7
 80011d2:	e71f      	b.n	8001014 <__gnu_unwind_pr_common+0xdc>
 80011d4:	4630      	mov	r0, r6
 80011d6:	210d      	movs	r1, #13
 80011d8:	f7ff fe44 	bl	8000e64 <_Unwind_GetGR>
 80011dc:	6228      	str	r0, [r5, #32]
 80011de:	9b04      	ldr	r3, [sp, #16]
 80011e0:	626b      	str	r3, [r5, #36]	; 0x24
 80011e2:	e7c2      	b.n	800116a <__gnu_unwind_pr_common+0x232>
 80011e4:	f10a 0001 	add.w	r0, sl, #1
 80011e8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80011ec:	f7ff fc56 	bl	8000a9c <selfrel_offset31>
 80011f0:	210f      	movs	r1, #15
 80011f2:	4602      	mov	r2, r0
 80011f4:	4630      	mov	r0, r6
 80011f6:	f7ff fe57 	bl	8000ea8 <_Unwind_SetGR>
 80011fa:	4630      	mov	r0, r6
 80011fc:	462a      	mov	r2, r5
 80011fe:	4641      	mov	r1, r8
 8001200:	f7ff fe52 	bl	8000ea8 <_Unwind_SetGR>
 8001204:	2007      	movs	r0, #7
 8001206:	e705      	b.n	8001014 <__gnu_unwind_pr_common+0xdc>
 8001208:	08009479 	.word	0x08009479

0800120c <__aeabi_unwind_cpp_pr0>:
 800120c:	2300      	movs	r3, #0
 800120e:	e693      	b.n	8000f38 <__gnu_unwind_pr_common>

08001210 <__aeabi_unwind_cpp_pr1>:
 8001210:	2301      	movs	r3, #1
 8001212:	e691      	b.n	8000f38 <__gnu_unwind_pr_common>

08001214 <__aeabi_unwind_cpp_pr2>:
 8001214:	2302      	movs	r3, #2
 8001216:	e68f      	b.n	8000f38 <__gnu_unwind_pr_common>

08001218 <_Unwind_VRS_Pop>:
 8001218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800121c:	4605      	mov	r5, r0
 800121e:	b0c4      	sub	sp, #272	; 0x110
 8001220:	2904      	cmp	r1, #4
 8001222:	d806      	bhi.n	8001232 <_Unwind_VRS_Pop+0x1a>
 8001224:	e8df f001 	tbb	[pc, r1]
 8001228:	03052b4d 	.word	0x03052b4d
 800122c:	09          	.byte	0x09
 800122d:	00          	.byte	0x00
 800122e:	2b03      	cmp	r3, #3
 8001230:	d05f      	beq.n	80012f2 <_Unwind_VRS_Pop+0xda>
 8001232:	2002      	movs	r0, #2
 8001234:	b044      	add	sp, #272	; 0x110
 8001236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f9      	bne.n	8001232 <_Unwind_VRS_Pop+0x1a>
 800123e:	2a10      	cmp	r2, #16
 8001240:	d8f7      	bhi.n	8001232 <_Unwind_VRS_Pop+0x1a>
 8001242:	682b      	ldr	r3, [r5, #0]
 8001244:	06dc      	lsls	r4, r3, #27
 8001246:	f100 80f6 	bmi.w	8001436 <_Unwind_VRS_Pop+0x21e>
 800124a:	ac22      	add	r4, sp, #136	; 0x88
 800124c:	4620      	mov	r0, r4
 800124e:	9201      	str	r2, [sp, #4]
 8001250:	2601      	movs	r6, #1
 8001252:	f000 f995 	bl	8001580 <__gnu_Unwind_Save_WMMXC>
 8001256:	2300      	movs	r3, #0
 8001258:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800125a:	9a01      	ldr	r2, [sp, #4]
 800125c:	fa06 f103 	lsl.w	r1, r6, r3
 8001260:	4211      	tst	r1, r2
 8001262:	d003      	beq.n	800126c <_Unwind_VRS_Pop+0x54>
 8001264:	6801      	ldr	r1, [r0, #0]
 8001266:	3004      	adds	r0, #4
 8001268:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 800126c:	3301      	adds	r3, #1
 800126e:	2b04      	cmp	r3, #4
 8001270:	d1f4      	bne.n	800125c <_Unwind_VRS_Pop+0x44>
 8001272:	63a8      	str	r0, [r5, #56]	; 0x38
 8001274:	4620      	mov	r0, r4
 8001276:	f000 f979 	bl	800156c <__gnu_Unwind_Restore_WMMXC>
 800127a:	2000      	movs	r0, #0
 800127c:	e7da      	b.n	8001234 <_Unwind_VRS_Pop+0x1c>
 800127e:	2b01      	cmp	r3, #1
 8001280:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8001284:	b297      	uxth	r7, r2
 8001286:	d054      	beq.n	8001332 <_Unwind_VRS_Pop+0x11a>
 8001288:	2b05      	cmp	r3, #5
 800128a:	d1d2      	bne.n	8001232 <_Unwind_VRS_Pop+0x1a>
 800128c:	eb06 0807 	add.w	r8, r6, r7
 8001290:	f1b8 0f20 	cmp.w	r8, #32
 8001294:	d8cd      	bhi.n	8001232 <_Unwind_VRS_Pop+0x1a>
 8001296:	2e0f      	cmp	r6, #15
 8001298:	f240 809b 	bls.w	80013d2 <_Unwind_VRS_Pop+0x1ba>
 800129c:	46b8      	mov	r8, r7
 800129e:	2f00      	cmp	r7, #0
 80012a0:	f040 80dd 	bne.w	800145e <_Unwind_VRS_Pop+0x246>
 80012a4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80012a6:	2e0f      	cmp	r6, #15
 80012a8:	63aa      	str	r2, [r5, #56]	; 0x38
 80012aa:	f240 80c0 	bls.w	800142e <_Unwind_VRS_Pop+0x216>
 80012ae:	f1b8 0f00 	cmp.w	r8, #0
 80012b2:	d002      	beq.n	80012ba <_Unwind_VRS_Pop+0xa2>
 80012b4:	a802      	add	r0, sp, #8
 80012b6:	f000 f90d 	bl	80014d4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80012ba:	2000      	movs	r0, #0
 80012bc:	b044      	add	sp, #272	; 0x110
 80012be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1b5      	bne.n	8001232 <_Unwind_VRS_Pop+0x1a>
 80012c6:	2701      	movs	r7, #1
 80012c8:	6bac      	ldr	r4, [r5, #56]	; 0x38
 80012ca:	b296      	uxth	r6, r2
 80012cc:	1d28      	adds	r0, r5, #4
 80012ce:	fa07 f103 	lsl.w	r1, r7, r3
 80012d2:	4231      	tst	r1, r6
 80012d4:	f103 0301 	add.w	r3, r3, #1
 80012d8:	d002      	beq.n	80012e0 <_Unwind_VRS_Pop+0xc8>
 80012da:	6821      	ldr	r1, [r4, #0]
 80012dc:	3404      	adds	r4, #4
 80012de:	6001      	str	r1, [r0, #0]
 80012e0:	2b10      	cmp	r3, #16
 80012e2:	f100 0004 	add.w	r0, r0, #4
 80012e6:	d1f2      	bne.n	80012ce <_Unwind_VRS_Pop+0xb6>
 80012e8:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80012ec:	d1e5      	bne.n	80012ba <_Unwind_VRS_Pop+0xa2>
 80012ee:	63ac      	str	r4, [r5, #56]	; 0x38
 80012f0:	e7a0      	b.n	8001234 <_Unwind_VRS_Pop+0x1c>
 80012f2:	0c16      	lsrs	r6, r2, #16
 80012f4:	b297      	uxth	r7, r2
 80012f6:	19f3      	adds	r3, r6, r7
 80012f8:	2b10      	cmp	r3, #16
 80012fa:	d89a      	bhi.n	8001232 <_Unwind_VRS_Pop+0x1a>
 80012fc:	682b      	ldr	r3, [r5, #0]
 80012fe:	071a      	lsls	r2, r3, #28
 8001300:	d45f      	bmi.n	80013c2 <_Unwind_VRS_Pop+0x1aa>
 8001302:	ac22      	add	r4, sp, #136	; 0x88
 8001304:	4620      	mov	r0, r4
 8001306:	f000 f90f 	bl	8001528 <__gnu_Unwind_Save_WMMXD>
 800130a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800130e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8001310:	b14f      	cbz	r7, 8001326 <_Unwind_VRS_Pop+0x10e>
 8001312:	4603      	mov	r3, r0
 8001314:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	3304      	adds	r3, #4
 800131c:	4283      	cmp	r3, r0
 800131e:	f841 2b04 	str.w	r2, [r1], #4
 8001322:	d1f9      	bne.n	8001318 <_Unwind_VRS_Pop+0x100>
 8001324:	4618      	mov	r0, r3
 8001326:	63a8      	str	r0, [r5, #56]	; 0x38
 8001328:	4620      	mov	r0, r4
 800132a:	f000 f8db 	bl	80014e4 <__gnu_Unwind_Restore_WMMXD>
 800132e:	2000      	movs	r0, #0
 8001330:	e780      	b.n	8001234 <_Unwind_VRS_Pop+0x1c>
 8001332:	19f2      	adds	r2, r6, r7
 8001334:	2a10      	cmp	r2, #16
 8001336:	f63f af7c 	bhi.w	8001232 <_Unwind_VRS_Pop+0x1a>
 800133a:	2e0f      	cmp	r6, #15
 800133c:	f63f af79 	bhi.w	8001232 <_Unwind_VRS_Pop+0x1a>
 8001340:	682a      	ldr	r2, [r5, #0]
 8001342:	07d1      	lsls	r1, r2, #31
 8001344:	d508      	bpl.n	8001358 <_Unwind_VRS_Pop+0x140>
 8001346:	4628      	mov	r0, r5
 8001348:	f022 0203 	bic.w	r2, r2, #3
 800134c:	f840 2b48 	str.w	r2, [r0], #72
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	f000 f8b3 	bl	80014bc <__gnu_Unwind_Save_VFP>
 8001356:	9b01      	ldr	r3, [sp, #4]
 8001358:	ac22      	add	r4, sp, #136	; 0x88
 800135a:	4620      	mov	r0, r4
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	f000 f8ad 	bl	80014bc <__gnu_Unwind_Save_VFP>
 8001362:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8001364:	9b01      	ldr	r3, [sp, #4]
 8001366:	2f00      	cmp	r7, #0
 8001368:	f000 8095 	beq.w	8001496 <_Unwind_VRS_Pop+0x27e>
 800136c:	f04f 0800 	mov.w	r8, #0
 8001370:	007a      	lsls	r2, r7, #1
 8001372:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8001376:	3c04      	subs	r4, #4
 8001378:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800137c:	f851 0b04 	ldr.w	r0, [r1], #4
 8001380:	4291      	cmp	r1, r2
 8001382:	f844 0f04 	str.w	r0, [r4, #4]!
 8001386:	d1f9      	bne.n	800137c <_Unwind_VRS_Pop+0x164>
 8001388:	f1b8 0f00 	cmp.w	r8, #0
 800138c:	d00f      	beq.n	80013ae <_Unwind_VRS_Pop+0x196>
 800138e:	ac02      	add	r4, sp, #8
 8001390:	2e10      	cmp	r6, #16
 8001392:	4631      	mov	r1, r6
 8001394:	bf38      	it	cc
 8001396:	2110      	movcc	r1, #16
 8001398:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800139c:	3984      	subs	r1, #132	; 0x84
 800139e:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
 80013a2:	f852 0b04 	ldr.w	r0, [r2], #4
 80013a6:	4294      	cmp	r4, r2
 80013a8:	f841 0f04 	str.w	r0, [r1, #4]!
 80013ac:	d1f9      	bne.n	80013a2 <_Unwind_VRS_Pop+0x18a>
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	f47f af79 	bne.w	80012a6 <_Unwind_VRS_Pop+0x8e>
 80013b4:	ac22      	add	r4, sp, #136	; 0x88
 80013b6:	3204      	adds	r2, #4
 80013b8:	63aa      	str	r2, [r5, #56]	; 0x38
 80013ba:	4620      	mov	r0, r4
 80013bc:	f000 f87a 	bl	80014b4 <__gnu_Unwind_Restore_VFP>
 80013c0:	e77b      	b.n	80012ba <_Unwind_VRS_Pop+0xa2>
 80013c2:	f023 0308 	bic.w	r3, r3, #8
 80013c6:	602b      	str	r3, [r5, #0]
 80013c8:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 80013cc:	f000 f8ac 	bl	8001528 <__gnu_Unwind_Save_WMMXD>
 80013d0:	e797      	b.n	8001302 <_Unwind_VRS_Pop+0xea>
 80013d2:	f1b8 0f10 	cmp.w	r8, #16
 80013d6:	682a      	ldr	r2, [r5, #0]
 80013d8:	d943      	bls.n	8001462 <_Unwind_VRS_Pop+0x24a>
 80013da:	07d0      	lsls	r0, r2, #31
 80013dc:	f1a8 0810 	sub.w	r8, r8, #16
 80013e0:	d50b      	bpl.n	80013fa <_Unwind_VRS_Pop+0x1e2>
 80013e2:	4628      	mov	r0, r5
 80013e4:	f022 0201 	bic.w	r2, r2, #1
 80013e8:	f042 0202 	orr.w	r2, r2, #2
 80013ec:	f840 2b48 	str.w	r2, [r0], #72
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	f000 f86b 	bl	80014cc <__gnu_Unwind_Save_VFP_D>
 80013f6:	682a      	ldr	r2, [r5, #0]
 80013f8:	9b01      	ldr	r3, [sp, #4]
 80013fa:	0751      	lsls	r1, r2, #29
 80013fc:	d425      	bmi.n	800144a <_Unwind_VRS_Pop+0x232>
 80013fe:	2e0f      	cmp	r6, #15
 8001400:	d804      	bhi.n	800140c <_Unwind_VRS_Pop+0x1f4>
 8001402:	a822      	add	r0, sp, #136	; 0x88
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	f000 f861 	bl	80014cc <__gnu_Unwind_Save_VFP_D>
 800140a:	9b01      	ldr	r3, [sp, #4]
 800140c:	ac02      	add	r4, sp, #8
 800140e:	4620      	mov	r0, r4
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	f000 f863 	bl	80014dc <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001416:	f1c6 0010 	rsb	r0, r6, #16
 800141a:	2800      	cmp	r0, #0
 800141c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800141e:	9b01      	ldr	r3, [sp, #4]
 8001420:	ddb6      	ble.n	8001390 <_Unwind_VRS_Pop+0x178>
 8001422:	ac22      	add	r4, sp, #136	; 0x88
 8001424:	4611      	mov	r1, r2
 8001426:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800142a:	0042      	lsls	r2, r0, #1
 800142c:	e7a3      	b.n	8001376 <_Unwind_VRS_Pop+0x15e>
 800142e:	a822      	add	r0, sp, #136	; 0x88
 8001430:	f000 f848 	bl	80014c4 <__gnu_Unwind_Restore_VFP_D>
 8001434:	e73b      	b.n	80012ae <_Unwind_VRS_Pop+0x96>
 8001436:	f023 0310 	bic.w	r3, r3, #16
 800143a:	602b      	str	r3, [r5, #0]
 800143c:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
 8001440:	9201      	str	r2, [sp, #4]
 8001442:	f000 f89d 	bl	8001580 <__gnu_Unwind_Save_WMMXC>
 8001446:	9a01      	ldr	r2, [sp, #4]
 8001448:	e6ff      	b.n	800124a <_Unwind_VRS_Pop+0x32>
 800144a:	4628      	mov	r0, r5
 800144c:	f022 0204 	bic.w	r2, r2, #4
 8001450:	f840 2bd0 	str.w	r2, [r0], #208
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	f000 f841 	bl	80014dc <__gnu_Unwind_Save_VFP_D_16_to_31>
 800145a:	9b01      	ldr	r3, [sp, #4]
 800145c:	e7cf      	b.n	80013fe <_Unwind_VRS_Pop+0x1e6>
 800145e:	682a      	ldr	r2, [r5, #0]
 8001460:	e7cb      	b.n	80013fa <_Unwind_VRS_Pop+0x1e2>
 8001462:	07d0      	lsls	r0, r2, #31
 8001464:	d50a      	bpl.n	800147c <_Unwind_VRS_Pop+0x264>
 8001466:	4628      	mov	r0, r5
 8001468:	f022 0201 	bic.w	r2, r2, #1
 800146c:	f042 0202 	orr.w	r2, r2, #2
 8001470:	f840 2b48 	str.w	r2, [r0], #72
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	f000 f829 	bl	80014cc <__gnu_Unwind_Save_VFP_D>
 800147a:	9b01      	ldr	r3, [sp, #4]
 800147c:	ac22      	add	r4, sp, #136	; 0x88
 800147e:	4620      	mov	r0, r4
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	46b8      	mov	r8, r7
 8001484:	f000 f822 	bl	80014cc <__gnu_Unwind_Save_VFP_D>
 8001488:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800148a:	9b01      	ldr	r3, [sp, #4]
 800148c:	2f00      	cmp	r7, #0
 800148e:	f47f af6d 	bne.w	800136c <_Unwind_VRS_Pop+0x154>
 8001492:	460a      	mov	r2, r1
 8001494:	e707      	b.n	80012a6 <_Unwind_VRS_Pop+0x8e>
 8001496:	460a      	mov	r2, r1
 8001498:	e78d      	b.n	80013b6 <_Unwind_VRS_Pop+0x19e>
 800149a:	bf00      	nop

0800149c <__restore_core_regs>:
 800149c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80014a0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80014a4:	469c      	mov	ip, r3
 80014a6:	46a6      	mov	lr, r4
 80014a8:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80014ac:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80014b0:	46e5      	mov	sp, ip
 80014b2:	bd00      	pop	{pc}

080014b4 <__gnu_Unwind_Restore_VFP>:
 80014b4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop

080014bc <__gnu_Unwind_Save_VFP>:
 80014bc:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop

080014c4 <__gnu_Unwind_Restore_VFP_D>:
 80014c4:	ec90 0b20 	vldmia	r0, {d0-d15}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop

080014cc <__gnu_Unwind_Save_VFP_D>:
 80014cc:	ec80 0b20 	vstmia	r0, {d0-d15}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop

080014d4 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80014d4:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop

080014dc <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80014dc:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop

080014e4 <__gnu_Unwind_Restore_WMMXD>:
 80014e4:	ecf0 0102 	ldfe	f0, [r0], #8
 80014e8:	ecf0 1102 	ldfe	f1, [r0], #8
 80014ec:	ecf0 2102 	ldfe	f2, [r0], #8
 80014f0:	ecf0 3102 	ldfe	f3, [r0], #8
 80014f4:	ecf0 4102 	ldfe	f4, [r0], #8
 80014f8:	ecf0 5102 	ldfe	f5, [r0], #8
 80014fc:	ecf0 6102 	ldfe	f6, [r0], #8
 8001500:	ecf0 7102 	ldfe	f7, [r0], #8
 8001504:	ecf0 8102 	ldfp	f0, [r0], #8
 8001508:	ecf0 9102 	ldfp	f1, [r0], #8
 800150c:	ecf0 a102 	ldfp	f2, [r0], #8
 8001510:	ecf0 b102 	ldfp	f3, [r0], #8
 8001514:	ecf0 c102 	ldfp	f4, [r0], #8
 8001518:	ecf0 d102 	ldfp	f5, [r0], #8
 800151c:	ecf0 e102 	ldfp	f6, [r0], #8
 8001520:	ecf0 f102 	ldfp	f7, [r0], #8
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop

08001528 <__gnu_Unwind_Save_WMMXD>:
 8001528:	ece0 0102 	stfe	f0, [r0], #8
 800152c:	ece0 1102 	stfe	f1, [r0], #8
 8001530:	ece0 2102 	stfe	f2, [r0], #8
 8001534:	ece0 3102 	stfe	f3, [r0], #8
 8001538:	ece0 4102 	stfe	f4, [r0], #8
 800153c:	ece0 5102 	stfe	f5, [r0], #8
 8001540:	ece0 6102 	stfe	f6, [r0], #8
 8001544:	ece0 7102 	stfe	f7, [r0], #8
 8001548:	ece0 8102 	stfp	f0, [r0], #8
 800154c:	ece0 9102 	stfp	f1, [r0], #8
 8001550:	ece0 a102 	stfp	f2, [r0], #8
 8001554:	ece0 b102 	stfp	f3, [r0], #8
 8001558:	ece0 c102 	stfp	f4, [r0], #8
 800155c:	ece0 d102 	stfp	f5, [r0], #8
 8001560:	ece0 e102 	stfp	f6, [r0], #8
 8001564:	ece0 f102 	stfp	f7, [r0], #8
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop

0800156c <__gnu_Unwind_Restore_WMMXC>:
 800156c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001570:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001574:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001578:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop

08001580 <__gnu_Unwind_Save_WMMXC>:
 8001580:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001584:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001588:	fca0 a101 	stc2	1, cr10, [r0], #4
 800158c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop

08001594 <_Unwind_RaiseException>:
 8001594:	46ec      	mov	ip, sp
 8001596:	b500      	push	{lr}
 8001598:	e92d 5000 	stmdb	sp!, {ip, lr}
 800159c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80015a8:	a901      	add	r1, sp, #4
 80015aa:	f7ff fbd7 	bl	8000d5c <__gnu_Unwind_RaiseException>
 80015ae:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80015b2:	b012      	add	sp, #72	; 0x48
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop

080015b8 <_Unwind_Resume>:
 80015b8:	46ec      	mov	ip, sp
 80015ba:	b500      	push	{lr}
 80015bc:	e92d 5000 	stmdb	sp!, {ip, lr}
 80015c0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80015c4:	f04f 0300 	mov.w	r3, #0
 80015c8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80015cc:	a901      	add	r1, sp, #4
 80015ce:	f7ff fbff 	bl	8000dd0 <__gnu_Unwind_Resume>
 80015d2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80015d6:	b012      	add	sp, #72	; 0x48
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop

080015dc <_Unwind_Resume_or_Rethrow>:
 80015dc:	46ec      	mov	ip, sp
 80015de:	b500      	push	{lr}
 80015e0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80015e4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	e92d 000c 	stmdb	sp!, {r2, r3}
 80015f0:	a901      	add	r1, sp, #4
 80015f2:	f7ff fc0f 	bl	8000e14 <__gnu_Unwind_Resume_or_Rethrow>
 80015f6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80015fa:	b012      	add	sp, #72	; 0x48
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop

08001600 <_Unwind_ForcedUnwind>:
 8001600:	46ec      	mov	ip, sp
 8001602:	b500      	push	{lr}
 8001604:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001608:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001614:	ab01      	add	r3, sp, #4
 8001616:	f7ff fbd1 	bl	8000dbc <__gnu_Unwind_ForcedUnwind>
 800161a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800161e:	b012      	add	sp, #72	; 0x48
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop

08001624 <_Unwind_Backtrace>:
 8001624:	46ec      	mov	ip, sp
 8001626:	b500      	push	{lr}
 8001628:	e92d 5000 	stmdb	sp!, {ip, lr}
 800162c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001638:	aa01      	add	r2, sp, #4
 800163a:	f7ff fc43 	bl	8000ec4 <__gnu_Unwind_Backtrace>
 800163e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001642:	b012      	add	sp, #72	; 0x48
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop

08001648 <next_unwind_byte>:
 8001648:	7a02      	ldrb	r2, [r0, #8]
 800164a:	b97a      	cbnz	r2, 800166c <next_unwind_byte+0x24>
 800164c:	7a43      	ldrb	r3, [r0, #9]
 800164e:	b1a3      	cbz	r3, 800167a <next_unwind_byte+0x32>
 8001650:	2103      	movs	r1, #3
 8001652:	6842      	ldr	r2, [r0, #4]
 8001654:	3b01      	subs	r3, #1
 8001656:	b410      	push	{r4}
 8001658:	7243      	strb	r3, [r0, #9]
 800165a:	6813      	ldr	r3, [r2, #0]
 800165c:	1d14      	adds	r4, r2, #4
 800165e:	7201      	strb	r1, [r0, #8]
 8001660:	021a      	lsls	r2, r3, #8
 8001662:	6044      	str	r4, [r0, #4]
 8001664:	6002      	str	r2, [r0, #0]
 8001666:	bc10      	pop	{r4}
 8001668:	0e18      	lsrs	r0, r3, #24
 800166a:	4770      	bx	lr
 800166c:	6803      	ldr	r3, [r0, #0]
 800166e:	3a01      	subs	r2, #1
 8001670:	7202      	strb	r2, [r0, #8]
 8001672:	021a      	lsls	r2, r3, #8
 8001674:	6002      	str	r2, [r0, #0]
 8001676:	0e18      	lsrs	r0, r3, #24
 8001678:	4770      	bx	lr
 800167a:	20b0      	movs	r0, #176	; 0xb0
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop

08001680 <_Unwind_GetGR.constprop.0>:
 8001680:	2300      	movs	r3, #0
 8001682:	b500      	push	{lr}
 8001684:	b085      	sub	sp, #20
 8001686:	aa03      	add	r2, sp, #12
 8001688:	9200      	str	r2, [sp, #0]
 800168a:	4619      	mov	r1, r3
 800168c:	220c      	movs	r2, #12
 800168e:	f7ff fbd3 	bl	8000e38 <_Unwind_VRS_Get>
 8001692:	9803      	ldr	r0, [sp, #12]
 8001694:	b005      	add	sp, #20
 8001696:	f85d fb04 	ldr.w	pc, [sp], #4
 800169a:	bf00      	nop

0800169c <unwind_UCB_from_context>:
 800169c:	e7f0      	b.n	8001680 <_Unwind_GetGR.constprop.0>
 800169e:	bf00      	nop

080016a0 <__gnu_unwind_execute>:
 80016a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016a4:	4605      	mov	r5, r0
 80016a6:	460e      	mov	r6, r1
 80016a8:	f04f 0800 	mov.w	r8, #0
 80016ac:	b085      	sub	sp, #20
 80016ae:	4630      	mov	r0, r6
 80016b0:	f7ff ffca 	bl	8001648 <next_unwind_byte>
 80016b4:	28b0      	cmp	r0, #176	; 0xb0
 80016b6:	4604      	mov	r4, r0
 80016b8:	f000 80b0 	beq.w	800181c <__gnu_unwind_execute+0x17c>
 80016bc:	0607      	lsls	r7, r0, #24
 80016be:	d520      	bpl.n	8001702 <__gnu_unwind_execute+0x62>
 80016c0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80016c4:	2b80      	cmp	r3, #128	; 0x80
 80016c6:	d065      	beq.n	8001794 <__gnu_unwind_execute+0xf4>
 80016c8:	2b90      	cmp	r3, #144	; 0x90
 80016ca:	d036      	beq.n	800173a <__gnu_unwind_execute+0x9a>
 80016cc:	2ba0      	cmp	r3, #160	; 0xa0
 80016ce:	d078      	beq.n	80017c2 <__gnu_unwind_execute+0x122>
 80016d0:	2bb0      	cmp	r3, #176	; 0xb0
 80016d2:	d047      	beq.n	8001764 <__gnu_unwind_execute+0xc4>
 80016d4:	2bc0      	cmp	r3, #192	; 0xc0
 80016d6:	f000 8089 	beq.w	80017ec <__gnu_unwind_execute+0x14c>
 80016da:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80016de:	2bd0      	cmp	r3, #208	; 0xd0
 80016e0:	d10b      	bne.n	80016fa <__gnu_unwind_execute+0x5a>
 80016e2:	f000 0207 	and.w	r2, r0, #7
 80016e6:	3201      	adds	r2, #1
 80016e8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80016ec:	2305      	movs	r3, #5
 80016ee:	2101      	movs	r1, #1
 80016f0:	4628      	mov	r0, r5
 80016f2:	f7ff fd91 	bl	8001218 <_Unwind_VRS_Pop>
 80016f6:	2800      	cmp	r0, #0
 80016f8:	d0d9      	beq.n	80016ae <__gnu_unwind_execute+0xe>
 80016fa:	2009      	movs	r0, #9
 80016fc:	b005      	add	sp, #20
 80016fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001702:	2300      	movs	r3, #0
 8001704:	f10d 090c 	add.w	r9, sp, #12
 8001708:	4619      	mov	r1, r3
 800170a:	0087      	lsls	r7, r0, #2
 800170c:	f8cd 9000 	str.w	r9, [sp]
 8001710:	220d      	movs	r2, #13
 8001712:	4628      	mov	r0, r5
 8001714:	f7ff fb90 	bl	8000e38 <_Unwind_VRS_Get>
 8001718:	b2ff      	uxtb	r7, r7
 800171a:	9b03      	ldr	r3, [sp, #12]
 800171c:	3704      	adds	r7, #4
 800171e:	0660      	lsls	r0, r4, #25
 8001720:	bf4c      	ite	mi
 8001722:	1bdf      	submi	r7, r3, r7
 8001724:	18ff      	addpl	r7, r7, r3
 8001726:	2300      	movs	r3, #0
 8001728:	f8cd 9000 	str.w	r9, [sp]
 800172c:	4619      	mov	r1, r3
 800172e:	220d      	movs	r2, #13
 8001730:	4628      	mov	r0, r5
 8001732:	9703      	str	r7, [sp, #12]
 8001734:	f7ff fba2 	bl	8000e7c <_Unwind_VRS_Set>
 8001738:	e7b9      	b.n	80016ae <__gnu_unwind_execute+0xe>
 800173a:	f000 030d 	and.w	r3, r0, #13
 800173e:	2b0d      	cmp	r3, #13
 8001740:	d0db      	beq.n	80016fa <__gnu_unwind_execute+0x5a>
 8001742:	2300      	movs	r3, #0
 8001744:	af03      	add	r7, sp, #12
 8001746:	f000 020f 	and.w	r2, r0, #15
 800174a:	4619      	mov	r1, r3
 800174c:	9700      	str	r7, [sp, #0]
 800174e:	4628      	mov	r0, r5
 8001750:	f7ff fb72 	bl	8000e38 <_Unwind_VRS_Get>
 8001754:	2300      	movs	r3, #0
 8001756:	9700      	str	r7, [sp, #0]
 8001758:	4619      	mov	r1, r3
 800175a:	220d      	movs	r2, #13
 800175c:	4628      	mov	r0, r5
 800175e:	f7ff fb8d 	bl	8000e7c <_Unwind_VRS_Set>
 8001762:	e7a4      	b.n	80016ae <__gnu_unwind_execute+0xe>
 8001764:	28b1      	cmp	r0, #177	; 0xb1
 8001766:	d05e      	beq.n	8001826 <__gnu_unwind_execute+0x186>
 8001768:	28b2      	cmp	r0, #178	; 0xb2
 800176a:	f000 80cb 	beq.w	8001904 <__gnu_unwind_execute+0x264>
 800176e:	28b3      	cmp	r0, #179	; 0xb3
 8001770:	d07d      	beq.n	800186e <__gnu_unwind_execute+0x1ce>
 8001772:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001776:	2bb4      	cmp	r3, #180	; 0xb4
 8001778:	d0bf      	beq.n	80016fa <__gnu_unwind_execute+0x5a>
 800177a:	2301      	movs	r3, #1
 800177c:	f000 0207 	and.w	r2, r0, #7
 8001780:	441a      	add	r2, r3
 8001782:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001786:	4619      	mov	r1, r3
 8001788:	4628      	mov	r0, r5
 800178a:	f7ff fd45 	bl	8001218 <_Unwind_VRS_Pop>
 800178e:	2800      	cmp	r0, #0
 8001790:	d08d      	beq.n	80016ae <__gnu_unwind_execute+0xe>
 8001792:	e7b2      	b.n	80016fa <__gnu_unwind_execute+0x5a>
 8001794:	4630      	mov	r0, r6
 8001796:	f7ff ff57 	bl	8001648 <next_unwind_byte>
 800179a:	0224      	lsls	r4, r4, #8
 800179c:	4304      	orrs	r4, r0
 800179e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80017a2:	d0aa      	beq.n	80016fa <__gnu_unwind_execute+0x5a>
 80017a4:	2300      	movs	r3, #0
 80017a6:	0124      	lsls	r4, r4, #4
 80017a8:	b2a2      	uxth	r2, r4
 80017aa:	4619      	mov	r1, r3
 80017ac:	4628      	mov	r0, r5
 80017ae:	f7ff fd33 	bl	8001218 <_Unwind_VRS_Pop>
 80017b2:	2800      	cmp	r0, #0
 80017b4:	d1a1      	bne.n	80016fa <__gnu_unwind_execute+0x5a>
 80017b6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80017ba:	bf18      	it	ne
 80017bc:	f04f 0801 	movne.w	r8, #1
 80017c0:	e775      	b.n	80016ae <__gnu_unwind_execute+0xe>
 80017c2:	43c3      	mvns	r3, r0
 80017c4:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	411a      	asrs	r2, r3
 80017ce:	2300      	movs	r3, #0
 80017d0:	0701      	lsls	r1, r0, #28
 80017d2:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80017d6:	bf48      	it	mi
 80017d8:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80017dc:	4619      	mov	r1, r3
 80017de:	4628      	mov	r0, r5
 80017e0:	f7ff fd1a 	bl	8001218 <_Unwind_VRS_Pop>
 80017e4:	2800      	cmp	r0, #0
 80017e6:	f43f af62 	beq.w	80016ae <__gnu_unwind_execute+0xe>
 80017ea:	e786      	b.n	80016fa <__gnu_unwind_execute+0x5a>
 80017ec:	28c6      	cmp	r0, #198	; 0xc6
 80017ee:	d051      	beq.n	8001894 <__gnu_unwind_execute+0x1f4>
 80017f0:	28c7      	cmp	r0, #199	; 0xc7
 80017f2:	d05a      	beq.n	80018aa <__gnu_unwind_execute+0x20a>
 80017f4:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80017f8:	2bc0      	cmp	r3, #192	; 0xc0
 80017fa:	d069      	beq.n	80018d0 <__gnu_unwind_execute+0x230>
 80017fc:	28c8      	cmp	r0, #200	; 0xc8
 80017fe:	d075      	beq.n	80018ec <__gnu_unwind_execute+0x24c>
 8001800:	28c9      	cmp	r0, #201	; 0xc9
 8001802:	f47f af7a 	bne.w	80016fa <__gnu_unwind_execute+0x5a>
 8001806:	4630      	mov	r0, r6
 8001808:	f7ff ff1e 	bl	8001648 <next_unwind_byte>
 800180c:	0302      	lsls	r2, r0, #12
 800180e:	f000 000f 	and.w	r0, r0, #15
 8001812:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001816:	3001      	adds	r0, #1
 8001818:	4302      	orrs	r2, r0
 800181a:	e767      	b.n	80016ec <__gnu_unwind_execute+0x4c>
 800181c:	f1b8 0f00 	cmp.w	r8, #0
 8001820:	d014      	beq.n	800184c <__gnu_unwind_execute+0x1ac>
 8001822:	2000      	movs	r0, #0
 8001824:	e76a      	b.n	80016fc <__gnu_unwind_execute+0x5c>
 8001826:	4630      	mov	r0, r6
 8001828:	f7ff ff0e 	bl	8001648 <next_unwind_byte>
 800182c:	2800      	cmp	r0, #0
 800182e:	f43f af64 	beq.w	80016fa <__gnu_unwind_execute+0x5a>
 8001832:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001836:	f47f af60 	bne.w	80016fa <__gnu_unwind_execute+0x5a>
 800183a:	4602      	mov	r2, r0
 800183c:	4619      	mov	r1, r3
 800183e:	4628      	mov	r0, r5
 8001840:	f7ff fcea 	bl	8001218 <_Unwind_VRS_Pop>
 8001844:	2800      	cmp	r0, #0
 8001846:	f43f af32 	beq.w	80016ae <__gnu_unwind_execute+0xe>
 800184a:	e756      	b.n	80016fa <__gnu_unwind_execute+0x5a>
 800184c:	ac03      	add	r4, sp, #12
 800184e:	4643      	mov	r3, r8
 8001850:	220e      	movs	r2, #14
 8001852:	4641      	mov	r1, r8
 8001854:	9400      	str	r4, [sp, #0]
 8001856:	4628      	mov	r0, r5
 8001858:	f7ff faee 	bl	8000e38 <_Unwind_VRS_Get>
 800185c:	9400      	str	r4, [sp, #0]
 800185e:	4628      	mov	r0, r5
 8001860:	4643      	mov	r3, r8
 8001862:	220f      	movs	r2, #15
 8001864:	4641      	mov	r1, r8
 8001866:	f7ff fb09 	bl	8000e7c <_Unwind_VRS_Set>
 800186a:	4640      	mov	r0, r8
 800186c:	e746      	b.n	80016fc <__gnu_unwind_execute+0x5c>
 800186e:	4630      	mov	r0, r6
 8001870:	f7ff feea 	bl	8001648 <next_unwind_byte>
 8001874:	2301      	movs	r3, #1
 8001876:	0301      	lsls	r1, r0, #12
 8001878:	f000 000f 	and.w	r0, r0, #15
 800187c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001880:	18c2      	adds	r2, r0, r3
 8001882:	430a      	orrs	r2, r1
 8001884:	4628      	mov	r0, r5
 8001886:	4619      	mov	r1, r3
 8001888:	f7ff fcc6 	bl	8001218 <_Unwind_VRS_Pop>
 800188c:	2800      	cmp	r0, #0
 800188e:	f43f af0e 	beq.w	80016ae <__gnu_unwind_execute+0xe>
 8001892:	e732      	b.n	80016fa <__gnu_unwind_execute+0x5a>
 8001894:	4630      	mov	r0, r6
 8001896:	f7ff fed7 	bl	8001648 <next_unwind_byte>
 800189a:	0301      	lsls	r1, r0, #12
 800189c:	f000 000f 	and.w	r0, r0, #15
 80018a0:	2303      	movs	r3, #3
 80018a2:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80018a6:	1c42      	adds	r2, r0, #1
 80018a8:	e7eb      	b.n	8001882 <__gnu_unwind_execute+0x1e2>
 80018aa:	4630      	mov	r0, r6
 80018ac:	f7ff fecc 	bl	8001648 <next_unwind_byte>
 80018b0:	4602      	mov	r2, r0
 80018b2:	2800      	cmp	r0, #0
 80018b4:	f43f af21 	beq.w	80016fa <__gnu_unwind_execute+0x5a>
 80018b8:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80018bc:	f47f af1d 	bne.w	80016fa <__gnu_unwind_execute+0x5a>
 80018c0:	2104      	movs	r1, #4
 80018c2:	4628      	mov	r0, r5
 80018c4:	f7ff fca8 	bl	8001218 <_Unwind_VRS_Pop>
 80018c8:	2800      	cmp	r0, #0
 80018ca:	f43f aef0 	beq.w	80016ae <__gnu_unwind_execute+0xe>
 80018ce:	e714      	b.n	80016fa <__gnu_unwind_execute+0x5a>
 80018d0:	2303      	movs	r3, #3
 80018d2:	f000 020f 	and.w	r2, r0, #15
 80018d6:	3201      	adds	r2, #1
 80018d8:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80018dc:	4619      	mov	r1, r3
 80018de:	4628      	mov	r0, r5
 80018e0:	f7ff fc9a 	bl	8001218 <_Unwind_VRS_Pop>
 80018e4:	2800      	cmp	r0, #0
 80018e6:	f43f aee2 	beq.w	80016ae <__gnu_unwind_execute+0xe>
 80018ea:	e706      	b.n	80016fa <__gnu_unwind_execute+0x5a>
 80018ec:	4630      	mov	r0, r6
 80018ee:	f7ff feab 	bl	8001648 <next_unwind_byte>
 80018f2:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80018f6:	f000 030f 	and.w	r3, r0, #15
 80018fa:	3210      	adds	r2, #16
 80018fc:	3301      	adds	r3, #1
 80018fe:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001902:	e6f3      	b.n	80016ec <__gnu_unwind_execute+0x4c>
 8001904:	2300      	movs	r3, #0
 8001906:	f10d 090c 	add.w	r9, sp, #12
 800190a:	220d      	movs	r2, #13
 800190c:	4619      	mov	r1, r3
 800190e:	f8cd 9000 	str.w	r9, [sp]
 8001912:	4628      	mov	r0, r5
 8001914:	f7ff fa90 	bl	8000e38 <_Unwind_VRS_Get>
 8001918:	4630      	mov	r0, r6
 800191a:	f7ff fe95 	bl	8001648 <next_unwind_byte>
 800191e:	0602      	lsls	r2, r0, #24
 8001920:	f04f 0702 	mov.w	r7, #2
 8001924:	d50c      	bpl.n	8001940 <__gnu_unwind_execute+0x2a0>
 8001926:	9b03      	ldr	r3, [sp, #12]
 8001928:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800192c:	40b8      	lsls	r0, r7
 800192e:	4403      	add	r3, r0
 8001930:	4630      	mov	r0, r6
 8001932:	9303      	str	r3, [sp, #12]
 8001934:	f7ff fe88 	bl	8001648 <next_unwind_byte>
 8001938:	0603      	lsls	r3, r0, #24
 800193a:	f107 0707 	add.w	r7, r7, #7
 800193e:	d4f2      	bmi.n	8001926 <__gnu_unwind_execute+0x286>
 8001940:	2300      	movs	r3, #0
 8001942:	9a03      	ldr	r2, [sp, #12]
 8001944:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8001948:	40bc      	lsls	r4, r7
 800194a:	f502 7201 	add.w	r2, r2, #516	; 0x204
 800194e:	4414      	add	r4, r2
 8001950:	f8cd 9000 	str.w	r9, [sp]
 8001954:	4619      	mov	r1, r3
 8001956:	220d      	movs	r2, #13
 8001958:	4628      	mov	r0, r5
 800195a:	9403      	str	r4, [sp, #12]
 800195c:	f7ff fa8e 	bl	8000e7c <_Unwind_VRS_Set>
 8001960:	e6a5      	b.n	80016ae <__gnu_unwind_execute+0xe>
 8001962:	bf00      	nop

08001964 <__gnu_unwind_frame>:
 8001964:	b530      	push	{r4, r5, lr}
 8001966:	2403      	movs	r4, #3
 8001968:	460d      	mov	r5, r1
 800196a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800196c:	b085      	sub	sp, #20
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	f88d 400c 	strb.w	r4, [sp, #12]
 8001974:	79dc      	ldrb	r4, [r3, #7]
 8001976:	0212      	lsls	r2, r2, #8
 8001978:	3308      	adds	r3, #8
 800197a:	a901      	add	r1, sp, #4
 800197c:	4628      	mov	r0, r5
 800197e:	9201      	str	r2, [sp, #4]
 8001980:	f88d 400d 	strb.w	r4, [sp, #13]
 8001984:	9302      	str	r3, [sp, #8]
 8001986:	f7ff fe8b 	bl	80016a0 <__gnu_unwind_execute>
 800198a:	b005      	add	sp, #20
 800198c:	bd30      	pop	{r4, r5, pc}
 800198e:	bf00      	nop

08001990 <_Unwind_GetRegionStart>:
 8001990:	b508      	push	{r3, lr}
 8001992:	f7ff fe83 	bl	800169c <unwind_UCB_from_context>
 8001996:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001998:	bd08      	pop	{r3, pc}
 800199a:	bf00      	nop

0800199c <_Unwind_GetLanguageSpecificData>:
 800199c:	b508      	push	{r3, lr}
 800199e:	f7ff fe7d 	bl	800169c <unwind_UCB_from_context>
 80019a2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80019a4:	79c3      	ldrb	r3, [r0, #7]
 80019a6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80019aa:	3008      	adds	r0, #8
 80019ac:	bd08      	pop	{r3, pc}
 80019ae:	bf00      	nop

080019b0 <_Unwind_GetDataRelBase>:
 80019b0:	b508      	push	{r3, lr}
 80019b2:	f007 ff57 	bl	8009864 <abort>
 80019b6:	bf00      	nop

080019b8 <_Unwind_GetTextRelBase>:
 80019b8:	b508      	push	{r3, lr}
 80019ba:	f7ff fff9 	bl	80019b0 <_Unwind_GetDataRelBase>
 80019be:	bf00      	nop

080019c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <HAL_Init+0x28>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <HAL_Init+0x28>)
 80019ca:	f043 0310 	orr.w	r3, r3, #16
 80019ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d0:	2003      	movs	r0, #3
 80019d2:	f000 f8d1 	bl	8001b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019d6:	2000      	movs	r0, #0
 80019d8:	f006 fcfc 	bl	80083d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019dc:	f006 fbb4 	bl	8008148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40022000 	.word	0x40022000

080019ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_IncTick+0x1c>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_IncTick+0x20>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	4a03      	ldr	r2, [pc, #12]	; (8001a0c <HAL_IncTick+0x20>)
 80019fe:	6013      	str	r3, [r2, #0]
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	20000004 	.word	0x20000004
 8001a0c:	200010cc 	.word	0x200010cc

08001a10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return uwTick;
 8001a14:	4b02      	ldr	r3, [pc, #8]	; (8001a20 <HAL_GetTick+0x10>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	200010cc 	.word	0x200010cc

08001a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a40:	4013      	ands	r3, r2
 8001a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a56:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	60d3      	str	r3, [r2, #12]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a70:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <__NVIC_GetPriorityGrouping+0x18>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	0a1b      	lsrs	r3, r3, #8
 8001a76:	f003 0307 	and.w	r3, r3, #7
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	db0b      	blt.n	8001ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	f003 021f 	and.w	r2, r3, #31
 8001aa0:	4906      	ldr	r1, [pc, #24]	; (8001abc <__NVIC_EnableIRQ+0x34>)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	095b      	lsrs	r3, r3, #5
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100

08001ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6039      	str	r1, [r7, #0]
 8001aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	db0a      	blt.n	8001aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	490c      	ldr	r1, [pc, #48]	; (8001b0c <__NVIC_SetPriority+0x4c>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	0112      	lsls	r2, r2, #4
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae8:	e00a      	b.n	8001b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4908      	ldr	r1, [pc, #32]	; (8001b10 <__NVIC_SetPriority+0x50>)
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	3b04      	subs	r3, #4
 8001af8:	0112      	lsls	r2, r2, #4
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	440b      	add	r3, r1
 8001afe:	761a      	strb	r2, [r3, #24]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000e100 	.word	0xe000e100
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	; 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f1c3 0307 	rsb	r3, r3, #7
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	bf28      	it	cs
 8001b32:	2304      	movcs	r3, #4
 8001b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	2b06      	cmp	r3, #6
 8001b3c:	d902      	bls.n	8001b44 <NVIC_EncodePriority+0x30>
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3b03      	subs	r3, #3
 8001b42:	e000      	b.n	8001b46 <NVIC_EncodePriority+0x32>
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	401a      	ands	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	43d9      	mvns	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	4313      	orrs	r3, r2
         );
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3724      	adds	r7, #36	; 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ff4f 	bl	8001a24 <__NVIC_SetPriorityGrouping>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba0:	f7ff ff64 	bl	8001a6c <__NVIC_GetPriorityGrouping>
 8001ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	6978      	ldr	r0, [r7, #20]
 8001bac:	f7ff ffb2 	bl	8001b14 <NVIC_EncodePriority>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff81 	bl	8001ac0 <__NVIC_SetPriority>
}
 8001bbe:	bf00      	nop
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff57 	bl	8001a88 <__NVIC_EnableIRQ>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e043      	b.n	8001c82 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <HAL_DMA_Init+0xa8>)
 8001c02:	4413      	add	r3, r2
 8001c04:	4a22      	ldr	r2, [pc, #136]	; (8001c90 <HAL_DMA_Init+0xac>)
 8001c06:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0a:	091b      	lsrs	r3, r3, #4
 8001c0c:	009a      	lsls	r2, r3, #2
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a1f      	ldr	r2, [pc, #124]	; (8001c94 <HAL_DMA_Init+0xb0>)
 8001c16:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c2e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	bffdfff8 	.word	0xbffdfff8
 8001c90:	cccccccd 	.word	0xcccccccd
 8001c94:	40020000 	.word	0x40020000

08001c98 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_DMA_Start_IT+0x20>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e04a      	b.n	8001d4e <HAL_DMA_Start_IT+0xb6>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d13a      	bne.n	8001d40 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2202      	movs	r2, #2
 8001cce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 f9ae 	bl	8002050 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 020e 	orr.w	r2, r2, #14
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	e00f      	b.n	8001d2e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0204 	bic.w	r2, r2, #4
 8001d1c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 020a 	orr.w	r2, r2, #10
 8001d2c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f042 0201 	orr.w	r2, r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	e005      	b.n	8001d4c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d005      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2204      	movs	r2, #4
 8001d72:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	73fb      	strb	r3, [r7, #15]
 8001d78:	e051      	b.n	8001e1e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 020e 	bic.w	r2, r2, #14
 8001d88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0201 	bic.w	r2, r2, #1
 8001d98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a22      	ldr	r2, [pc, #136]	; (8001e28 <HAL_DMA_Abort_IT+0xd0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d029      	beq.n	8001df8 <HAL_DMA_Abort_IT+0xa0>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a20      	ldr	r2, [pc, #128]	; (8001e2c <HAL_DMA_Abort_IT+0xd4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d022      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x9c>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a1f      	ldr	r2, [pc, #124]	; (8001e30 <HAL_DMA_Abort_IT+0xd8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d01a      	beq.n	8001dee <HAL_DMA_Abort_IT+0x96>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a1d      	ldr	r2, [pc, #116]	; (8001e34 <HAL_DMA_Abort_IT+0xdc>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d012      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x90>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_DMA_Abort_IT+0xe0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d00a      	beq.n	8001de2 <HAL_DMA_Abort_IT+0x8a>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a1a      	ldr	r2, [pc, #104]	; (8001e3c <HAL_DMA_Abort_IT+0xe4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d102      	bne.n	8001ddc <HAL_DMA_Abort_IT+0x84>
 8001dd6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001dda:	e00e      	b.n	8001dfa <HAL_DMA_Abort_IT+0xa2>
 8001ddc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001de0:	e00b      	b.n	8001dfa <HAL_DMA_Abort_IT+0xa2>
 8001de2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001de6:	e008      	b.n	8001dfa <HAL_DMA_Abort_IT+0xa2>
 8001de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dec:	e005      	b.n	8001dfa <HAL_DMA_Abort_IT+0xa2>
 8001dee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001df2:	e002      	b.n	8001dfa <HAL_DMA_Abort_IT+0xa2>
 8001df4:	2310      	movs	r3, #16
 8001df6:	e000      	b.n	8001dfa <HAL_DMA_Abort_IT+0xa2>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <HAL_DMA_Abort_IT+0xe8>)
 8001dfc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	4798      	blx	r3
    } 
  }
  return status;
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40020008 	.word	0x40020008
 8001e2c:	4002001c 	.word	0x4002001c
 8001e30:	40020030 	.word	0x40020030
 8001e34:	40020044 	.word	0x40020044
 8001e38:	40020058 	.word	0x40020058
 8001e3c:	4002006c 	.word	0x4002006c
 8001e40:	40020000 	.word	0x40020000

08001e44 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	2204      	movs	r2, #4
 8001e62:	409a      	lsls	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d04f      	beq.n	8001f0c <HAL_DMA_IRQHandler+0xc8>
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d04a      	beq.n	8001f0c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d107      	bne.n	8001e94 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0204 	bic.w	r2, r2, #4
 8001e92:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a66      	ldr	r2, [pc, #408]	; (8002034 <HAL_DMA_IRQHandler+0x1f0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d029      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0xae>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a65      	ldr	r2, [pc, #404]	; (8002038 <HAL_DMA_IRQHandler+0x1f4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d022      	beq.n	8001eee <HAL_DMA_IRQHandler+0xaa>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a63      	ldr	r2, [pc, #396]	; (800203c <HAL_DMA_IRQHandler+0x1f8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d01a      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0xa4>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a62      	ldr	r2, [pc, #392]	; (8002040 <HAL_DMA_IRQHandler+0x1fc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d012      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0x9e>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a60      	ldr	r2, [pc, #384]	; (8002044 <HAL_DMA_IRQHandler+0x200>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00a      	beq.n	8001edc <HAL_DMA_IRQHandler+0x98>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a5f      	ldr	r2, [pc, #380]	; (8002048 <HAL_DMA_IRQHandler+0x204>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d102      	bne.n	8001ed6 <HAL_DMA_IRQHandler+0x92>
 8001ed0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ed4:	e00e      	b.n	8001ef4 <HAL_DMA_IRQHandler+0xb0>
 8001ed6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001eda:	e00b      	b.n	8001ef4 <HAL_DMA_IRQHandler+0xb0>
 8001edc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ee0:	e008      	b.n	8001ef4 <HAL_DMA_IRQHandler+0xb0>
 8001ee2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ee6:	e005      	b.n	8001ef4 <HAL_DMA_IRQHandler+0xb0>
 8001ee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eec:	e002      	b.n	8001ef4 <HAL_DMA_IRQHandler+0xb0>
 8001eee:	2340      	movs	r3, #64	; 0x40
 8001ef0:	e000      	b.n	8001ef4 <HAL_DMA_IRQHandler+0xb0>
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	4a55      	ldr	r2, [pc, #340]	; (800204c <HAL_DMA_IRQHandler+0x208>)
 8001ef6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 8094 	beq.w	800202a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001f0a:	e08e      	b.n	800202a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	2202      	movs	r2, #2
 8001f12:	409a      	lsls	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d056      	beq.n	8001fca <HAL_DMA_IRQHandler+0x186>
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d051      	beq.n	8001fca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10b      	bne.n	8001f4c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 020a 	bic.w	r2, r2, #10
 8001f42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a38      	ldr	r2, [pc, #224]	; (8002034 <HAL_DMA_IRQHandler+0x1f0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d029      	beq.n	8001faa <HAL_DMA_IRQHandler+0x166>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a37      	ldr	r2, [pc, #220]	; (8002038 <HAL_DMA_IRQHandler+0x1f4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d022      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0x162>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a35      	ldr	r2, [pc, #212]	; (800203c <HAL_DMA_IRQHandler+0x1f8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d01a      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0x15c>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a34      	ldr	r2, [pc, #208]	; (8002040 <HAL_DMA_IRQHandler+0x1fc>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d012      	beq.n	8001f9a <HAL_DMA_IRQHandler+0x156>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a32      	ldr	r2, [pc, #200]	; (8002044 <HAL_DMA_IRQHandler+0x200>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00a      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x150>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a31      	ldr	r2, [pc, #196]	; (8002048 <HAL_DMA_IRQHandler+0x204>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d102      	bne.n	8001f8e <HAL_DMA_IRQHandler+0x14a>
 8001f88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f8c:	e00e      	b.n	8001fac <HAL_DMA_IRQHandler+0x168>
 8001f8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f92:	e00b      	b.n	8001fac <HAL_DMA_IRQHandler+0x168>
 8001f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f98:	e008      	b.n	8001fac <HAL_DMA_IRQHandler+0x168>
 8001f9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f9e:	e005      	b.n	8001fac <HAL_DMA_IRQHandler+0x168>
 8001fa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fa4:	e002      	b.n	8001fac <HAL_DMA_IRQHandler+0x168>
 8001fa6:	2320      	movs	r3, #32
 8001fa8:	e000      	b.n	8001fac <HAL_DMA_IRQHandler+0x168>
 8001faa:	2302      	movs	r3, #2
 8001fac:	4a27      	ldr	r2, [pc, #156]	; (800204c <HAL_DMA_IRQHandler+0x208>)
 8001fae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d034      	beq.n	800202a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001fc8:	e02f      	b.n	800202a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	2208      	movs	r2, #8
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d028      	beq.n	800202c <HAL_DMA_IRQHandler+0x1e8>
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d023      	beq.n	800202c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 020e 	bic.w	r2, r2, #14
 8001ff2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8002002:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	2b00      	cmp	r3, #0
 8002020:	d004      	beq.n	800202c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	4798      	blx	r3
    }
  }
  return;
 800202a:	bf00      	nop
 800202c:	bf00      	nop
}
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40020008 	.word	0x40020008
 8002038:	4002001c 	.word	0x4002001c
 800203c:	40020030 	.word	0x40020030
 8002040:	40020044 	.word	0x40020044
 8002044:	40020058 	.word	0x40020058
 8002048:	4002006c 	.word	0x4002006c
 800204c:	40020000 	.word	0x40020000

08002050 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
 800205c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002066:	2101      	movs	r1, #1
 8002068:	fa01 f202 	lsl.w	r2, r1, r2
 800206c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b10      	cmp	r3, #16
 800207c:	d108      	bne.n	8002090 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800208e:	e007      	b.n	80020a0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	60da      	str	r2, [r3, #12]
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
	...

080020ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b08b      	sub	sp, #44	; 0x2c
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020be:	e127      	b.n	8002310 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020c0:	2201      	movs	r2, #1
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	429a      	cmp	r2, r3
 80020da:	f040 8116 	bne.w	800230a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b12      	cmp	r3, #18
 80020e4:	d034      	beq.n	8002150 <HAL_GPIO_Init+0xa4>
 80020e6:	2b12      	cmp	r3, #18
 80020e8:	d80d      	bhi.n	8002106 <HAL_GPIO_Init+0x5a>
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d02b      	beq.n	8002146 <HAL_GPIO_Init+0x9a>
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d804      	bhi.n	80020fc <HAL_GPIO_Init+0x50>
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d031      	beq.n	800215a <HAL_GPIO_Init+0xae>
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d01c      	beq.n	8002134 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020fa:	e048      	b.n	800218e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d043      	beq.n	8002188 <HAL_GPIO_Init+0xdc>
 8002100:	2b11      	cmp	r3, #17
 8002102:	d01b      	beq.n	800213c <HAL_GPIO_Init+0x90>
          break;
 8002104:	e043      	b.n	800218e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002106:	4a89      	ldr	r2, [pc, #548]	; (800232c <HAL_GPIO_Init+0x280>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d026      	beq.n	800215a <HAL_GPIO_Init+0xae>
 800210c:	4a87      	ldr	r2, [pc, #540]	; (800232c <HAL_GPIO_Init+0x280>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d806      	bhi.n	8002120 <HAL_GPIO_Init+0x74>
 8002112:	4a87      	ldr	r2, [pc, #540]	; (8002330 <HAL_GPIO_Init+0x284>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d020      	beq.n	800215a <HAL_GPIO_Init+0xae>
 8002118:	4a86      	ldr	r2, [pc, #536]	; (8002334 <HAL_GPIO_Init+0x288>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d01d      	beq.n	800215a <HAL_GPIO_Init+0xae>
          break;
 800211e:	e036      	b.n	800218e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002120:	4a85      	ldr	r2, [pc, #532]	; (8002338 <HAL_GPIO_Init+0x28c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d019      	beq.n	800215a <HAL_GPIO_Init+0xae>
 8002126:	4a85      	ldr	r2, [pc, #532]	; (800233c <HAL_GPIO_Init+0x290>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d016      	beq.n	800215a <HAL_GPIO_Init+0xae>
 800212c:	4a84      	ldr	r2, [pc, #528]	; (8002340 <HAL_GPIO_Init+0x294>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d013      	beq.n	800215a <HAL_GPIO_Init+0xae>
          break;
 8002132:	e02c      	b.n	800218e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	623b      	str	r3, [r7, #32]
          break;
 800213a:	e028      	b.n	800218e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	3304      	adds	r3, #4
 8002142:	623b      	str	r3, [r7, #32]
          break;
 8002144:	e023      	b.n	800218e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	3308      	adds	r3, #8
 800214c:	623b      	str	r3, [r7, #32]
          break;
 800214e:	e01e      	b.n	800218e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	330c      	adds	r3, #12
 8002156:	623b      	str	r3, [r7, #32]
          break;
 8002158:	e019      	b.n	800218e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d102      	bne.n	8002168 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002162:	2304      	movs	r3, #4
 8002164:	623b      	str	r3, [r7, #32]
          break;
 8002166:	e012      	b.n	800218e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d105      	bne.n	800217c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002170:	2308      	movs	r3, #8
 8002172:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69fa      	ldr	r2, [r7, #28]
 8002178:	611a      	str	r2, [r3, #16]
          break;
 800217a:	e008      	b.n	800218e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800217c:	2308      	movs	r3, #8
 800217e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	615a      	str	r2, [r3, #20]
          break;
 8002186:	e002      	b.n	800218e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002188:	2300      	movs	r3, #0
 800218a:	623b      	str	r3, [r7, #32]
          break;
 800218c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	2bff      	cmp	r3, #255	; 0xff
 8002192:	d801      	bhi.n	8002198 <HAL_GPIO_Init+0xec>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	e001      	b.n	800219c <HAL_GPIO_Init+0xf0>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3304      	adds	r3, #4
 800219c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	2bff      	cmp	r3, #255	; 0xff
 80021a2:	d802      	bhi.n	80021aa <HAL_GPIO_Init+0xfe>
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	e002      	b.n	80021b0 <HAL_GPIO_Init+0x104>
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	3b08      	subs	r3, #8
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	210f      	movs	r1, #15
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	fa01 f303 	lsl.w	r3, r1, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	401a      	ands	r2, r3
 80021c2:	6a39      	ldr	r1, [r7, #32]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ca:	431a      	orrs	r2, r3
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 8096 	beq.w	800230a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021de:	4b59      	ldr	r3, [pc, #356]	; (8002344 <HAL_GPIO_Init+0x298>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	4a58      	ldr	r2, [pc, #352]	; (8002344 <HAL_GPIO_Init+0x298>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6193      	str	r3, [r2, #24]
 80021ea:	4b56      	ldr	r3, [pc, #344]	; (8002344 <HAL_GPIO_Init+0x298>)
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021f6:	4a54      	ldr	r2, [pc, #336]	; (8002348 <HAL_GPIO_Init+0x29c>)
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3302      	adds	r3, #2
 80021fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002202:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	220f      	movs	r2, #15
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4013      	ands	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a4b      	ldr	r2, [pc, #300]	; (800234c <HAL_GPIO_Init+0x2a0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d013      	beq.n	800224a <HAL_GPIO_Init+0x19e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a4a      	ldr	r2, [pc, #296]	; (8002350 <HAL_GPIO_Init+0x2a4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00d      	beq.n	8002246 <HAL_GPIO_Init+0x19a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a49      	ldr	r2, [pc, #292]	; (8002354 <HAL_GPIO_Init+0x2a8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d007      	beq.n	8002242 <HAL_GPIO_Init+0x196>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a48      	ldr	r2, [pc, #288]	; (8002358 <HAL_GPIO_Init+0x2ac>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d101      	bne.n	800223e <HAL_GPIO_Init+0x192>
 800223a:	2303      	movs	r3, #3
 800223c:	e006      	b.n	800224c <HAL_GPIO_Init+0x1a0>
 800223e:	2304      	movs	r3, #4
 8002240:	e004      	b.n	800224c <HAL_GPIO_Init+0x1a0>
 8002242:	2302      	movs	r3, #2
 8002244:	e002      	b.n	800224c <HAL_GPIO_Init+0x1a0>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <HAL_GPIO_Init+0x1a0>
 800224a:	2300      	movs	r3, #0
 800224c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224e:	f002 0203 	and.w	r2, r2, #3
 8002252:	0092      	lsls	r2, r2, #2
 8002254:	4093      	lsls	r3, r2
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800225c:	493a      	ldr	r1, [pc, #232]	; (8002348 <HAL_GPIO_Init+0x29c>)
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	089b      	lsrs	r3, r3, #2
 8002262:	3302      	adds	r3, #2
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d006      	beq.n	8002284 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002276:	4b39      	ldr	r3, [pc, #228]	; (800235c <HAL_GPIO_Init+0x2b0>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	4938      	ldr	r1, [pc, #224]	; (800235c <HAL_GPIO_Init+0x2b0>)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]
 8002282:	e006      	b.n	8002292 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002284:	4b35      	ldr	r3, [pc, #212]	; (800235c <HAL_GPIO_Init+0x2b0>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	43db      	mvns	r3, r3
 800228c:	4933      	ldr	r1, [pc, #204]	; (800235c <HAL_GPIO_Init+0x2b0>)
 800228e:	4013      	ands	r3, r2
 8002290:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d006      	beq.n	80022ac <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800229e:	4b2f      	ldr	r3, [pc, #188]	; (800235c <HAL_GPIO_Init+0x2b0>)
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	492e      	ldr	r1, [pc, #184]	; (800235c <HAL_GPIO_Init+0x2b0>)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	604b      	str	r3, [r1, #4]
 80022aa:	e006      	b.n	80022ba <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022ac:	4b2b      	ldr	r3, [pc, #172]	; (800235c <HAL_GPIO_Init+0x2b0>)
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	4929      	ldr	r1, [pc, #164]	; (800235c <HAL_GPIO_Init+0x2b0>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d006      	beq.n	80022d4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022c6:	4b25      	ldr	r3, [pc, #148]	; (800235c <HAL_GPIO_Init+0x2b0>)
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	4924      	ldr	r1, [pc, #144]	; (800235c <HAL_GPIO_Init+0x2b0>)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
 80022d2:	e006      	b.n	80022e2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022d4:	4b21      	ldr	r3, [pc, #132]	; (800235c <HAL_GPIO_Init+0x2b0>)
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	43db      	mvns	r3, r3
 80022dc:	491f      	ldr	r1, [pc, #124]	; (800235c <HAL_GPIO_Init+0x2b0>)
 80022de:	4013      	ands	r3, r2
 80022e0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d006      	beq.n	80022fc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022ee:	4b1b      	ldr	r3, [pc, #108]	; (800235c <HAL_GPIO_Init+0x2b0>)
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	491a      	ldr	r1, [pc, #104]	; (800235c <HAL_GPIO_Init+0x2b0>)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60cb      	str	r3, [r1, #12]
 80022fa:	e006      	b.n	800230a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022fc:	4b17      	ldr	r3, [pc, #92]	; (800235c <HAL_GPIO_Init+0x2b0>)
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	43db      	mvns	r3, r3
 8002304:	4915      	ldr	r1, [pc, #84]	; (800235c <HAL_GPIO_Init+0x2b0>)
 8002306:	4013      	ands	r3, r2
 8002308:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	3301      	adds	r3, #1
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	fa22 f303 	lsr.w	r3, r2, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	f47f aed0 	bne.w	80020c0 <HAL_GPIO_Init+0x14>
  }
}
 8002320:	bf00      	nop
 8002322:	372c      	adds	r7, #44	; 0x2c
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	10210000 	.word	0x10210000
 8002330:	10110000 	.word	0x10110000
 8002334:	10120000 	.word	0x10120000
 8002338:	10310000 	.word	0x10310000
 800233c:	10320000 	.word	0x10320000
 8002340:	10220000 	.word	0x10220000
 8002344:	40021000 	.word	0x40021000
 8002348:	40010000 	.word	0x40010000
 800234c:	40010800 	.word	0x40010800
 8002350:	40010c00 	.word	0x40010c00
 8002354:	40011000 	.word	0x40011000
 8002358:	40011400 	.word	0x40011400
 800235c:	40010400 	.word	0x40010400

08002360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e26c      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 8087 	beq.w	800248e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002380:	4b92      	ldr	r3, [pc, #584]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b04      	cmp	r3, #4
 800238a:	d00c      	beq.n	80023a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800238c:	4b8f      	ldr	r3, [pc, #572]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 030c 	and.w	r3, r3, #12
 8002394:	2b08      	cmp	r3, #8
 8002396:	d112      	bne.n	80023be <HAL_RCC_OscConfig+0x5e>
 8002398:	4b8c      	ldr	r3, [pc, #560]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a4:	d10b      	bne.n	80023be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a6:	4b89      	ldr	r3, [pc, #548]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d06c      	beq.n	800248c <HAL_RCC_OscConfig+0x12c>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d168      	bne.n	800248c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e246      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c6:	d106      	bne.n	80023d6 <HAL_RCC_OscConfig+0x76>
 80023c8:	4b80      	ldr	r3, [pc, #512]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a7f      	ldr	r2, [pc, #508]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80023ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	e02e      	b.n	8002434 <HAL_RCC_OscConfig+0xd4>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x98>
 80023de:	4b7b      	ldr	r3, [pc, #492]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a7a      	ldr	r2, [pc, #488]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80023e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	4b78      	ldr	r3, [pc, #480]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a77      	ldr	r2, [pc, #476]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80023f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	e01d      	b.n	8002434 <HAL_RCC_OscConfig+0xd4>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002400:	d10c      	bne.n	800241c <HAL_RCC_OscConfig+0xbc>
 8002402:	4b72      	ldr	r3, [pc, #456]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a71      	ldr	r2, [pc, #452]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	4b6f      	ldr	r3, [pc, #444]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a6e      	ldr	r2, [pc, #440]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	e00b      	b.n	8002434 <HAL_RCC_OscConfig+0xd4>
 800241c:	4b6b      	ldr	r3, [pc, #428]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a6a      	ldr	r2, [pc, #424]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	4b68      	ldr	r3, [pc, #416]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a67      	ldr	r2, [pc, #412]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 800242e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002432:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d013      	beq.n	8002464 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7ff fae8 	bl	8001a10 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002444:	f7ff fae4 	bl	8001a10 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b64      	cmp	r3, #100	; 0x64
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e1fa      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002456:	4b5d      	ldr	r3, [pc, #372]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0xe4>
 8002462:	e014      	b.n	800248e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7ff fad4 	bl	8001a10 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800246c:	f7ff fad0 	bl	8001a10 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b64      	cmp	r3, #100	; 0x64
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e1e6      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247e:	4b53      	ldr	r3, [pc, #332]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x10c>
 800248a:	e000      	b.n	800248e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d063      	beq.n	8002562 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800249a:	4b4c      	ldr	r3, [pc, #304]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00b      	beq.n	80024be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024a6:	4b49      	ldr	r3, [pc, #292]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d11c      	bne.n	80024ec <HAL_RCC_OscConfig+0x18c>
 80024b2:	4b46      	ldr	r3, [pc, #280]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d116      	bne.n	80024ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024be:	4b43      	ldr	r3, [pc, #268]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d005      	beq.n	80024d6 <HAL_RCC_OscConfig+0x176>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d001      	beq.n	80024d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e1ba      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d6:	4b3d      	ldr	r3, [pc, #244]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4939      	ldr	r1, [pc, #228]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ea:	e03a      	b.n	8002562 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d020      	beq.n	8002536 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f4:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fa:	f7ff fa89 	bl	8001a10 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002502:	f7ff fa85 	bl	8001a10 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e19b      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002514:	4b2d      	ldr	r3, [pc, #180]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002520:	4b2a      	ldr	r3, [pc, #168]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4927      	ldr	r1, [pc, #156]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002530:	4313      	orrs	r3, r2
 8002532:	600b      	str	r3, [r1, #0]
 8002534:	e015      	b.n	8002562 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002536:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7ff fa68 	bl	8001a10 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002544:	f7ff fa64 	bl	8001a10 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e17a      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002556:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d03a      	beq.n	80025e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d019      	beq.n	80025aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002576:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <HAL_RCC_OscConfig+0x274>)
 8002578:	2201      	movs	r2, #1
 800257a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257c:	f7ff fa48 	bl	8001a10 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002584:	f7ff fa44 	bl	8001a10 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e15a      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002596:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f0      	beq.n	8002584 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025a2:	2001      	movs	r0, #1
 80025a4:	f000 fb0a 	bl	8002bbc <RCC_Delay>
 80025a8:	e01c      	b.n	80025e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_RCC_OscConfig+0x274>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b0:	f7ff fa2e 	bl	8001a10 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b6:	e00f      	b.n	80025d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b8:	f7ff fa2a 	bl	8001a10 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d908      	bls.n	80025d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e140      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
 80025ca:	bf00      	nop
 80025cc:	40021000 	.word	0x40021000
 80025d0:	42420000 	.word	0x42420000
 80025d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d8:	4b9e      	ldr	r3, [pc, #632]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1e9      	bne.n	80025b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 80a6 	beq.w	800273e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f6:	4b97      	ldr	r3, [pc, #604]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10d      	bne.n	800261e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	4b94      	ldr	r3, [pc, #592]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	4a93      	ldr	r2, [pc, #588]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 8002608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260c:	61d3      	str	r3, [r2, #28]
 800260e:	4b91      	ldr	r3, [pc, #580]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800261a:	2301      	movs	r3, #1
 800261c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261e:	4b8e      	ldr	r3, [pc, #568]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002626:	2b00      	cmp	r3, #0
 8002628:	d118      	bne.n	800265c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800262a:	4b8b      	ldr	r3, [pc, #556]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a8a      	ldr	r2, [pc, #552]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 8002630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002636:	f7ff f9eb 	bl	8001a10 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263e:	f7ff f9e7 	bl	8001a10 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b64      	cmp	r3, #100	; 0x64
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e0fd      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002650:	4b81      	ldr	r3, [pc, #516]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d106      	bne.n	8002672 <HAL_RCC_OscConfig+0x312>
 8002664:	4b7b      	ldr	r3, [pc, #492]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	4a7a      	ldr	r2, [pc, #488]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6213      	str	r3, [r2, #32]
 8002670:	e02d      	b.n	80026ce <HAL_RCC_OscConfig+0x36e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10c      	bne.n	8002694 <HAL_RCC_OscConfig+0x334>
 800267a:	4b76      	ldr	r3, [pc, #472]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	4a75      	ldr	r2, [pc, #468]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 8002680:	f023 0301 	bic.w	r3, r3, #1
 8002684:	6213      	str	r3, [r2, #32]
 8002686:	4b73      	ldr	r3, [pc, #460]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	4a72      	ldr	r2, [pc, #456]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 800268c:	f023 0304 	bic.w	r3, r3, #4
 8002690:	6213      	str	r3, [r2, #32]
 8002692:	e01c      	b.n	80026ce <HAL_RCC_OscConfig+0x36e>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	2b05      	cmp	r3, #5
 800269a:	d10c      	bne.n	80026b6 <HAL_RCC_OscConfig+0x356>
 800269c:	4b6d      	ldr	r3, [pc, #436]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	4a6c      	ldr	r2, [pc, #432]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80026a2:	f043 0304 	orr.w	r3, r3, #4
 80026a6:	6213      	str	r3, [r2, #32]
 80026a8:	4b6a      	ldr	r3, [pc, #424]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	4a69      	ldr	r2, [pc, #420]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	6213      	str	r3, [r2, #32]
 80026b4:	e00b      	b.n	80026ce <HAL_RCC_OscConfig+0x36e>
 80026b6:	4b67      	ldr	r3, [pc, #412]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	4a66      	ldr	r2, [pc, #408]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	6213      	str	r3, [r2, #32]
 80026c2:	4b64      	ldr	r3, [pc, #400]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	4a63      	ldr	r2, [pc, #396]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80026c8:	f023 0304 	bic.w	r3, r3, #4
 80026cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d015      	beq.n	8002702 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d6:	f7ff f99b 	bl	8001a10 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026dc:	e00a      	b.n	80026f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026de:	f7ff f997 	bl	8001a10 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e0ab      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f4:	4b57      	ldr	r3, [pc, #348]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0ee      	beq.n	80026de <HAL_RCC_OscConfig+0x37e>
 8002700:	e014      	b.n	800272c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002702:	f7ff f985 	bl	8001a10 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002708:	e00a      	b.n	8002720 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270a:	f7ff f981 	bl	8001a10 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f241 3288 	movw	r2, #5000	; 0x1388
 8002718:	4293      	cmp	r3, r2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e095      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002720:	4b4c      	ldr	r3, [pc, #304]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1ee      	bne.n	800270a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800272c:	7dfb      	ldrb	r3, [r7, #23]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d105      	bne.n	800273e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002732:	4b48      	ldr	r3, [pc, #288]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	4a47      	ldr	r2, [pc, #284]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800273c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 8081 	beq.w	800284a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002748:	4b42      	ldr	r3, [pc, #264]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 030c 	and.w	r3, r3, #12
 8002750:	2b08      	cmp	r3, #8
 8002752:	d061      	beq.n	8002818 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	2b02      	cmp	r3, #2
 800275a:	d146      	bne.n	80027ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275c:	4b3f      	ldr	r3, [pc, #252]	; (800285c <HAL_RCC_OscConfig+0x4fc>)
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7ff f955 	bl	8001a10 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276a:	f7ff f951 	bl	8001a10 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e067      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800277c:	4b35      	ldr	r3, [pc, #212]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f0      	bne.n	800276a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002790:	d108      	bne.n	80027a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002792:	4b30      	ldr	r3, [pc, #192]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	492d      	ldr	r1, [pc, #180]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027a4:	4b2b      	ldr	r3, [pc, #172]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a19      	ldr	r1, [r3, #32]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	430b      	orrs	r3, r1
 80027b6:	4927      	ldr	r1, [pc, #156]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027bc:	4b27      	ldr	r3, [pc, #156]	; (800285c <HAL_RCC_OscConfig+0x4fc>)
 80027be:	2201      	movs	r2, #1
 80027c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c2:	f7ff f925 	bl	8001a10 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ca:	f7ff f921 	bl	8001a10 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e037      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027dc:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCC_OscConfig+0x46a>
 80027e8:	e02f      	b.n	800284a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ea:	4b1c      	ldr	r3, [pc, #112]	; (800285c <HAL_RCC_OscConfig+0x4fc>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f0:	f7ff f90e 	bl	8001a10 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f8:	f7ff f90a 	bl	8001a10 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e020      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800280a:	4b12      	ldr	r3, [pc, #72]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f0      	bne.n	80027f8 <HAL_RCC_OscConfig+0x498>
 8002816:	e018      	b.n	800284a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e013      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	429a      	cmp	r2, r3
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002842:	429a      	cmp	r2, r3
 8002844:	d001      	beq.n	800284a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000
 8002858:	40007000 	.word	0x40007000
 800285c:	42420060 	.word	0x42420060

08002860 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0d0      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002874:	4b6a      	ldr	r3, [pc, #424]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d910      	bls.n	80028a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002882:	4b67      	ldr	r3, [pc, #412]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 0207 	bic.w	r2, r3, #7
 800288a:	4965      	ldr	r1, [pc, #404]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	4313      	orrs	r3, r2
 8002890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002892:	4b63      	ldr	r3, [pc, #396]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0b8      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d020      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028bc:	4b59      	ldr	r3, [pc, #356]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4a58      	ldr	r2, [pc, #352]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d4:	4b53      	ldr	r3, [pc, #332]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4a52      	ldr	r2, [pc, #328]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e0:	4b50      	ldr	r3, [pc, #320]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	494d      	ldr	r1, [pc, #308]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d040      	beq.n	8002980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d107      	bne.n	8002916 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d115      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e07f      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d107      	bne.n	800292e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291e:	4b41      	ldr	r3, [pc, #260]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e073      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292e:	4b3d      	ldr	r3, [pc, #244]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e06b      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800293e:	4b39      	ldr	r3, [pc, #228]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f023 0203 	bic.w	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	4936      	ldr	r1, [pc, #216]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	4313      	orrs	r3, r2
 800294e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002950:	f7ff f85e 	bl	8001a10 <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002956:	e00a      	b.n	800296e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002958:	f7ff f85a 	bl	8001a10 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	; 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e053      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296e:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 020c 	and.w	r2, r3, #12
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	429a      	cmp	r2, r3
 800297e:	d1eb      	bne.n	8002958 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002980:	4b27      	ldr	r3, [pc, #156]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d210      	bcs.n	80029b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298e:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 0207 	bic.w	r2, r3, #7
 8002996:	4922      	ldr	r1, [pc, #136]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e032      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d008      	beq.n	80029ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029bc:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4916      	ldr	r1, [pc, #88]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d009      	beq.n	80029ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029da:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	490e      	ldr	r1, [pc, #56]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ee:	f000 f821 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 80029f2:	4601      	mov	r1, r0
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 8002a00:	5cd3      	ldrb	r3, [r2, r3]
 8002a02:	fa21 f303 	lsr.w	r3, r1, r3
 8002a06:	4a09      	ldr	r2, [pc, #36]	; (8002a2c <HAL_RCC_ClockConfig+0x1cc>)
 8002a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_RCC_ClockConfig+0x1d0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f005 fce0 	bl	80083d4 <HAL_InitTick>

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40022000 	.word	0x40022000
 8002a24:	40021000 	.word	0x40021000
 8002a28:	0800b5f8 	.word	0x0800b5f8
 8002a2c:	2000000c 	.word	0x2000000c
 8002a30:	20000000 	.word	0x20000000

08002a34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a34:	b490      	push	{r4, r7}
 8002a36:	b08a      	sub	sp, #40	; 0x28
 8002a38:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a3a:	4b2a      	ldr	r3, [pc, #168]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a3c:	1d3c      	adds	r4, r7, #4
 8002a3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a44:	4b28      	ldr	r3, [pc, #160]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	2300      	movs	r3, #0
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a5e:	4b23      	ldr	r3, [pc, #140]	; (8002aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d002      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0x40>
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d003      	beq.n	8002a7a <HAL_RCC_GetSysClockFreq+0x46>
 8002a72:	e02d      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a76:	623b      	str	r3, [r7, #32]
      break;
 8002a78:	e02d      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	0c9b      	lsrs	r3, r3, #18
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a86:	4413      	add	r3, r2
 8002a88:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a8c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d013      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a98:	4b14      	ldr	r3, [pc, #80]	; (8002aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	0c5b      	lsrs	r3, r3, #17
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002aac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	4a0f      	ldr	r2, [pc, #60]	; (8002af0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ab2:	fb02 f203 	mul.w	r2, r2, r3
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
 8002abe:	e004      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	4a0c      	ldr	r2, [pc, #48]	; (8002af4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ac4:	fb02 f303 	mul.w	r3, r2, r3
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	623b      	str	r3, [r7, #32]
      break;
 8002ace:	e002      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ad0:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ad2:	623b      	str	r3, [r7, #32]
      break;
 8002ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3728      	adds	r7, #40	; 0x28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc90      	pop	{r4, r7}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	0800b4b8 	.word	0x0800b4b8
 8002ae8:	0800b4c8 	.word	0x0800b4c8
 8002aec:	40021000 	.word	0x40021000
 8002af0:	007a1200 	.word	0x007a1200
 8002af4:	003d0900 	.word	0x003d0900

08002af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002afc:	4b02      	ldr	r3, [pc, #8]	; (8002b08 <HAL_RCC_GetHCLKFreq+0x10>)
 8002afe:	681b      	ldr	r3, [r3, #0]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr
 8002b08:	2000000c 	.word	0x2000000c

08002b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b10:	f7ff fff2 	bl	8002af8 <HAL_RCC_GetHCLKFreq>
 8002b14:	4601      	mov	r1, r0
 8002b16:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	0a1b      	lsrs	r3, r3, #8
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	4a03      	ldr	r2, [pc, #12]	; (8002b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b22:	5cd3      	ldrb	r3, [r2, r3]
 8002b24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	0800b608 	.word	0x0800b608

08002b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b38:	f7ff ffde 	bl	8002af8 <HAL_RCC_GetHCLKFreq>
 8002b3c:	4601      	mov	r1, r0
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	0adb      	lsrs	r3, r3, #11
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	4a03      	ldr	r2, [pc, #12]	; (8002b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b4a:	5cd3      	ldrb	r3, [r2, r3]
 8002b4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40021000 	.word	0x40021000
 8002b58:	0800b608 	.word	0x0800b608

08002b5c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	220f      	movs	r2, #15
 8002b6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b6c:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <HAL_RCC_GetClockConfig+0x58>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 0203 	and.w	r2, r3, #3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b78:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <HAL_RCC_GetClockConfig+0x58>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCC_GetClockConfig+0x58>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <HAL_RCC_GetClockConfig+0x58>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	08db      	lsrs	r3, r3, #3
 8002b96:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0207 	and.w	r2, r3, #7
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40022000 	.word	0x40022000

08002bbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bc4:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <RCC_Delay+0x34>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a0a      	ldr	r2, [pc, #40]	; (8002bf4 <RCC_Delay+0x38>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	0a5b      	lsrs	r3, r3, #9
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	fb02 f303 	mul.w	r3, r2, r3
 8002bd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bd8:	bf00      	nop
  }
  while (Delay --);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1e5a      	subs	r2, r3, #1
 8002bde:	60fa      	str	r2, [r7, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1f9      	bne.n	8002bd8 <RCC_Delay+0x1c>
}
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	2000000c 	.word	0x2000000c
 8002bf4:	10624dd3 	.word	0x10624dd3

08002bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e01d      	b.n	8002c46 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f005 faca 	bl	80081b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3304      	adds	r3, #4
 8002c34:	4619      	mov	r1, r3
 8002c36:	4610      	mov	r0, r2
 8002c38:	f000 fa10 	bl	800305c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b085      	sub	sp, #20
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0201 	orr.w	r2, r2, #1
 8002c64:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b06      	cmp	r3, #6
 8002c76:	d007      	beq.n	8002c88 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d122      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d11b      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0202 	mvn.w	r2, #2
 8002cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f9a4 	bl	8003024 <HAL_TIM_IC_CaptureCallback>
 8002cdc:	e005      	b.n	8002cea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f997 	bl	8003012 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f9a6 	bl	8003036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d122      	bne.n	8002d44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d11b      	bne.n	8002d44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0204 	mvn.w	r2, #4
 8002d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f97a 	bl	8003024 <HAL_TIM_IC_CaptureCallback>
 8002d30:	e005      	b.n	8002d3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f96d 	bl	8003012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f97c 	bl	8003036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d122      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d11b      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f06f 0208 	mvn.w	r2, #8
 8002d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f950 	bl	8003024 <HAL_TIM_IC_CaptureCallback>
 8002d84:	e005      	b.n	8002d92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f943 	bl	8003012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f952 	bl	8003036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b10      	cmp	r3, #16
 8002da4:	d122      	bne.n	8002dec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b10      	cmp	r3, #16
 8002db2:	d11b      	bne.n	8002dec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0210 	mvn.w	r2, #16
 8002dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f926 	bl	8003024 <HAL_TIM_IC_CaptureCallback>
 8002dd8:	e005      	b.n	8002de6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f919 	bl	8003012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f928 	bl	8003036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d10e      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d107      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0201 	mvn.w	r2, #1
 8002e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f004 ffcc 	bl	8007db0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e22:	2b80      	cmp	r3, #128	; 0x80
 8002e24:	d10e      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e30:	2b80      	cmp	r3, #128	; 0x80
 8002e32:	d107      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fa51 	bl	80032e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4e:	2b40      	cmp	r3, #64	; 0x40
 8002e50:	d10e      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5c:	2b40      	cmp	r3, #64	; 0x40
 8002e5e:	d107      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f8ec 	bl	8003048 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	d10e      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d107      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0220 	mvn.w	r2, #32
 8002e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fa1c 	bl	80032d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_TIM_ConfigClockSource+0x18>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e0a6      	b.n	800300a <HAL_TIM_ConfigClockSource+0x166>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002eda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ee2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b40      	cmp	r3, #64	; 0x40
 8002ef2:	d067      	beq.n	8002fc4 <HAL_TIM_ConfigClockSource+0x120>
 8002ef4:	2b40      	cmp	r3, #64	; 0x40
 8002ef6:	d80b      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x6c>
 8002ef8:	2b10      	cmp	r3, #16
 8002efa:	d073      	beq.n	8002fe4 <HAL_TIM_ConfigClockSource+0x140>
 8002efc:	2b10      	cmp	r3, #16
 8002efe:	d802      	bhi.n	8002f06 <HAL_TIM_ConfigClockSource+0x62>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d06f      	beq.n	8002fe4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002f04:	e078      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d06c      	beq.n	8002fe4 <HAL_TIM_ConfigClockSource+0x140>
 8002f0a:	2b30      	cmp	r3, #48	; 0x30
 8002f0c:	d06a      	beq.n	8002fe4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002f0e:	e073      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f10:	2b70      	cmp	r3, #112	; 0x70
 8002f12:	d00d      	beq.n	8002f30 <HAL_TIM_ConfigClockSource+0x8c>
 8002f14:	2b70      	cmp	r3, #112	; 0x70
 8002f16:	d804      	bhi.n	8002f22 <HAL_TIM_ConfigClockSource+0x7e>
 8002f18:	2b50      	cmp	r3, #80	; 0x50
 8002f1a:	d033      	beq.n	8002f84 <HAL_TIM_ConfigClockSource+0xe0>
 8002f1c:	2b60      	cmp	r3, #96	; 0x60
 8002f1e:	d041      	beq.n	8002fa4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002f20:	e06a      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f26:	d066      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0x152>
 8002f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f2c:	d017      	beq.n	8002f5e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002f2e:	e063      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	6899      	ldr	r1, [r3, #8]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f000 f965 	bl	800320e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f52:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	609a      	str	r2, [r3, #8]
      break;
 8002f5c:	e04c      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6818      	ldr	r0, [r3, #0]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	6899      	ldr	r1, [r3, #8]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f000 f94e 	bl	800320e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f80:	609a      	str	r2, [r3, #8]
      break;
 8002f82:	e039      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	461a      	mov	r2, r3
 8002f92:	f000 f8c5 	bl	8003120 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2150      	movs	r1, #80	; 0x50
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 f91c 	bl	80031da <TIM_ITRx_SetConfig>
      break;
 8002fa2:	e029      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6859      	ldr	r1, [r3, #4]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	f000 f8e3 	bl	800317c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2160      	movs	r1, #96	; 0x60
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 f90c 	bl	80031da <TIM_ITRx_SetConfig>
      break;
 8002fc2:	e019      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6818      	ldr	r0, [r3, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	6859      	ldr	r1, [r3, #4]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	f000 f8a5 	bl	8003120 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2140      	movs	r1, #64	; 0x40
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 f8fc 	bl	80031da <TIM_ITRx_SetConfig>
      break;
 8002fe2:	e009      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4619      	mov	r1, r3
 8002fee:	4610      	mov	r0, r2
 8002ff0:	f000 f8f3 	bl	80031da <TIM_ITRx_SetConfig>
      break;
 8002ff4:	e000      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002ff6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr

08003036 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
	...

0800305c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a29      	ldr	r2, [pc, #164]	; (8003114 <TIM_Base_SetConfig+0xb8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00b      	beq.n	800308c <TIM_Base_SetConfig+0x30>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307a:	d007      	beq.n	800308c <TIM_Base_SetConfig+0x30>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a26      	ldr	r2, [pc, #152]	; (8003118 <TIM_Base_SetConfig+0xbc>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d003      	beq.n	800308c <TIM_Base_SetConfig+0x30>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a25      	ldr	r2, [pc, #148]	; (800311c <TIM_Base_SetConfig+0xc0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d108      	bne.n	800309e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4313      	orrs	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a1c      	ldr	r2, [pc, #112]	; (8003114 <TIM_Base_SetConfig+0xb8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d00b      	beq.n	80030be <TIM_Base_SetConfig+0x62>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ac:	d007      	beq.n	80030be <TIM_Base_SetConfig+0x62>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a19      	ldr	r2, [pc, #100]	; (8003118 <TIM_Base_SetConfig+0xbc>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d003      	beq.n	80030be <TIM_Base_SetConfig+0x62>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a18      	ldr	r2, [pc, #96]	; (800311c <TIM_Base_SetConfig+0xc0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d108      	bne.n	80030d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	4313      	orrs	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a07      	ldr	r2, [pc, #28]	; (8003114 <TIM_Base_SetConfig+0xb8>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d103      	bne.n	8003104 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	615a      	str	r2, [r3, #20]
}
 800310a:	bf00      	nop
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr
 8003114:	40012c00 	.word	0x40012c00
 8003118:	40000400 	.word	0x40000400
 800311c:	40000800 	.word	0x40000800

08003120 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	f023 0201 	bic.w	r2, r3, #1
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800314a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f023 030a 	bic.w	r3, r3, #10
 800315c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4313      	orrs	r3, r2
 8003164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	621a      	str	r2, [r3, #32]
}
 8003172:	bf00      	nop
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr

0800317c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	f023 0210 	bic.w	r2, r3, #16
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	031b      	lsls	r3, r3, #12
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	621a      	str	r2, [r3, #32]
}
 80031d0:	bf00      	nop
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr

080031da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031da:	b480      	push	{r7}
 80031dc:	b085      	sub	sp, #20
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f043 0307 	orr.w	r3, r3, #7
 80031fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	609a      	str	r2, [r3, #8]
}
 8003204:	bf00      	nop
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr

0800320e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800320e:	b480      	push	{r7}
 8003210:	b087      	sub	sp, #28
 8003212:	af00      	add	r7, sp, #0
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	607a      	str	r2, [r7, #4]
 800321a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003228:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	021a      	lsls	r2, r3, #8
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	431a      	orrs	r2, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	4313      	orrs	r3, r2
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	4313      	orrs	r3, r2
 800323a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	609a      	str	r2, [r3, #8]
}
 8003242:	bf00      	nop
 8003244:	371c      	adds	r7, #28
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr

0800324c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003260:	2302      	movs	r3, #2
 8003262:	e032      	b.n	80032ca <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800329c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr

080032e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr

080032f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e03f      	b.n	800338a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f004 ff70 	bl	8008204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2224      	movs	r2, #36	; 0x24
 8003328:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800333a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 fe43 	bl	8003fc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003350:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695a      	ldr	r2, [r3, #20]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003360:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003370:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b088      	sub	sp, #32
 8003396:	af02      	add	r7, sp, #8
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	4613      	mov	r3, r2
 80033a0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b20      	cmp	r3, #32
 80033b0:	f040 8083 	bne.w	80034ba <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <HAL_UART_Transmit+0x2e>
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e07b      	b.n	80034bc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_UART_Transmit+0x40>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e074      	b.n	80034bc <HAL_UART_Transmit+0x12a>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2221      	movs	r2, #33	; 0x21
 80033e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80033e8:	f7fe fb12 	bl	8001a10 <HAL_GetTick>
 80033ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	88fa      	ldrh	r2, [r7, #6]
 80033f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	88fa      	ldrh	r2, [r7, #6]
 80033f8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033fa:	e042      	b.n	8003482 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003412:	d122      	bne.n	800345a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	2200      	movs	r2, #0
 800341c:	2180      	movs	r1, #128	; 0x80
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 fc54 	bl	8003ccc <UART_WaitOnFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e046      	b.n	80034bc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003440:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d103      	bne.n	8003452 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	3302      	adds	r3, #2
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	e017      	b.n	8003482 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	3301      	adds	r3, #1
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	e013      	b.n	8003482 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2200      	movs	r2, #0
 8003462:	2180      	movs	r1, #128	; 0x80
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 fc31 	bl	8003ccc <UART_WaitOnFlagUntilTimeout>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e023      	b.n	80034bc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	60ba      	str	r2, [r7, #8]
 800347a:	781a      	ldrb	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003486:	b29b      	uxth	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1b7      	bne.n	80033fc <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2200      	movs	r2, #0
 8003494:	2140      	movs	r1, #64	; 0x40
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 fc18 	bl	8003ccc <UART_WaitOnFlagUntilTimeout>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e00a      	b.n	80034bc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	e000      	b.n	80034bc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80034ba:	2302      	movs	r3, #2
  }
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b088      	sub	sp, #32
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	4613      	mov	r3, r2
 80034d2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	f040 8090 	bne.w	8003606 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <HAL_UART_Receive+0x2e>
 80034ec:	88fb      	ldrh	r3, [r7, #6]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e088      	b.n	8003608 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_UART_Receive+0x40>
 8003500:	2302      	movs	r3, #2
 8003502:	e081      	b.n	8003608 <HAL_UART_Receive+0x144>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2222      	movs	r2, #34	; 0x22
 8003516:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800351a:	f7fe fa79 	bl	8001a10 <HAL_GetTick>
 800351e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	88fa      	ldrh	r2, [r7, #6]
 8003524:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	88fa      	ldrh	r2, [r7, #6]
 800352a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800352c:	e05c      	b.n	80035e8 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003544:	d12b      	bne.n	800359e <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2200      	movs	r2, #0
 800354e:	2120      	movs	r1, #32
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 fbbb 	bl	8003ccc <UART_WaitOnFlagUntilTimeout>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e053      	b.n	8003608 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10c      	bne.n	8003586 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	b29b      	uxth	r3, r3
 8003574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003578:	b29a      	uxth	r2, r3
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	3302      	adds	r3, #2
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	e030      	b.n	80035e8 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	b29b      	uxth	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	b29a      	uxth	r2, r3
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	3301      	adds	r3, #1
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	e024      	b.n	80035e8 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2200      	movs	r2, #0
 80035a6:	2120      	movs	r1, #32
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 fb8f 	bl	8003ccc <UART_WaitOnFlagUntilTimeout>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e027      	b.n	8003608 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d108      	bne.n	80035d2 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6859      	ldr	r1, [r3, #4]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	60ba      	str	r2, [r7, #8]
 80035cc:	b2ca      	uxtb	r2, r1
 80035ce:	701a      	strb	r2, [r3, #0]
 80035d0:	e00a      	b.n	80035e8 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	1c59      	adds	r1, r3, #1
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d19d      	bne.n	800352e <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003602:	2300      	movs	r3, #0
 8003604:	e000      	b.n	8003608 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003606:	2302      	movs	r3, #2
  }
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	4613      	mov	r3, r2
 800361c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b20      	cmp	r3, #32
 8003628:	d130      	bne.n	800368c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <HAL_UART_Transmit_IT+0x26>
 8003630:	88fb      	ldrh	r3, [r7, #6]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e029      	b.n	800368e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_UART_Transmit_IT+0x38>
 8003644:	2302      	movs	r3, #2
 8003646:	e022      	b.n	800368e <HAL_UART_Transmit_IT+0x7e>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	88fa      	ldrh	r2, [r7, #6]
 800365a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	88fa      	ldrh	r2, [r7, #6]
 8003660:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2221      	movs	r2, #33	; 0x21
 800366c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003686:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	e000      	b.n	800368e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800368c:	2302      	movs	r3, #2
  }
}
 800368e:	4618      	mov	r0, r3
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr

08003698 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	4613      	mov	r3, r2
 80036a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b20      	cmp	r3, #32
 80036b0:	d140      	bne.n	8003734 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <HAL_UART_Receive_IT+0x26>
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e039      	b.n	8003736 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_UART_Receive_IT+0x38>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e032      	b.n	8003736 <HAL_UART_Receive_IT+0x9e>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	88fa      	ldrh	r2, [r7, #6]
 80036e2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	88fa      	ldrh	r2, [r7, #6]
 80036e8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2222      	movs	r2, #34	; 0x22
 80036f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800370e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0220 	orr.w	r2, r2, #32
 800372e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	e000      	b.n	8003736 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003734:	2302      	movs	r3, #2
  }
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	4613      	mov	r3, r2
 800374c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b20      	cmp	r3, #32
 8003758:	d153      	bne.n	8003802 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <HAL_UART_Transmit_DMA+0x26>
 8003760:	88fb      	ldrh	r3, [r7, #6]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e04c      	b.n	8003804 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_UART_Transmit_DMA+0x38>
 8003774:	2302      	movs	r3, #2
 8003776:	e045      	b.n	8003804 <HAL_UART_Transmit_DMA+0xc4>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	88fa      	ldrh	r2, [r7, #6]
 800378a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	88fa      	ldrh	r2, [r7, #6]
 8003790:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2221      	movs	r2, #33	; 0x21
 800379c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a4:	4a19      	ldr	r2, [pc, #100]	; (800380c <HAL_UART_Transmit_DMA+0xcc>)
 80037a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	4a18      	ldr	r2, [pc, #96]	; (8003810 <HAL_UART_Transmit_DMA+0xd0>)
 80037ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	4a17      	ldr	r2, [pc, #92]	; (8003814 <HAL_UART_Transmit_DMA+0xd4>)
 80037b6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	2200      	movs	r2, #0
 80037be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80037c0:	f107 0308 	add.w	r3, r7, #8
 80037c4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	6819      	ldr	r1, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3304      	adds	r3, #4
 80037d4:	461a      	mov	r2, r3
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	f7fe fa5e 	bl	8001c98 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037e4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695a      	ldr	r2, [r3, #20]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037fc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	e000      	b.n	8003804 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003802:	2302      	movs	r3, #2
  }
}
 8003804:	4618      	mov	r0, r3
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	08003b47 	.word	0x08003b47
 8003810:	08003b99 	.word	0x08003b99
 8003814:	08003c39 	.word	0x08003c39

08003818 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	4613      	mov	r3, r2
 8003824:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b20      	cmp	r3, #32
 8003830:	d166      	bne.n	8003900 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <HAL_UART_Receive_DMA+0x26>
 8003838:	88fb      	ldrh	r3, [r7, #6]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e05f      	b.n	8003902 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_UART_Receive_DMA+0x38>
 800384c:	2302      	movs	r3, #2
 800384e:	e058      	b.n	8003902 <HAL_UART_Receive_DMA+0xea>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	88fa      	ldrh	r2, [r7, #6]
 8003862:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2222      	movs	r2, #34	; 0x22
 800386e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003876:	4a25      	ldr	r2, [pc, #148]	; (800390c <HAL_UART_Receive_DMA+0xf4>)
 8003878:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387e:	4a24      	ldr	r2, [pc, #144]	; (8003910 <HAL_UART_Receive_DMA+0xf8>)
 8003880:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003886:	4a23      	ldr	r2, [pc, #140]	; (8003914 <HAL_UART_Receive_DMA+0xfc>)
 8003888:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388e:	2200      	movs	r2, #0
 8003890:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8003892:	f107 0308 	add.w	r3, r7, #8
 8003896:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3304      	adds	r3, #4
 80038a2:	4619      	mov	r1, r3
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	88fb      	ldrh	r3, [r7, #6]
 80038aa:	f7fe f9f5 	bl	8001c98 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80038ae:	2300      	movs	r3, #0
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038da:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038fa:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	e000      	b.n	8003902 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003900:	2302      	movs	r3, #2
  }
}
 8003902:	4618      	mov	r0, r3
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	08003bb5 	.word	0x08003bb5
 8003910:	08003c1d 	.word	0x08003c1d
 8003914:	08003c39 	.word	0x08003c39

08003918 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003938:	2300      	movs	r3, #0
 800393a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10d      	bne.n	800396a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f003 0320 	and.w	r3, r3, #32
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_UART_IRQHandler+0x52>
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	f003 0320 	and.w	r3, r3, #32
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 faaf 	bl	8003ec6 <UART_Receive_IT>
      return;
 8003968:	e0cc      	b.n	8003b04 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80ab 	beq.w	8003ac8 <HAL_UART_IRQHandler+0x1b0>
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d105      	bne.n	8003988 <HAL_UART_IRQHandler+0x70>
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 80a0 	beq.w	8003ac8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <HAL_UART_IRQHandler+0x90>
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a0:	f043 0201 	orr.w	r2, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_UART_IRQHandler+0xb0>
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c0:	f043 0202 	orr.w	r2, r3, #2
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <HAL_UART_IRQHandler+0xd0>
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e0:	f043 0204 	orr.w	r2, r3, #4
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HAL_UART_IRQHandler+0xf0>
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a00:	f043 0208 	orr.w	r2, r3, #8
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d078      	beq.n	8003b02 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f003 0320 	and.w	r3, r3, #32
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d007      	beq.n	8003a2a <HAL_UART_IRQHandler+0x112>
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 fa4e 	bl	8003ec6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	bf14      	ite	ne
 8003a38:	2301      	movne	r3, #1
 8003a3a:	2300      	moveq	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d102      	bne.n	8003a52 <HAL_UART_IRQHandler+0x13a>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d031      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f999 	bl	8003d8a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d023      	beq.n	8003aae <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695a      	ldr	r2, [r3, #20]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a74:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d013      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a82:	4a22      	ldr	r2, [pc, #136]	; (8003b0c <HAL_UART_IRQHandler+0x1f4>)
 8003a84:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe f964 	bl	8001d58 <HAL_DMA_Abort_IT>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d016      	beq.n	8003ac4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa4:	e00e      	b.n	8003ac4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f844 	bl	8003b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aac:	e00a      	b.n	8003ac4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f840 	bl	8003b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab4:	e006      	b.n	8003ac4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f83c 	bl	8003b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003ac2:	e01e      	b.n	8003b02 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac4:	bf00      	nop
    return;
 8003ac6:	e01c      	b.n	8003b02 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d008      	beq.n	8003ae4 <HAL_UART_IRQHandler+0x1cc>
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f985 	bl	8003dec <UART_Transmit_IT>
    return;
 8003ae2:	e00f      	b.n	8003b04 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_UART_IRQHandler+0x1ec>
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f9cc 	bl	8003e96 <UART_EndTransmit_IT>
    return;
 8003afe:	bf00      	nop
 8003b00:	e000      	b.n	8003b04 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003b02:	bf00      	nop
  }
}
 8003b04:	3720      	adds	r7, #32
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	08003dc5 	.word	0x08003dc5

08003b10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr

08003b22 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr

08003b34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr

08003b46 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b084      	sub	sp, #16
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d113      	bne.n	8003b8a <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695a      	ldr	r2, [r3, #20]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b76:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b86:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b88:	e002      	b.n	8003b90 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f7ff ffc0 	bl	8003b10 <HAL_UART_TxCpltCallback>
}
 8003b90:	bf00      	nop
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f7ff ffbb 	bl	8003b22 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bac:	bf00      	nop
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d11e      	bne.n	8003c0e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003be4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695a      	ldr	r2, [r3, #20]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0201 	bic.w	r2, r2, #1
 8003bf4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c04:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f004 f874 	bl	8007cfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c14:	bf00      	nop
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f004 f87e 	bl	8007d2c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c30:	bf00      	nop
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	bf14      	ite	ne
 8003c58:	2301      	movne	r3, #1
 8003c5a:	2300      	moveq	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b21      	cmp	r3, #33	; 0x21
 8003c6a:	d108      	bne.n	8003c7e <UART_DMAError+0x46>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d005      	beq.n	8003c7e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2200      	movs	r2, #0
 8003c76:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003c78:	68b8      	ldr	r0, [r7, #8]
 8003c7a:	f000 f871 	bl	8003d60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	bf14      	ite	ne
 8003c8c:	2301      	movne	r3, #1
 8003c8e:	2300      	moveq	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b22      	cmp	r3, #34	; 0x22
 8003c9e:	d108      	bne.n	8003cb2 <UART_DMAError+0x7a>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d005      	beq.n	8003cb2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003cac:	68b8      	ldr	r0, [r7, #8]
 8003cae:	f000 f86c 	bl	8003d8a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb6:	f043 0210 	orr.w	r2, r3, #16
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cbe:	68b8      	ldr	r0, [r7, #8]
 8003cc0:	f7ff ff38 	bl	8003b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cc4:	bf00      	nop
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cdc:	e02c      	b.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce4:	d028      	beq.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <UART_WaitOnFlagUntilTimeout+0x30>
 8003cec:	f7fd fe90 	bl	8001a10 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d21d      	bcs.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d0a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695a      	ldr	r2, [r3, #20]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0201 	bic.w	r2, r2, #1
 8003d1a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e00f      	b.n	8003d58 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	4013      	ands	r3, r2
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	bf0c      	ite	eq
 8003d48:	2301      	moveq	r3, #1
 8003d4a:	2300      	movne	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	461a      	mov	r2, r3
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d0c3      	beq.n	8003cde <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003d76:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr

08003d8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003da0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695a      	ldr	r2, [r3, #20]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0201 	bic.w	r2, r2, #1
 8003db0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr

08003dc4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f7ff fea8 	bl	8003b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003de4:	bf00      	nop
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b21      	cmp	r3, #33	; 0x21
 8003dfe:	d144      	bne.n	8003e8a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e08:	d11a      	bne.n	8003e40 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	461a      	mov	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e1e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d105      	bne.n	8003e34 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	1c9a      	adds	r2, r3, #2
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	621a      	str	r2, [r3, #32]
 8003e32:	e00e      	b.n	8003e52 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	621a      	str	r2, [r3, #32]
 8003e3e:	e008      	b.n	8003e52 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	1c59      	adds	r1, r3, #1
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6211      	str	r1, [r2, #32]
 8003e4a:	781a      	ldrb	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10f      	bne.n	8003e86 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	e000      	b.n	8003e8c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003e8a:	2302      	movs	r3, #2
  }
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr

08003e96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b082      	sub	sp, #8
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff fe2a 	bl	8003b10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b22      	cmp	r3, #34	; 0x22
 8003ed8:	d171      	bne.n	8003fbe <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee2:	d123      	bne.n	8003f2c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee8:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10e      	bne.n	8003f10 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	1c9a      	adds	r2, r3, #2
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	629a      	str	r2, [r3, #40]	; 0x28
 8003f0e:	e029      	b.n	8003f64 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	629a      	str	r2, [r3, #40]	; 0x28
 8003f2a:	e01b      	b.n	8003f64 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10a      	bne.n	8003f4a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6858      	ldr	r0, [r3, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3e:	1c59      	adds	r1, r3, #1
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6291      	str	r1, [r2, #40]	; 0x28
 8003f44:	b2c2      	uxtb	r2, r0
 8003f46:	701a      	strb	r2, [r3, #0]
 8003f48:	e00c      	b.n	8003f64 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	1c58      	adds	r0, r3, #1
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	6288      	str	r0, [r1, #40]	; 0x28
 8003f5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	4619      	mov	r1, r3
 8003f72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d120      	bne.n	8003fba <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0220 	bic.w	r2, r2, #32
 8003f86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695a      	ldr	r2, [r3, #20]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0201 	bic.w	r2, r2, #1
 8003fa6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f003 fea3 	bl	8007cfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	e002      	b.n	8003fc0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	e000      	b.n	8003fc0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003fbe:	2302      	movs	r3, #2
  }
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004002:	f023 030c 	bic.w	r3, r3, #12
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	68f9      	ldr	r1, [r7, #12]
 800400c:	430b      	orrs	r3, r1
 800400e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699a      	ldr	r2, [r3, #24]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a52      	ldr	r2, [pc, #328]	; (8004174 <UART_SetConfig+0x1ac>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d14e      	bne.n	80040ce <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004030:	f7fe fd80 	bl	8002b34 <HAL_RCC_GetPCLK2Freq>
 8004034:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	009a      	lsls	r2, r3, #2
 8004040:	441a      	add	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	4a4a      	ldr	r2, [pc, #296]	; (8004178 <UART_SetConfig+0x1b0>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	0119      	lsls	r1, r3, #4
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	4613      	mov	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	009a      	lsls	r2, r3, #2
 8004060:	441a      	add	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	fbb2 f2f3 	udiv	r2, r2, r3
 800406c:	4b42      	ldr	r3, [pc, #264]	; (8004178 <UART_SetConfig+0x1b0>)
 800406e:	fba3 0302 	umull	r0, r3, r3, r2
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	2064      	movs	r0, #100	; 0x64
 8004076:	fb00 f303 	mul.w	r3, r0, r3
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	3332      	adds	r3, #50	; 0x32
 8004080:	4a3d      	ldr	r2, [pc, #244]	; (8004178 <UART_SetConfig+0x1b0>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800408c:	4419      	add	r1, r3
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	4613      	mov	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	009a      	lsls	r2, r3, #2
 8004098:	441a      	add	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040a4:	4b34      	ldr	r3, [pc, #208]	; (8004178 <UART_SetConfig+0x1b0>)
 80040a6:	fba3 0302 	umull	r0, r3, r3, r2
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	2064      	movs	r0, #100	; 0x64
 80040ae:	fb00 f303 	mul.w	r3, r0, r3
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	3332      	adds	r3, #50	; 0x32
 80040b8:	4a2f      	ldr	r2, [pc, #188]	; (8004178 <UART_SetConfig+0x1b0>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	f003 020f 	and.w	r2, r3, #15
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	440a      	add	r2, r1
 80040ca:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80040cc:	e04d      	b.n	800416a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80040ce:	f7fe fd1d 	bl	8002b0c <HAL_RCC_GetPCLK1Freq>
 80040d2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	4613      	mov	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	009a      	lsls	r2, r3, #2
 80040de:	441a      	add	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ea:	4a23      	ldr	r2, [pc, #140]	; (8004178 <UART_SetConfig+0x1b0>)
 80040ec:	fba2 2303 	umull	r2, r3, r2, r3
 80040f0:	095b      	lsrs	r3, r3, #5
 80040f2:	0119      	lsls	r1, r3, #4
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	009a      	lsls	r2, r3, #2
 80040fe:	441a      	add	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	fbb2 f2f3 	udiv	r2, r2, r3
 800410a:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <UART_SetConfig+0x1b0>)
 800410c:	fba3 0302 	umull	r0, r3, r3, r2
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	2064      	movs	r0, #100	; 0x64
 8004114:	fb00 f303 	mul.w	r3, r0, r3
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	3332      	adds	r3, #50	; 0x32
 800411e:	4a16      	ldr	r2, [pc, #88]	; (8004178 <UART_SetConfig+0x1b0>)
 8004120:	fba2 2303 	umull	r2, r3, r2, r3
 8004124:	095b      	lsrs	r3, r3, #5
 8004126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800412a:	4419      	add	r1, r3
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	009a      	lsls	r2, r3, #2
 8004136:	441a      	add	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <UART_SetConfig+0x1b0>)
 8004144:	fba3 0302 	umull	r0, r3, r3, r2
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	2064      	movs	r0, #100	; 0x64
 800414c:	fb00 f303 	mul.w	r3, r0, r3
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	3332      	adds	r3, #50	; 0x32
 8004156:	4a08      	ldr	r2, [pc, #32]	; (8004178 <UART_SetConfig+0x1b0>)
 8004158:	fba2 2303 	umull	r2, r3, r2, r3
 800415c:	095b      	lsrs	r3, r3, #5
 800415e:	f003 020f 	and.w	r2, r3, #15
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	440a      	add	r2, r1
 8004168:	609a      	str	r2, [r3, #8]
}
 800416a:	bf00      	nop
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40013800 	.word	0x40013800
 8004178:	51eb851f 	.word	0x51eb851f

0800417c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800418a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800418e:	2b84      	cmp	r3, #132	; 0x84
 8004190:	d005      	beq.n	800419e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004192:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4413      	add	r3, r2
 800419a:	3303      	adds	r3, #3
 800419c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800419e:	68fb      	ldr	r3, [r7, #12]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr

080041aa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80041ae:	f001 f8e3 	bl	8005378 <vTaskStartScheduler>
  
  return osOK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80041b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af02      	add	r7, sp, #8
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685c      	ldr	r4, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041ce:	b29e      	uxth	r6, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff ffd0 	bl	800417c <makeFreeRtosPriority>
 80041dc:	4602      	mov	r2, r0
 80041de:	f107 030c 	add.w	r3, r7, #12
 80041e2:	9301      	str	r3, [sp, #4]
 80041e4:	9200      	str	r2, [sp, #0]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	4632      	mov	r2, r6
 80041ea:	4629      	mov	r1, r5
 80041ec:	4620      	mov	r0, r4
 80041ee:	f000 ff65 	bl	80050bc <xTaskCreate>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d001      	beq.n	80041fc <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	e000      	b.n	80041fe <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80041fc:	68fb      	ldr	r3, [r7, #12]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004206 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b084      	sub	sp, #16
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <osDelay+0x16>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	e000      	b.n	800421e <osDelay+0x18>
 800421c:	2301      	movs	r3, #1
 800421e:	4618      	mov	r0, r3
 8004220:	f001 f876 	bl	8005310 <vTaskDelay>
  
  return osOK;
 8004224:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f103 0208 	add.w	r2, r3, #8
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f04f 32ff 	mov.w	r2, #4294967295
 8004246:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f103 0208 	add.w	r2, r3, #8
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f103 0208 	add.w	r2, r3, #8
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr

0800426c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr

08004284 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	601a      	str	r2, [r3, #0]
}
 80042c0:	bf00      	nop
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr

080042ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042ca:	b480      	push	{r7}
 80042cc:	b085      	sub	sp, #20
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
 80042d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e0:	d103      	bne.n	80042ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	e00c      	b.n	8004304 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	3308      	adds	r3, #8
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	e002      	b.n	80042f8 <vListInsert+0x2e>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	429a      	cmp	r2, r3
 8004302:	d2f6      	bcs.n	80042f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	1c5a      	adds	r2, r3, #1
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	601a      	str	r2, [r3, #0]
}
 8004330:	bf00      	nop
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr

0800433a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800433a:	b480      	push	{r7}
 800433c:	b085      	sub	sp, #20
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6892      	ldr	r2, [r2, #8]
 8004350:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6852      	ldr	r2, [r2, #4]
 800435a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	429a      	cmp	r2, r3
 8004364:	d103      	bne.n	800436e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	1e5a      	subs	r2, r3, #1
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr

0800438c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d109      	bne.n	80043b4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	e7fe      	b.n	80043b2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80043b4:	f001 fd98 	bl	8005ee8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c0:	68f9      	ldr	r1, [r7, #12]
 80043c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043c4:	fb01 f303 	mul.w	r3, r1, r3
 80043c8:	441a      	add	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e4:	3b01      	subs	r3, #1
 80043e6:	68f9      	ldr	r1, [r7, #12]
 80043e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043ea:	fb01 f303 	mul.w	r3, r1, r3
 80043ee:	441a      	add	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	22ff      	movs	r2, #255	; 0xff
 80043f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	22ff      	movs	r2, #255	; 0xff
 8004400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d114      	bne.n	8004434 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d01a      	beq.n	8004448 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3310      	adds	r3, #16
 8004416:	4618      	mov	r0, r3
 8004418:	f001 f9d8 	bl	80057cc <xTaskRemoveFromEventList>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d012      	beq.n	8004448 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004422:	4b0d      	ldr	r3, [pc, #52]	; (8004458 <xQueueGenericReset+0xcc>)
 8004424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	e009      	b.n	8004448 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3310      	adds	r3, #16
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff fef8 	bl	800422e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	3324      	adds	r3, #36	; 0x24
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff fef3 	bl	800422e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004448:	f001 fd7c 	bl	8005f44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800444c:	2301      	movs	r3, #1
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	e000ed04 	.word	0xe000ed04

0800445c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08a      	sub	sp, #40	; 0x28
 8004460:	af02      	add	r7, sp, #8
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	4613      	mov	r3, r2
 8004468:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d109      	bne.n	8004484 <xQueueGenericCreate+0x28>
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	e7fe      	b.n	8004482 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d102      	bne.n	8004490 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800448a:	2300      	movs	r3, #0
 800448c:	61fb      	str	r3, [r7, #28]
 800448e:	e004      	b.n	800449a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	fb02 f303 	mul.w	r3, r2, r3
 8004498:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	3348      	adds	r3, #72	; 0x48
 800449e:	4618      	mov	r0, r3
 80044a0:	f001 fe18 	bl	80060d4 <pvPortMalloc>
 80044a4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00b      	beq.n	80044c4 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	3348      	adds	r3, #72	; 0x48
 80044b0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044b2:	79fa      	ldrb	r2, [r7, #7]
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	4613      	mov	r3, r2
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	68b9      	ldr	r1, [r7, #8]
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 f805 	bl	80044ce <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80044c4:	69bb      	ldr	r3, [r7, #24]
	}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3720      	adds	r7, #32
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	607a      	str	r2, [r7, #4]
 80044da:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d103      	bne.n	80044ea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	e002      	b.n	80044f0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044fc:	2101      	movs	r1, #1
 80044fe:	69b8      	ldr	r0, [r7, #24]
 8004500:	f7ff ff44 	bl	800438c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004504:	bf00      	nop
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b08e      	sub	sp, #56	; 0x38
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
 8004518:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800451a:	2300      	movs	r3, #0
 800451c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	2b00      	cmp	r3, #0
 8004526:	d109      	bne.n	800453c <xQueueGenericSend+0x30>
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	62bb      	str	r3, [r7, #40]	; 0x28
 800453a:	e7fe      	b.n	800453a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d103      	bne.n	800454a <xQueueGenericSend+0x3e>
 8004542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <xQueueGenericSend+0x42>
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <xQueueGenericSend+0x44>
 800454e:	2300      	movs	r3, #0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d109      	bne.n	8004568 <xQueueGenericSend+0x5c>
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
 8004566:	e7fe      	b.n	8004566 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2b02      	cmp	r3, #2
 800456c:	d103      	bne.n	8004576 <xQueueGenericSend+0x6a>
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <xQueueGenericSend+0x6e>
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <xQueueGenericSend+0x70>
 800457a:	2300      	movs	r3, #0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d109      	bne.n	8004594 <xQueueGenericSend+0x88>
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	623b      	str	r3, [r7, #32]
 8004592:	e7fe      	b.n	8004592 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004594:	f001 fab6 	bl	8005b04 <xTaskGetSchedulerState>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d102      	bne.n	80045a4 <xQueueGenericSend+0x98>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <xQueueGenericSend+0x9c>
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <xQueueGenericSend+0x9e>
 80045a8:	2300      	movs	r3, #0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d109      	bne.n	80045c2 <xQueueGenericSend+0xb6>
 80045ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	61fb      	str	r3, [r7, #28]
 80045c0:	e7fe      	b.n	80045c0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045c2:	f001 fc91 	bl	8005ee8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d302      	bcc.n	80045d8 <xQueueGenericSend+0xcc>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d129      	bne.n	800462c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045de:	f000 fc35 	bl	8004e4c <prvCopyDataToQueue>
 80045e2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d010      	beq.n	800460e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	3324      	adds	r3, #36	; 0x24
 80045f0:	4618      	mov	r0, r3
 80045f2:	f001 f8eb 	bl	80057cc <xTaskRemoveFromEventList>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d013      	beq.n	8004624 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80045fc:	4b3f      	ldr	r3, [pc, #252]	; (80046fc <xQueueGenericSend+0x1f0>)
 80045fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	e00a      	b.n	8004624 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800460e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004614:	4b39      	ldr	r3, [pc, #228]	; (80046fc <xQueueGenericSend+0x1f0>)
 8004616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004624:	f001 fc8e 	bl	8005f44 <vPortExitCritical>
				return pdPASS;
 8004628:	2301      	movs	r3, #1
 800462a:	e063      	b.n	80046f4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d103      	bne.n	800463a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004632:	f001 fc87 	bl	8005f44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004636:	2300      	movs	r3, #0
 8004638:	e05c      	b.n	80046f4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800463a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463c:	2b00      	cmp	r3, #0
 800463e:	d106      	bne.n	800464e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004640:	f107 0314 	add.w	r3, r7, #20
 8004644:	4618      	mov	r0, r3
 8004646:	f001 f923 	bl	8005890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800464a:	2301      	movs	r3, #1
 800464c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800464e:	f001 fc79 	bl	8005f44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004652:	f000 fed7 	bl	8005404 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004656:	f001 fc47 	bl	8005ee8 <vPortEnterCritical>
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004660:	b25b      	sxtb	r3, r3
 8004662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004666:	d103      	bne.n	8004670 <xQueueGenericSend+0x164>
 8004668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004672:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004676:	b25b      	sxtb	r3, r3
 8004678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467c:	d103      	bne.n	8004686 <xQueueGenericSend+0x17a>
 800467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004686:	f001 fc5d 	bl	8005f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800468a:	1d3a      	adds	r2, r7, #4
 800468c:	f107 0314 	add.w	r3, r7, #20
 8004690:	4611      	mov	r1, r2
 8004692:	4618      	mov	r0, r3
 8004694:	f001 f912 	bl	80058bc <xTaskCheckForTimeOut>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d124      	bne.n	80046e8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800469e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046a0:	f000 fccc 	bl	800503c <prvIsQueueFull>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d018      	beq.n	80046dc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	3310      	adds	r3, #16
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	4611      	mov	r1, r2
 80046b2:	4618      	mov	r0, r3
 80046b4:	f001 f866 	bl	8005784 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046ba:	f000 fc57 	bl	8004f6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046be:	f000 feaf 	bl	8005420 <xTaskResumeAll>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f47f af7c 	bne.w	80045c2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80046ca:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <xQueueGenericSend+0x1f0>)
 80046cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	e772      	b.n	80045c2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80046dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046de:	f000 fc45 	bl	8004f6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046e2:	f000 fe9d 	bl	8005420 <xTaskResumeAll>
 80046e6:	e76c      	b.n	80045c2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80046e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046ea:	f000 fc3f 	bl	8004f6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046ee:	f000 fe97 	bl	8005420 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80046f2:	2300      	movs	r3, #0
		}
	}
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3738      	adds	r7, #56	; 0x38
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	e000ed04 	.word	0xe000ed04

08004700 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b08e      	sub	sp, #56	; 0x38
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	2b00      	cmp	r3, #0
 8004716:	d109      	bne.n	800472c <xQueueGenericSendFromISR+0x2c>
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
 800472a:	e7fe      	b.n	800472a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d103      	bne.n	800473a <xQueueGenericSendFromISR+0x3a>
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <xQueueGenericSendFromISR+0x3e>
 800473a:	2301      	movs	r3, #1
 800473c:	e000      	b.n	8004740 <xQueueGenericSendFromISR+0x40>
 800473e:	2300      	movs	r3, #0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d109      	bne.n	8004758 <xQueueGenericSendFromISR+0x58>
 8004744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	623b      	str	r3, [r7, #32]
 8004756:	e7fe      	b.n	8004756 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d103      	bne.n	8004766 <xQueueGenericSendFromISR+0x66>
 800475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004762:	2b01      	cmp	r3, #1
 8004764:	d101      	bne.n	800476a <xQueueGenericSendFromISR+0x6a>
 8004766:	2301      	movs	r3, #1
 8004768:	e000      	b.n	800476c <xQueueGenericSendFromISR+0x6c>
 800476a:	2300      	movs	r3, #0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d109      	bne.n	8004784 <xQueueGenericSendFromISR+0x84>
 8004770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	61fb      	str	r3, [r7, #28]
 8004782:	e7fe      	b.n	8004782 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004784:	f001 fc6a 	bl	800605c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004788:	f3ef 8211 	mrs	r2, BASEPRI
 800478c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	61ba      	str	r2, [r7, #24]
 800479e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80047a0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d302      	bcc.n	80047b6 <xQueueGenericSendFromISR+0xb6>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d12c      	bne.n	8004810 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	68b9      	ldr	r1, [r7, #8]
 80047c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047c6:	f000 fb41 	bl	8004e4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047ca:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80047ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d2:	d112      	bne.n	80047fa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d016      	beq.n	800480a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	3324      	adds	r3, #36	; 0x24
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fff3 	bl	80057cc <xTaskRemoveFromEventList>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00e      	beq.n	800480a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00b      	beq.n	800480a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	e007      	b.n	800480a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80047fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047fe:	3301      	adds	r3, #1
 8004800:	b2db      	uxtb	r3, r3
 8004802:	b25a      	sxtb	r2, r3
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800480a:	2301      	movs	r3, #1
 800480c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800480e:	e001      	b.n	8004814 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004810:	2300      	movs	r3, #0
 8004812:	637b      	str	r3, [r7, #52]	; 0x34
 8004814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004816:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800481e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004820:	4618      	mov	r0, r3
 8004822:	3738      	adds	r7, #56	; 0x38
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08c      	sub	sp, #48	; 0x30
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004834:	2300      	movs	r3, #0
 8004836:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	2b00      	cmp	r3, #0
 8004840:	d109      	bne.n	8004856 <xQueueReceive+0x2e>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	623b      	str	r3, [r7, #32]
 8004854:	e7fe      	b.n	8004854 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d103      	bne.n	8004864 <xQueueReceive+0x3c>
 800485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <xQueueReceive+0x40>
 8004864:	2301      	movs	r3, #1
 8004866:	e000      	b.n	800486a <xQueueReceive+0x42>
 8004868:	2300      	movs	r3, #0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d109      	bne.n	8004882 <xQueueReceive+0x5a>
 800486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	61fb      	str	r3, [r7, #28]
 8004880:	e7fe      	b.n	8004880 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004882:	f001 f93f 	bl	8005b04 <xTaskGetSchedulerState>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d102      	bne.n	8004892 <xQueueReceive+0x6a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <xQueueReceive+0x6e>
 8004892:	2301      	movs	r3, #1
 8004894:	e000      	b.n	8004898 <xQueueReceive+0x70>
 8004896:	2300      	movs	r3, #0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d109      	bne.n	80048b0 <xQueueReceive+0x88>
 800489c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a0:	f383 8811 	msr	BASEPRI, r3
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	e7fe      	b.n	80048ae <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80048b0:	f001 fb1a 	bl	8005ee8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01f      	beq.n	8004900 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048c0:	68b9      	ldr	r1, [r7, #8]
 80048c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048c4:	f000 fb2c 	bl	8004f20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	1e5a      	subs	r2, r3, #1
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00f      	beq.n	80048f8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048da:	3310      	adds	r3, #16
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 ff75 	bl	80057cc <xTaskRemoveFromEventList>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d007      	beq.n	80048f8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048e8:	4b3c      	ldr	r3, [pc, #240]	; (80049dc <xQueueReceive+0x1b4>)
 80048ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048f8:	f001 fb24 	bl	8005f44 <vPortExitCritical>
				return pdPASS;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e069      	b.n	80049d4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d103      	bne.n	800490e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004906:	f001 fb1d 	bl	8005f44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800490a:	2300      	movs	r3, #0
 800490c:	e062      	b.n	80049d4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004910:	2b00      	cmp	r3, #0
 8004912:	d106      	bne.n	8004922 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004914:	f107 0310 	add.w	r3, r7, #16
 8004918:	4618      	mov	r0, r3
 800491a:	f000 ffb9 	bl	8005890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800491e:	2301      	movs	r3, #1
 8004920:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004922:	f001 fb0f 	bl	8005f44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004926:	f000 fd6d 	bl	8005404 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800492a:	f001 fadd 	bl	8005ee8 <vPortEnterCritical>
 800492e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004930:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004934:	b25b      	sxtb	r3, r3
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	d103      	bne.n	8004944 <xQueueReceive+0x11c>
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004946:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800494a:	b25b      	sxtb	r3, r3
 800494c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004950:	d103      	bne.n	800495a <xQueueReceive+0x132>
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800495a:	f001 faf3 	bl	8005f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800495e:	1d3a      	adds	r2, r7, #4
 8004960:	f107 0310 	add.w	r3, r7, #16
 8004964:	4611      	mov	r1, r2
 8004966:	4618      	mov	r0, r3
 8004968:	f000 ffa8 	bl	80058bc <xTaskCheckForTimeOut>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d123      	bne.n	80049ba <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004974:	f000 fb4c 	bl	8005010 <prvIsQueueEmpty>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d017      	beq.n	80049ae <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	3324      	adds	r3, #36	; 0x24
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	4611      	mov	r1, r2
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fefc 	bl	8005784 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800498c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800498e:	f000 faed 	bl	8004f6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004992:	f000 fd45 	bl	8005420 <xTaskResumeAll>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d189      	bne.n	80048b0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800499c:	4b0f      	ldr	r3, [pc, #60]	; (80049dc <xQueueReceive+0x1b4>)
 800499e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	e780      	b.n	80048b0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80049ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049b0:	f000 fadc 	bl	8004f6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049b4:	f000 fd34 	bl	8005420 <xTaskResumeAll>
 80049b8:	e77a      	b.n	80048b0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80049ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049bc:	f000 fad6 	bl	8004f6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049c0:	f000 fd2e 	bl	8005420 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049c6:	f000 fb23 	bl	8005010 <prvIsQueueEmpty>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f43f af6f 	beq.w	80048b0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3730      	adds	r7, #48	; 0x30
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	e000ed04 	.word	0xe000ed04

080049e0 <xQueuePeek>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08e      	sub	sp, #56	; 0x38
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80049ec:	2300      	movs	r3, #0
 80049ee:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d109      	bne.n	8004a0e <xQueuePeek+0x2e>
 80049fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a0c:	e7fe      	b.n	8004a0c <xQueuePeek+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d103      	bne.n	8004a1c <xQueuePeek+0x3c>
 8004a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <xQueuePeek+0x40>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e000      	b.n	8004a22 <xQueuePeek+0x42>
 8004a20:	2300      	movs	r3, #0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <xQueuePeek+0x5a>
 8004a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	623b      	str	r3, [r7, #32]
 8004a38:	e7fe      	b.n	8004a38 <xQueuePeek+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a3a:	f001 f863 	bl	8005b04 <xTaskGetSchedulerState>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d102      	bne.n	8004a4a <xQueuePeek+0x6a>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <xQueuePeek+0x6e>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e000      	b.n	8004a50 <xQueuePeek+0x70>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d109      	bne.n	8004a68 <xQueuePeek+0x88>
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	e7fe      	b.n	8004a66 <xQueuePeek+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a68:	f001 fa3e 	bl	8005ee8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d021      	beq.n	8004abc <xQueuePeek+0xdc>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8004a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a7e:	68b9      	ldr	r1, [r7, #8]
 8004a80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a82:	f000 fa4d 	bl	8004f20 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8004a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a8a:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00f      	beq.n	8004ab4 <xQueuePeek+0xd4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	3324      	adds	r3, #36	; 0x24
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 fe97 	bl	80057cc <xTaskRemoveFromEventList>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d007      	beq.n	8004ab4 <xQueuePeek+0xd4>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8004aa4:	4b3c      	ldr	r3, [pc, #240]	; (8004b98 <xQueuePeek+0x1b8>)
 8004aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ab4:	f001 fa46 	bl	8005f44 <vPortExitCritical>
				return pdPASS;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e069      	b.n	8004b90 <xQueuePeek+0x1b0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d103      	bne.n	8004aca <xQueuePeek+0xea>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ac2:	f001 fa3f 	bl	8005f44 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e062      	b.n	8004b90 <xQueuePeek+0x1b0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d106      	bne.n	8004ade <xQueuePeek+0xfe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ad0:	f107 0314 	add.w	r3, r7, #20
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 fedb 	bl	8005890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ada:	2301      	movs	r3, #1
 8004adc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ade:	f001 fa31 	bl	8005f44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ae2:	f000 fc8f 	bl	8005404 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ae6:	f001 f9ff 	bl	8005ee8 <vPortEnterCritical>
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004af0:	b25b      	sxtb	r3, r3
 8004af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af6:	d103      	bne.n	8004b00 <xQueuePeek+0x120>
 8004af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b06:	b25b      	sxtb	r3, r3
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0c:	d103      	bne.n	8004b16 <xQueuePeek+0x136>
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b16:	f001 fa15 	bl	8005f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b1a:	1d3a      	adds	r2, r7, #4
 8004b1c:	f107 0314 	add.w	r3, r7, #20
 8004b20:	4611      	mov	r1, r2
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 feca 	bl	80058bc <xTaskCheckForTimeOut>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d123      	bne.n	8004b76 <xQueuePeek+0x196>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b30:	f000 fa6e 	bl	8005010 <prvIsQueueEmpty>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d017      	beq.n	8004b6a <xQueuePeek+0x18a>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	3324      	adds	r3, #36	; 0x24
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	4611      	mov	r1, r2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 fe1e 	bl	8005784 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b4a:	f000 fa0f 	bl	8004f6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b4e:	f000 fc67 	bl	8005420 <xTaskResumeAll>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d187      	bne.n	8004a68 <xQueuePeek+0x88>
				{
					portYIELD_WITHIN_API();
 8004b58:	4b0f      	ldr	r3, [pc, #60]	; (8004b98 <xQueuePeek+0x1b8>)
 8004b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	e77e      	b.n	8004a68 <xQueuePeek+0x88>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8004b6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b6c:	f000 f9fe 	bl	8004f6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b70:	f000 fc56 	bl	8005420 <xTaskResumeAll>
 8004b74:	e778      	b.n	8004a68 <xQueuePeek+0x88>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8004b76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b78:	f000 f9f8 	bl	8004f6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b7c:	f000 fc50 	bl	8005420 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b82:	f000 fa45 	bl	8005010 <prvIsQueueEmpty>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f43f af6d 	beq.w	8004a68 <xQueuePeek+0x88>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3738      	adds	r7, #56	; 0x38
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	e000ed04 	.word	0xe000ed04

08004b9c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08e      	sub	sp, #56	; 0x38
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d109      	bne.n	8004bc6 <xQueueReceiveFromISR+0x2a>
 8004bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	623b      	str	r3, [r7, #32]
 8004bc4:	e7fe      	b.n	8004bc4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d103      	bne.n	8004bd4 <xQueueReceiveFromISR+0x38>
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <xQueueReceiveFromISR+0x3c>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e000      	b.n	8004bda <xQueueReceiveFromISR+0x3e>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d109      	bne.n	8004bf2 <xQueueReceiveFromISR+0x56>
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	61fb      	str	r3, [r7, #28]
 8004bf0:	e7fe      	b.n	8004bf0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bf2:	f001 fa33 	bl	800605c <vPortValidateInterruptPriority>
	__asm volatile
 8004bf6:	f3ef 8211 	mrs	r2, BASEPRI
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	61ba      	str	r2, [r7, #24]
 8004c0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004c0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d02f      	beq.n	8004c7e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c2c:	f000 f978 	bl	8004f20 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	1e5a      	subs	r2, r3, #1
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c36:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004c38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c40:	d112      	bne.n	8004c68 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d016      	beq.n	8004c78 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	3310      	adds	r3, #16
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fdbc 	bl	80057cc <xTaskRemoveFromEventList>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00e      	beq.n	8004c78 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00b      	beq.n	8004c78 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	e007      	b.n	8004c78 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	b25a      	sxtb	r2, r3
 8004c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c7c:	e001      	b.n	8004c82 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	637b      	str	r3, [r7, #52]	; 0x34
 8004c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c84:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3738      	adds	r7, #56	; 0x38
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b08c      	sub	sp, #48	; 0x30
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d109      	bne.n	8004cbe <xQueuePeekFromISR+0x28>
	__asm volatile
 8004caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	61fb      	str	r3, [r7, #28]
 8004cbc:	e7fe      	b.n	8004cbc <xQueuePeekFromISR+0x26>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d103      	bne.n	8004ccc <xQueuePeekFromISR+0x36>
 8004cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <xQueuePeekFromISR+0x3a>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e000      	b.n	8004cd2 <xQueuePeekFromISR+0x3c>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d109      	bne.n	8004cea <xQueuePeekFromISR+0x54>
 8004cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	61bb      	str	r3, [r7, #24]
 8004ce8:	e7fe      	b.n	8004ce8 <xQueuePeekFromISR+0x52>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 8004cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d109      	bne.n	8004d06 <xQueuePeekFromISR+0x70>
 8004cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	e7fe      	b.n	8004d04 <xQueuePeekFromISR+0x6e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d06:	f001 f9a9 	bl	800605c <vPortValidateInterruptPriority>
	__asm volatile
 8004d0a:	f3ef 8211 	mrs	r2, BASEPRI
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	613a      	str	r2, [r7, #16]
 8004d20:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8004d22:	693b      	ldr	r3, [r7, #16]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00c      	beq.n	8004d48 <xQueuePeekFromISR+0xb2>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8004d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	623b      	str	r3, [r7, #32]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d34:	6839      	ldr	r1, [r7, #0]
 8004d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d38:	f000 f8f2 	bl	8004f20 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8004d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3e:	6a3a      	ldr	r2, [r7, #32]
 8004d40:	60da      	str	r2, [r3, #12]

			xReturn = pdPASS;
 8004d42:	2301      	movs	r3, #1
 8004d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d46:	e001      	b.n	8004d4c <xQueuePeekFromISR+0xb6>
		}
		else
		{
			xReturn = pdFAIL;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3730      	adds	r7, #48	; 0x30
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d109      	bne.n	8004d82 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	60bb      	str	r3, [r7, #8]
 8004d80:	e7fe      	b.n	8004d80 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8004d82:	f001 f8b1 	bl	8005ee8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004d8c:	f001 f8da 	bl	8005f44 <vPortExitCritical>

	return uxReturn;
 8004d90:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b086      	sub	sp, #24
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	617b      	str	r3, [r7, #20]
	configASSERT( pxQueue );
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d109      	bne.n	8004dc0 <uxQueueSpacesAvailable+0x26>
 8004dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	e7fe      	b.n	8004dbe <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 8004dc0:	f001 f892 	bl	8005ee8 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8004dd0:	f001 f8b8 	bl	8005f44 <vPortExitCritical>

	return uxReturn;
 8004dd4:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3718      	adds	r7, #24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8004dde:	b480      	push	{r7}
 8004de0:	b085      	sub	sp, #20
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d109      	bne.n	8004e00 <uxQueueMessagesWaitingFromISR+0x22>
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	60bb      	str	r3, [r7, #8]
 8004dfe:	e7fe      	b.n	8004dfe <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e04:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8004e06:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc80      	pop	{r7}
 8004e10:	4770      	bx	lr

08004e12 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d109      	bne.n	8004e38 <vQueueDelete+0x26>
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	60bb      	str	r3, [r7, #8]
 8004e36:	e7fe      	b.n	8004e36 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f917 	bl	800506c <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f001 fa0a 	bl	8006258 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004e44:	bf00      	nop
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10d      	bne.n	8004e86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d14d      	bne.n	8004f0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fe62 	bl	8005b40 <xTaskPriorityDisinherit>
 8004e7c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	605a      	str	r2, [r3, #4]
 8004e84:	e043      	b.n	8004f0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d119      	bne.n	8004ec0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6898      	ldr	r0, [r3, #8]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	461a      	mov	r2, r3
 8004e96:	68b9      	ldr	r1, [r7, #8]
 8004e98:	f004 fd43 	bl	8009922 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	441a      	add	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d32b      	bcc.n	8004f0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	609a      	str	r2, [r3, #8]
 8004ebe:	e026      	b.n	8004f0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	68d8      	ldr	r0, [r3, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec8:	461a      	mov	r2, r3
 8004eca:	68b9      	ldr	r1, [r7, #8]
 8004ecc:	f004 fd29 	bl	8009922 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	425b      	negs	r3, r3
 8004eda:	441a      	add	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d207      	bcs.n	8004efc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef4:	425b      	negs	r3, r3
 8004ef6:	441a      	add	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d105      	bne.n	8004f0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004f16:	697b      	ldr	r3, [r7, #20]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d018      	beq.n	8004f64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	441a      	add	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d303      	bcc.n	8004f54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68d9      	ldr	r1, [r3, #12]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	6838      	ldr	r0, [r7, #0]
 8004f60:	f004 fcdf 	bl	8009922 <memcpy>
	}
}
 8004f64:	bf00      	nop
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f74:	f000 ffb8 	bl	8005ee8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f80:	e011      	b.n	8004fa6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d012      	beq.n	8004fb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3324      	adds	r3, #36	; 0x24
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fc1c 	bl	80057cc <xTaskRemoveFromEventList>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f9a:	f000 fcef 	bl	800597c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f9e:	7bfb      	ldrb	r3, [r7, #15]
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	dce9      	bgt.n	8004f82 <prvUnlockQueue+0x16>
 8004fae:	e000      	b.n	8004fb2 <prvUnlockQueue+0x46>
					break;
 8004fb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	22ff      	movs	r2, #255	; 0xff
 8004fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004fba:	f000 ffc3 	bl	8005f44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004fbe:	f000 ff93 	bl	8005ee8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fc8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fca:	e011      	b.n	8004ff0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d012      	beq.n	8004ffa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3310      	adds	r3, #16
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fbf7 	bl	80057cc <xTaskRemoveFromEventList>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004fe4:	f000 fcca 	bl	800597c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fe8:	7bbb      	ldrb	r3, [r7, #14]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	dce9      	bgt.n	8004fcc <prvUnlockQueue+0x60>
 8004ff8:	e000      	b.n	8004ffc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ffa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	22ff      	movs	r2, #255	; 0xff
 8005000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005004:	f000 ff9e 	bl	8005f44 <vPortExitCritical>
}
 8005008:	bf00      	nop
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005018:	f000 ff66 	bl	8005ee8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	2b00      	cmp	r3, #0
 8005022:	d102      	bne.n	800502a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005024:	2301      	movs	r3, #1
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	e001      	b.n	800502e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800502a:	2300      	movs	r3, #0
 800502c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800502e:	f000 ff89 	bl	8005f44 <vPortExitCritical>

	return xReturn;
 8005032:	68fb      	ldr	r3, [r7, #12]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005044:	f000 ff50 	bl	8005ee8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005050:	429a      	cmp	r2, r3
 8005052:	d102      	bne.n	800505a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005054:	2301      	movs	r3, #1
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	e001      	b.n	800505e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800505a:	2300      	movs	r3, #0
 800505c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800505e:	f000 ff71 	bl	8005f44 <vPortExitCritical>

	return xReturn;
 8005062:	68fb      	ldr	r3, [r7, #12]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005074:	2300      	movs	r3, #0
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	e016      	b.n	80050a8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800507a:	4a0f      	ldr	r2, [pc, #60]	; (80050b8 <vQueueUnregisterQueue+0x4c>)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	4413      	add	r3, r2
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	429a      	cmp	r2, r3
 8005088:	d10b      	bne.n	80050a2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800508a:	4a0b      	ldr	r2, [pc, #44]	; (80050b8 <vQueueUnregisterQueue+0x4c>)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2100      	movs	r1, #0
 8005090:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005094:	4a08      	ldr	r2, [pc, #32]	; (80050b8 <vQueueUnregisterQueue+0x4c>)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	4413      	add	r3, r2
 800509c:	2200      	movs	r2, #0
 800509e:	605a      	str	r2, [r3, #4]
				break;
 80050a0:	e005      	b.n	80050ae <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	3301      	adds	r3, #1
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b07      	cmp	r3, #7
 80050ac:	d9e5      	bls.n	800507a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80050ae:	bf00      	nop
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc80      	pop	{r7}
 80050b6:	4770      	bx	lr
 80050b8:	200010d0 	.word	0x200010d0

080050bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08c      	sub	sp, #48	; 0x30
 80050c0:	af04      	add	r7, sp, #16
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	4613      	mov	r3, r2
 80050ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050cc:	88fb      	ldrh	r3, [r7, #6]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 ffff 	bl	80060d4 <pvPortMalloc>
 80050d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00e      	beq.n	80050fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80050de:	2054      	movs	r0, #84	; 0x54
 80050e0:	f000 fff8 	bl	80060d4 <pvPortMalloc>
 80050e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	631a      	str	r2, [r3, #48]	; 0x30
 80050f2:	e005      	b.n	8005100 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050f4:	6978      	ldr	r0, [r7, #20]
 80050f6:	f001 f8af 	bl	8006258 <vPortFree>
 80050fa:	e001      	b.n	8005100 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050fc:	2300      	movs	r3, #0
 80050fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d013      	beq.n	800512e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005106:	88fa      	ldrh	r2, [r7, #6]
 8005108:	2300      	movs	r3, #0
 800510a:	9303      	str	r3, [sp, #12]
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	9302      	str	r3, [sp, #8]
 8005110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005112:	9301      	str	r3, [sp, #4]
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	68b9      	ldr	r1, [r7, #8]
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 f80e 	bl	800513e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005122:	69f8      	ldr	r0, [r7, #28]
 8005124:	f000 f88a 	bl	800523c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005128:	2301      	movs	r3, #1
 800512a:	61bb      	str	r3, [r7, #24]
 800512c:	e002      	b.n	8005134 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800512e:	f04f 33ff 	mov.w	r3, #4294967295
 8005132:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005134:	69bb      	ldr	r3, [r7, #24]
	}
 8005136:	4618      	mov	r0, r3
 8005138:	3720      	adds	r7, #32
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b088      	sub	sp, #32
 8005142:	af00      	add	r7, sp, #0
 8005144:	60f8      	str	r0, [r7, #12]
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	607a      	str	r2, [r7, #4]
 800514a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005156:	3b01      	subs	r3, #1
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	f023 0307 	bic.w	r3, r3, #7
 8005164:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	2b00      	cmp	r3, #0
 800516e:	d009      	beq.n	8005184 <prvInitialiseNewTask+0x46>
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	617b      	str	r3, [r7, #20]
 8005182:	e7fe      	b.n	8005182 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005184:	2300      	movs	r3, #0
 8005186:	61fb      	str	r3, [r7, #28]
 8005188:	e012      	b.n	80051b0 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	4413      	add	r3, r2
 8005190:	7819      	ldrb	r1, [r3, #0]
 8005192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	4413      	add	r3, r2
 8005198:	3334      	adds	r3, #52	; 0x34
 800519a:	460a      	mov	r2, r1
 800519c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	4413      	add	r3, r2
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d006      	beq.n	80051b8 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	3301      	adds	r3, #1
 80051ae:	61fb      	str	r3, [r7, #28]
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	2b0f      	cmp	r3, #15
 80051b4:	d9e9      	bls.n	800518a <prvInitialiseNewTask+0x4c>
 80051b6:	e000      	b.n	80051ba <prvInitialiseNewTask+0x7c>
		{
			break;
 80051b8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c4:	2b06      	cmp	r3, #6
 80051c6:	d901      	bls.n	80051cc <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051c8:	2306      	movs	r3, #6
 80051ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051d6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80051d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051da:	2200      	movs	r2, #0
 80051dc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	3304      	adds	r3, #4
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff f842 	bl	800426c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	3318      	adds	r3, #24
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff f83d 	bl	800426c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	f1c3 0207 	rsb	r2, r3, #7
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005206:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	2200      	movs	r2, #0
 800520c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800520e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	68f9      	ldr	r1, [r7, #12]
 800521a:	69b8      	ldr	r0, [r7, #24]
 800521c:	f000 fd7a 	bl	8005d14 <pxPortInitialiseStack>
 8005220:	4602      	mov	r2, r0
 8005222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005224:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800522c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005230:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005232:	bf00      	nop
 8005234:	3720      	adds	r7, #32
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005244:	f000 fe50 	bl	8005ee8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005248:	4b2a      	ldr	r3, [pc, #168]	; (80052f4 <prvAddNewTaskToReadyList+0xb8>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3301      	adds	r3, #1
 800524e:	4a29      	ldr	r2, [pc, #164]	; (80052f4 <prvAddNewTaskToReadyList+0xb8>)
 8005250:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005252:	4b29      	ldr	r3, [pc, #164]	; (80052f8 <prvAddNewTaskToReadyList+0xbc>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d109      	bne.n	800526e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800525a:	4a27      	ldr	r2, [pc, #156]	; (80052f8 <prvAddNewTaskToReadyList+0xbc>)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005260:	4b24      	ldr	r3, [pc, #144]	; (80052f4 <prvAddNewTaskToReadyList+0xb8>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d110      	bne.n	800528a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005268:	f000 fbac 	bl	80059c4 <prvInitialiseTaskLists>
 800526c:	e00d      	b.n	800528a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800526e:	4b23      	ldr	r3, [pc, #140]	; (80052fc <prvAddNewTaskToReadyList+0xc0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d109      	bne.n	800528a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005276:	4b20      	ldr	r3, [pc, #128]	; (80052f8 <prvAddNewTaskToReadyList+0xbc>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005280:	429a      	cmp	r2, r3
 8005282:	d802      	bhi.n	800528a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005284:	4a1c      	ldr	r2, [pc, #112]	; (80052f8 <prvAddNewTaskToReadyList+0xbc>)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800528a:	4b1d      	ldr	r3, [pc, #116]	; (8005300 <prvAddNewTaskToReadyList+0xc4>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3301      	adds	r3, #1
 8005290:	4a1b      	ldr	r2, [pc, #108]	; (8005300 <prvAddNewTaskToReadyList+0xc4>)
 8005292:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	2201      	movs	r2, #1
 800529a:	409a      	lsls	r2, r3
 800529c:	4b19      	ldr	r3, [pc, #100]	; (8005304 <prvAddNewTaskToReadyList+0xc8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	4a18      	ldr	r2, [pc, #96]	; (8005304 <prvAddNewTaskToReadyList+0xc8>)
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052aa:	4613      	mov	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4a15      	ldr	r2, [pc, #84]	; (8005308 <prvAddNewTaskToReadyList+0xcc>)
 80052b4:	441a      	add	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3304      	adds	r3, #4
 80052ba:	4619      	mov	r1, r3
 80052bc:	4610      	mov	r0, r2
 80052be:	f7fe ffe1 	bl	8004284 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052c2:	f000 fe3f 	bl	8005f44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052c6:	4b0d      	ldr	r3, [pc, #52]	; (80052fc <prvAddNewTaskToReadyList+0xc0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00e      	beq.n	80052ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80052ce:	4b0a      	ldr	r3, [pc, #40]	; (80052f8 <prvAddNewTaskToReadyList+0xbc>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d8:	429a      	cmp	r2, r3
 80052da:	d207      	bcs.n	80052ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052dc:	4b0b      	ldr	r3, [pc, #44]	; (800530c <prvAddNewTaskToReadyList+0xd0>)
 80052de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052ec:	bf00      	nop
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	20000304 	.word	0x20000304
 80052f8:	20000204 	.word	0x20000204
 80052fc:	20000310 	.word	0x20000310
 8005300:	20000320 	.word	0x20000320
 8005304:	2000030c 	.word	0x2000030c
 8005308:	20000208 	.word	0x20000208
 800530c:	e000ed04 	.word	0xe000ed04

08005310 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d016      	beq.n	8005350 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005322:	4b13      	ldr	r3, [pc, #76]	; (8005370 <vTaskDelay+0x60>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d009      	beq.n	800533e <vTaskDelay+0x2e>
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	60bb      	str	r3, [r7, #8]
 800533c:	e7fe      	b.n	800533c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800533e:	f000 f861 	bl	8005404 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005342:	2100      	movs	r1, #0
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fc7f 	bl	8005c48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800534a:	f000 f869 	bl	8005420 <xTaskResumeAll>
 800534e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d107      	bne.n	8005366 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005356:	4b07      	ldr	r3, [pc, #28]	; (8005374 <vTaskDelay+0x64>)
 8005358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005366:	bf00      	nop
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	2000032c 	.word	0x2000032c
 8005374:	e000ed04 	.word	0xe000ed04

08005378 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800537e:	4b1b      	ldr	r3, [pc, #108]	; (80053ec <vTaskStartScheduler+0x74>)
 8005380:	9301      	str	r3, [sp, #4]
 8005382:	2300      	movs	r3, #0
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	2300      	movs	r3, #0
 8005388:	2280      	movs	r2, #128	; 0x80
 800538a:	4919      	ldr	r1, [pc, #100]	; (80053f0 <vTaskStartScheduler+0x78>)
 800538c:	4819      	ldr	r0, [pc, #100]	; (80053f4 <vTaskStartScheduler+0x7c>)
 800538e:	f7ff fe95 	bl	80050bc <xTaskCreate>
 8005392:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d115      	bne.n	80053c6 <vTaskStartScheduler+0x4e>
 800539a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053ac:	4b12      	ldr	r3, [pc, #72]	; (80053f8 <vTaskStartScheduler+0x80>)
 80053ae:	f04f 32ff 	mov.w	r2, #4294967295
 80053b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053b4:	4b11      	ldr	r3, [pc, #68]	; (80053fc <vTaskStartScheduler+0x84>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80053ba:	4b11      	ldr	r3, [pc, #68]	; (8005400 <vTaskStartScheduler+0x88>)
 80053bc:	2200      	movs	r2, #0
 80053be:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80053c0:	f000 fd22 	bl	8005e08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80053c4:	e00d      	b.n	80053e2 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053cc:	d109      	bne.n	80053e2 <vTaskStartScheduler+0x6a>
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	607b      	str	r3, [r7, #4]
 80053e0:	e7fe      	b.n	80053e0 <vTaskStartScheduler+0x68>
}
 80053e2:	bf00      	nop
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20000328 	.word	0x20000328
 80053f0:	0800b4cc 	.word	0x0800b4cc
 80053f4:	08005995 	.word	0x08005995
 80053f8:	20000324 	.word	0x20000324
 80053fc:	20000310 	.word	0x20000310
 8005400:	20000308 	.word	0x20000308

08005404 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005404:	b480      	push	{r7}
 8005406:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005408:	4b04      	ldr	r3, [pc, #16]	; (800541c <vTaskSuspendAll+0x18>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3301      	adds	r3, #1
 800540e:	4a03      	ldr	r2, [pc, #12]	; (800541c <vTaskSuspendAll+0x18>)
 8005410:	6013      	str	r3, [r2, #0]
}
 8005412:	bf00      	nop
 8005414:	46bd      	mov	sp, r7
 8005416:	bc80      	pop	{r7}
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	2000032c 	.word	0x2000032c

08005420 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005426:	2300      	movs	r3, #0
 8005428:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800542a:	2300      	movs	r3, #0
 800542c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800542e:	4b41      	ldr	r3, [pc, #260]	; (8005534 <xTaskResumeAll+0x114>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d109      	bne.n	800544a <xTaskResumeAll+0x2a>
 8005436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543a:	f383 8811 	msr	BASEPRI, r3
 800543e:	f3bf 8f6f 	isb	sy
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	603b      	str	r3, [r7, #0]
 8005448:	e7fe      	b.n	8005448 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800544a:	f000 fd4d 	bl	8005ee8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800544e:	4b39      	ldr	r3, [pc, #228]	; (8005534 <xTaskResumeAll+0x114>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3b01      	subs	r3, #1
 8005454:	4a37      	ldr	r2, [pc, #220]	; (8005534 <xTaskResumeAll+0x114>)
 8005456:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005458:	4b36      	ldr	r3, [pc, #216]	; (8005534 <xTaskResumeAll+0x114>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d161      	bne.n	8005524 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005460:	4b35      	ldr	r3, [pc, #212]	; (8005538 <xTaskResumeAll+0x118>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d05d      	beq.n	8005524 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005468:	e02e      	b.n	80054c8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800546a:	4b34      	ldr	r3, [pc, #208]	; (800553c <xTaskResumeAll+0x11c>)
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3318      	adds	r3, #24
 8005476:	4618      	mov	r0, r3
 8005478:	f7fe ff5f 	bl	800433a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	3304      	adds	r3, #4
 8005480:	4618      	mov	r0, r3
 8005482:	f7fe ff5a 	bl	800433a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548a:	2201      	movs	r2, #1
 800548c:	409a      	lsls	r2, r3
 800548e:	4b2c      	ldr	r3, [pc, #176]	; (8005540 <xTaskResumeAll+0x120>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4313      	orrs	r3, r2
 8005494:	4a2a      	ldr	r2, [pc, #168]	; (8005540 <xTaskResumeAll+0x120>)
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4a27      	ldr	r2, [pc, #156]	; (8005544 <xTaskResumeAll+0x124>)
 80054a6:	441a      	add	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3304      	adds	r3, #4
 80054ac:	4619      	mov	r1, r3
 80054ae:	4610      	mov	r0, r2
 80054b0:	f7fe fee8 	bl	8004284 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b8:	4b23      	ldr	r3, [pc, #140]	; (8005548 <xTaskResumeAll+0x128>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	429a      	cmp	r2, r3
 80054c0:	d302      	bcc.n	80054c8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80054c2:	4b22      	ldr	r3, [pc, #136]	; (800554c <xTaskResumeAll+0x12c>)
 80054c4:	2201      	movs	r2, #1
 80054c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054c8:	4b1c      	ldr	r3, [pc, #112]	; (800553c <xTaskResumeAll+0x11c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1cc      	bne.n	800546a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80054d6:	f000 faf1 	bl	8005abc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80054da:	4b1d      	ldr	r3, [pc, #116]	; (8005550 <xTaskResumeAll+0x130>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d010      	beq.n	8005508 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80054e6:	f000 f837 	bl	8005558 <xTaskIncrementTick>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80054f0:	4b16      	ldr	r3, [pc, #88]	; (800554c <xTaskResumeAll+0x12c>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	3b01      	subs	r3, #1
 80054fa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1f1      	bne.n	80054e6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005502:	4b13      	ldr	r3, [pc, #76]	; (8005550 <xTaskResumeAll+0x130>)
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005508:	4b10      	ldr	r3, [pc, #64]	; (800554c <xTaskResumeAll+0x12c>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d009      	beq.n	8005524 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005510:	2301      	movs	r3, #1
 8005512:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005514:	4b0f      	ldr	r3, [pc, #60]	; (8005554 <xTaskResumeAll+0x134>)
 8005516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005524:	f000 fd0e 	bl	8005f44 <vPortExitCritical>

	return xAlreadyYielded;
 8005528:	68bb      	ldr	r3, [r7, #8]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	2000032c 	.word	0x2000032c
 8005538:	20000304 	.word	0x20000304
 800553c:	200002c4 	.word	0x200002c4
 8005540:	2000030c 	.word	0x2000030c
 8005544:	20000208 	.word	0x20000208
 8005548:	20000204 	.word	0x20000204
 800554c:	20000318 	.word	0x20000318
 8005550:	20000314 	.word	0x20000314
 8005554:	e000ed04 	.word	0xe000ed04

08005558 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005562:	4b50      	ldr	r3, [pc, #320]	; (80056a4 <xTaskIncrementTick+0x14c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	f040 808c 	bne.w	8005684 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800556c:	4b4e      	ldr	r3, [pc, #312]	; (80056a8 <xTaskIncrementTick+0x150>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3301      	adds	r3, #1
 8005572:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005574:	4a4c      	ldr	r2, [pc, #304]	; (80056a8 <xTaskIncrementTick+0x150>)
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d11f      	bne.n	80055c0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005580:	4b4a      	ldr	r3, [pc, #296]	; (80056ac <xTaskIncrementTick+0x154>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d009      	beq.n	800559e <xTaskIncrementTick+0x46>
 800558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	e7fe      	b.n	800559c <xTaskIncrementTick+0x44>
 800559e:	4b43      	ldr	r3, [pc, #268]	; (80056ac <xTaskIncrementTick+0x154>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	4b42      	ldr	r3, [pc, #264]	; (80056b0 <xTaskIncrementTick+0x158>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a40      	ldr	r2, [pc, #256]	; (80056ac <xTaskIncrementTick+0x154>)
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	4a40      	ldr	r2, [pc, #256]	; (80056b0 <xTaskIncrementTick+0x158>)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6013      	str	r3, [r2, #0]
 80055b2:	4b40      	ldr	r3, [pc, #256]	; (80056b4 <xTaskIncrementTick+0x15c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3301      	adds	r3, #1
 80055b8:	4a3e      	ldr	r2, [pc, #248]	; (80056b4 <xTaskIncrementTick+0x15c>)
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	f000 fa7e 	bl	8005abc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80055c0:	4b3d      	ldr	r3, [pc, #244]	; (80056b8 <xTaskIncrementTick+0x160>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d34d      	bcc.n	8005666 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055ca:	4b38      	ldr	r3, [pc, #224]	; (80056ac <xTaskIncrementTick+0x154>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <xTaskIncrementTick+0x80>
 80055d4:	2301      	movs	r3, #1
 80055d6:	e000      	b.n	80055da <xTaskIncrementTick+0x82>
 80055d8:	2300      	movs	r3, #0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d004      	beq.n	80055e8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055de:	4b36      	ldr	r3, [pc, #216]	; (80056b8 <xTaskIncrementTick+0x160>)
 80055e0:	f04f 32ff 	mov.w	r2, #4294967295
 80055e4:	601a      	str	r2, [r3, #0]
					break;
 80055e6:	e03e      	b.n	8005666 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80055e8:	4b30      	ldr	r3, [pc, #192]	; (80056ac <xTaskIncrementTick+0x154>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d203      	bcs.n	8005608 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005600:	4a2d      	ldr	r2, [pc, #180]	; (80056b8 <xTaskIncrementTick+0x160>)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6013      	str	r3, [r2, #0]
						break;
 8005606:	e02e      	b.n	8005666 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	3304      	adds	r3, #4
 800560c:	4618      	mov	r0, r3
 800560e:	f7fe fe94 	bl	800433a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005616:	2b00      	cmp	r3, #0
 8005618:	d004      	beq.n	8005624 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	3318      	adds	r3, #24
 800561e:	4618      	mov	r0, r3
 8005620:	f7fe fe8b 	bl	800433a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005628:	2201      	movs	r2, #1
 800562a:	409a      	lsls	r2, r3
 800562c:	4b23      	ldr	r3, [pc, #140]	; (80056bc <xTaskIncrementTick+0x164>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4313      	orrs	r3, r2
 8005632:	4a22      	ldr	r2, [pc, #136]	; (80056bc <xTaskIncrementTick+0x164>)
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563a:	4613      	mov	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4a1f      	ldr	r2, [pc, #124]	; (80056c0 <xTaskIncrementTick+0x168>)
 8005644:	441a      	add	r2, r3
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	3304      	adds	r3, #4
 800564a:	4619      	mov	r1, r3
 800564c:	4610      	mov	r0, r2
 800564e:	f7fe fe19 	bl	8004284 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005656:	4b1b      	ldr	r3, [pc, #108]	; (80056c4 <xTaskIncrementTick+0x16c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565c:	429a      	cmp	r2, r3
 800565e:	d3b4      	bcc.n	80055ca <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005660:	2301      	movs	r3, #1
 8005662:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005664:	e7b1      	b.n	80055ca <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005666:	4b17      	ldr	r3, [pc, #92]	; (80056c4 <xTaskIncrementTick+0x16c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566c:	4914      	ldr	r1, [pc, #80]	; (80056c0 <xTaskIncrementTick+0x168>)
 800566e:	4613      	mov	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	440b      	add	r3, r1
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d907      	bls.n	800568e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800567e:	2301      	movs	r3, #1
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	e004      	b.n	800568e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005684:	4b10      	ldr	r3, [pc, #64]	; (80056c8 <xTaskIncrementTick+0x170>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3301      	adds	r3, #1
 800568a:	4a0f      	ldr	r2, [pc, #60]	; (80056c8 <xTaskIncrementTick+0x170>)
 800568c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800568e:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <xTaskIncrementTick+0x174>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8005696:	2301      	movs	r3, #1
 8005698:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800569a:	697b      	ldr	r3, [r7, #20]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	2000032c 	.word	0x2000032c
 80056a8:	20000308 	.word	0x20000308
 80056ac:	200002bc 	.word	0x200002bc
 80056b0:	200002c0 	.word	0x200002c0
 80056b4:	2000031c 	.word	0x2000031c
 80056b8:	20000324 	.word	0x20000324
 80056bc:	2000030c 	.word	0x2000030c
 80056c0:	20000208 	.word	0x20000208
 80056c4:	20000204 	.word	0x20000204
 80056c8:	20000314 	.word	0x20000314
 80056cc:	20000318 	.word	0x20000318

080056d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056d6:	4b26      	ldr	r3, [pc, #152]	; (8005770 <vTaskSwitchContext+0xa0>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80056de:	4b25      	ldr	r3, [pc, #148]	; (8005774 <vTaskSwitchContext+0xa4>)
 80056e0:	2201      	movs	r2, #1
 80056e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80056e4:	e03e      	b.n	8005764 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80056e6:	4b23      	ldr	r3, [pc, #140]	; (8005774 <vTaskSwitchContext+0xa4>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80056ec:	4b22      	ldr	r3, [pc, #136]	; (8005778 <vTaskSwitchContext+0xa8>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	fab3 f383 	clz	r3, r3
 80056f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80056fa:	7afb      	ldrb	r3, [r7, #11]
 80056fc:	f1c3 031f 	rsb	r3, r3, #31
 8005700:	617b      	str	r3, [r7, #20]
 8005702:	491e      	ldr	r1, [pc, #120]	; (800577c <vTaskSwitchContext+0xac>)
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	4613      	mov	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	440b      	add	r3, r1
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d109      	bne.n	800572a <vTaskSwitchContext+0x5a>
	__asm volatile
 8005716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	607b      	str	r3, [r7, #4]
 8005728:	e7fe      	b.n	8005728 <vTaskSwitchContext+0x58>
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4613      	mov	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4a11      	ldr	r2, [pc, #68]	; (800577c <vTaskSwitchContext+0xac>)
 8005736:	4413      	add	r3, r2
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	605a      	str	r2, [r3, #4]
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	3308      	adds	r3, #8
 800574c:	429a      	cmp	r2, r3
 800574e:	d104      	bne.n	800575a <vTaskSwitchContext+0x8a>
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	605a      	str	r2, [r3, #4]
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	4a07      	ldr	r2, [pc, #28]	; (8005780 <vTaskSwitchContext+0xb0>)
 8005762:	6013      	str	r3, [r2, #0]
}
 8005764:	bf00      	nop
 8005766:	371c      	adds	r7, #28
 8005768:	46bd      	mov	sp, r7
 800576a:	bc80      	pop	{r7}
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	2000032c 	.word	0x2000032c
 8005774:	20000318 	.word	0x20000318
 8005778:	2000030c 	.word	0x2000030c
 800577c:	20000208 	.word	0x20000208
 8005780:	20000204 	.word	0x20000204

08005784 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d109      	bne.n	80057a8 <vTaskPlaceOnEventList+0x24>
 8005794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	e7fe      	b.n	80057a6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057a8:	4b07      	ldr	r3, [pc, #28]	; (80057c8 <vTaskPlaceOnEventList+0x44>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3318      	adds	r3, #24
 80057ae:	4619      	mov	r1, r3
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f7fe fd8a 	bl	80042ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057b6:	2101      	movs	r1, #1
 80057b8:	6838      	ldr	r0, [r7, #0]
 80057ba:	f000 fa45 	bl	8005c48 <prvAddCurrentTaskToDelayedList>
}
 80057be:	bf00      	nop
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	20000204 	.word	0x20000204

080057cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d109      	bne.n	80057f6 <xTaskRemoveFromEventList+0x2a>
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	e7fe      	b.n	80057f4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	3318      	adds	r3, #24
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe fd9d 	bl	800433a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005800:	4b1d      	ldr	r3, [pc, #116]	; (8005878 <xTaskRemoveFromEventList+0xac>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d11c      	bne.n	8005842 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	3304      	adds	r3, #4
 800580c:	4618      	mov	r0, r3
 800580e:	f7fe fd94 	bl	800433a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005816:	2201      	movs	r2, #1
 8005818:	409a      	lsls	r2, r3
 800581a:	4b18      	ldr	r3, [pc, #96]	; (800587c <xTaskRemoveFromEventList+0xb0>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4313      	orrs	r3, r2
 8005820:	4a16      	ldr	r2, [pc, #88]	; (800587c <xTaskRemoveFromEventList+0xb0>)
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4a13      	ldr	r2, [pc, #76]	; (8005880 <xTaskRemoveFromEventList+0xb4>)
 8005832:	441a      	add	r2, r3
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	3304      	adds	r3, #4
 8005838:	4619      	mov	r1, r3
 800583a:	4610      	mov	r0, r2
 800583c:	f7fe fd22 	bl	8004284 <vListInsertEnd>
 8005840:	e005      	b.n	800584e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	3318      	adds	r3, #24
 8005846:	4619      	mov	r1, r3
 8005848:	480e      	ldr	r0, [pc, #56]	; (8005884 <xTaskRemoveFromEventList+0xb8>)
 800584a:	f7fe fd1b 	bl	8004284 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005852:	4b0d      	ldr	r3, [pc, #52]	; (8005888 <xTaskRemoveFromEventList+0xbc>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005858:	429a      	cmp	r2, r3
 800585a:	d905      	bls.n	8005868 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800585c:	2301      	movs	r3, #1
 800585e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005860:	4b0a      	ldr	r3, [pc, #40]	; (800588c <xTaskRemoveFromEventList+0xc0>)
 8005862:	2201      	movs	r2, #1
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	e001      	b.n	800586c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800586c:	697b      	ldr	r3, [r7, #20]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	2000032c 	.word	0x2000032c
 800587c:	2000030c 	.word	0x2000030c
 8005880:	20000208 	.word	0x20000208
 8005884:	200002c4 	.word	0x200002c4
 8005888:	20000204 	.word	0x20000204
 800588c:	20000318 	.word	0x20000318

08005890 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005898:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <vTaskInternalSetTimeOutState+0x24>)
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80058a0:	4b05      	ldr	r3, [pc, #20]	; (80058b8 <vTaskInternalSetTimeOutState+0x28>)
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	605a      	str	r2, [r3, #4]
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bc80      	pop	{r7}
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	2000031c 	.word	0x2000031c
 80058b8:	20000308 	.word	0x20000308

080058bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b088      	sub	sp, #32
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d109      	bne.n	80058e0 <xTaskCheckForTimeOut+0x24>
 80058cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	613b      	str	r3, [r7, #16]
 80058de:	e7fe      	b.n	80058de <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d109      	bne.n	80058fa <xTaskCheckForTimeOut+0x3e>
 80058e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	e7fe      	b.n	80058f8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80058fa:	f000 faf5 	bl	8005ee8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058fe:	4b1d      	ldr	r3, [pc, #116]	; (8005974 <xTaskCheckForTimeOut+0xb8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005916:	d102      	bne.n	800591e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005918:	2300      	movs	r3, #0
 800591a:	61fb      	str	r3, [r7, #28]
 800591c:	e023      	b.n	8005966 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	4b15      	ldr	r3, [pc, #84]	; (8005978 <xTaskCheckForTimeOut+0xbc>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d007      	beq.n	800593a <xTaskCheckForTimeOut+0x7e>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	429a      	cmp	r2, r3
 8005932:	d302      	bcc.n	800593a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005934:	2301      	movs	r3, #1
 8005936:	61fb      	str	r3, [r7, #28]
 8005938:	e015      	b.n	8005966 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	429a      	cmp	r2, r3
 8005942:	d20b      	bcs.n	800595c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	1ad2      	subs	r2, r2, r3
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7ff ff9d 	bl	8005890 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005956:	2300      	movs	r3, #0
 8005958:	61fb      	str	r3, [r7, #28]
 800595a:	e004      	b.n	8005966 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2200      	movs	r2, #0
 8005960:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005962:	2301      	movs	r3, #1
 8005964:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005966:	f000 faed 	bl	8005f44 <vPortExitCritical>

	return xReturn;
 800596a:	69fb      	ldr	r3, [r7, #28]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3720      	adds	r7, #32
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	20000308 	.word	0x20000308
 8005978:	2000031c 	.word	0x2000031c

0800597c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005980:	4b03      	ldr	r3, [pc, #12]	; (8005990 <vTaskMissedYield+0x14>)
 8005982:	2201      	movs	r2, #1
 8005984:	601a      	str	r2, [r3, #0]
}
 8005986:	bf00      	nop
 8005988:	46bd      	mov	sp, r7
 800598a:	bc80      	pop	{r7}
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	20000318 	.word	0x20000318

08005994 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800599c:	f000 f852 	bl	8005a44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059a0:	4b06      	ldr	r3, [pc, #24]	; (80059bc <prvIdleTask+0x28>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d9f9      	bls.n	800599c <prvIdleTask+0x8>
			{
				taskYIELD();
 80059a8:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <prvIdleTask+0x2c>)
 80059aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059b8:	e7f0      	b.n	800599c <prvIdleTask+0x8>
 80059ba:	bf00      	nop
 80059bc:	20000208 	.word	0x20000208
 80059c0:	e000ed04 	.word	0xe000ed04

080059c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059ca:	2300      	movs	r3, #0
 80059cc:	607b      	str	r3, [r7, #4]
 80059ce:	e00c      	b.n	80059ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	4613      	mov	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4a12      	ldr	r2, [pc, #72]	; (8005a24 <prvInitialiseTaskLists+0x60>)
 80059dc:	4413      	add	r3, r2
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fe fc25 	bl	800422e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	3301      	adds	r3, #1
 80059e8:	607b      	str	r3, [r7, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b06      	cmp	r3, #6
 80059ee:	d9ef      	bls.n	80059d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059f0:	480d      	ldr	r0, [pc, #52]	; (8005a28 <prvInitialiseTaskLists+0x64>)
 80059f2:	f7fe fc1c 	bl	800422e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059f6:	480d      	ldr	r0, [pc, #52]	; (8005a2c <prvInitialiseTaskLists+0x68>)
 80059f8:	f7fe fc19 	bl	800422e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059fc:	480c      	ldr	r0, [pc, #48]	; (8005a30 <prvInitialiseTaskLists+0x6c>)
 80059fe:	f7fe fc16 	bl	800422e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a02:	480c      	ldr	r0, [pc, #48]	; (8005a34 <prvInitialiseTaskLists+0x70>)
 8005a04:	f7fe fc13 	bl	800422e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a08:	480b      	ldr	r0, [pc, #44]	; (8005a38 <prvInitialiseTaskLists+0x74>)
 8005a0a:	f7fe fc10 	bl	800422e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a0e:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <prvInitialiseTaskLists+0x78>)
 8005a10:	4a05      	ldr	r2, [pc, #20]	; (8005a28 <prvInitialiseTaskLists+0x64>)
 8005a12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a14:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <prvInitialiseTaskLists+0x7c>)
 8005a16:	4a05      	ldr	r2, [pc, #20]	; (8005a2c <prvInitialiseTaskLists+0x68>)
 8005a18:	601a      	str	r2, [r3, #0]
}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20000208 	.word	0x20000208
 8005a28:	20000294 	.word	0x20000294
 8005a2c:	200002a8 	.word	0x200002a8
 8005a30:	200002c4 	.word	0x200002c4
 8005a34:	200002d8 	.word	0x200002d8
 8005a38:	200002f0 	.word	0x200002f0
 8005a3c:	200002bc 	.word	0x200002bc
 8005a40:	200002c0 	.word	0x200002c0

08005a44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a4a:	e019      	b.n	8005a80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a4c:	f000 fa4c 	bl	8005ee8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005a50:	4b0f      	ldr	r3, [pc, #60]	; (8005a90 <prvCheckTasksWaitingTermination+0x4c>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fe fc6c 	bl	800433a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a62:	4b0c      	ldr	r3, [pc, #48]	; (8005a94 <prvCheckTasksWaitingTermination+0x50>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	4a0a      	ldr	r2, [pc, #40]	; (8005a94 <prvCheckTasksWaitingTermination+0x50>)
 8005a6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a6c:	4b0a      	ldr	r3, [pc, #40]	; (8005a98 <prvCheckTasksWaitingTermination+0x54>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	4a09      	ldr	r2, [pc, #36]	; (8005a98 <prvCheckTasksWaitingTermination+0x54>)
 8005a74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a76:	f000 fa65 	bl	8005f44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f80e 	bl	8005a9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a80:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <prvCheckTasksWaitingTermination+0x54>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1e1      	bne.n	8005a4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a88:	bf00      	nop
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	200002d8 	.word	0x200002d8
 8005a94:	20000304 	.word	0x20000304
 8005a98:	200002ec 	.word	0x200002ec

08005a9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fbd5 	bl	8006258 <vPortFree>
			vPortFree( pxTCB );
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fbd2 	bl	8006258 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ab4:	bf00      	nop
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ac2:	4b0e      	ldr	r3, [pc, #56]	; (8005afc <prvResetNextTaskUnblockTime+0x40>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <prvResetNextTaskUnblockTime+0x14>
 8005acc:	2301      	movs	r3, #1
 8005ace:	e000      	b.n	8005ad2 <prvResetNextTaskUnblockTime+0x16>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d004      	beq.n	8005ae0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ad6:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <prvResetNextTaskUnblockTime+0x44>)
 8005ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8005adc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ade:	e008      	b.n	8005af2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ae0:	4b06      	ldr	r3, [pc, #24]	; (8005afc <prvResetNextTaskUnblockTime+0x40>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	4a04      	ldr	r2, [pc, #16]	; (8005b00 <prvResetNextTaskUnblockTime+0x44>)
 8005af0:	6013      	str	r3, [r2, #0]
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bc80      	pop	{r7}
 8005afa:	4770      	bx	lr
 8005afc:	200002bc 	.word	0x200002bc
 8005b00:	20000324 	.word	0x20000324

08005b04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b0a:	4b0b      	ldr	r3, [pc, #44]	; (8005b38 <xTaskGetSchedulerState+0x34>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d102      	bne.n	8005b18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b12:	2301      	movs	r3, #1
 8005b14:	607b      	str	r3, [r7, #4]
 8005b16:	e008      	b.n	8005b2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b18:	4b08      	ldr	r3, [pc, #32]	; (8005b3c <xTaskGetSchedulerState+0x38>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d102      	bne.n	8005b26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b20:	2302      	movs	r3, #2
 8005b22:	607b      	str	r3, [r7, #4]
 8005b24:	e001      	b.n	8005b2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b26:	2300      	movs	r3, #0
 8005b28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b2a:	687b      	ldr	r3, [r7, #4]
	}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bc80      	pop	{r7}
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	20000310 	.word	0x20000310
 8005b3c:	2000032c 	.word	0x2000032c

08005b40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d06c      	beq.n	8005c30 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b56:	4b39      	ldr	r3, [pc, #228]	; (8005c3c <xTaskPriorityDisinherit+0xfc>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d009      	beq.n	8005b74 <xTaskPriorityDisinherit+0x34>
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	60fb      	str	r3, [r7, #12]
 8005b72:	e7fe      	b.n	8005b72 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d109      	bne.n	8005b90 <xTaskPriorityDisinherit+0x50>
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	60bb      	str	r3, [r7, #8]
 8005b8e:	e7fe      	b.n	8005b8e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b94:	1e5a      	subs	r2, r3, #1
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d044      	beq.n	8005c30 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d140      	bne.n	8005c30 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fe fbc1 	bl	800433a <uxListRemove>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d115      	bne.n	8005bea <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc2:	491f      	ldr	r1, [pc, #124]	; (8005c40 <xTaskPriorityDisinherit+0x100>)
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	440b      	add	r3, r1
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10a      	bne.n	8005bea <xTaskPriorityDisinherit+0xaa>
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	2201      	movs	r2, #1
 8005bda:	fa02 f303 	lsl.w	r3, r2, r3
 8005bde:	43da      	mvns	r2, r3
 8005be0:	4b18      	ldr	r3, [pc, #96]	; (8005c44 <xTaskPriorityDisinherit+0x104>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4013      	ands	r3, r2
 8005be6:	4a17      	ldr	r2, [pc, #92]	; (8005c44 <xTaskPriorityDisinherit+0x104>)
 8005be8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf6:	f1c3 0207 	rsb	r2, r3, #7
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c02:	2201      	movs	r2, #1
 8005c04:	409a      	lsls	r2, r3
 8005c06:	4b0f      	ldr	r3, [pc, #60]	; (8005c44 <xTaskPriorityDisinherit+0x104>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	4a0d      	ldr	r2, [pc, #52]	; (8005c44 <xTaskPriorityDisinherit+0x104>)
 8005c0e:	6013      	str	r3, [r2, #0]
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c14:	4613      	mov	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4a08      	ldr	r2, [pc, #32]	; (8005c40 <xTaskPriorityDisinherit+0x100>)
 8005c1e:	441a      	add	r2, r3
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	3304      	adds	r3, #4
 8005c24:	4619      	mov	r1, r3
 8005c26:	4610      	mov	r0, r2
 8005c28:	f7fe fb2c 	bl	8004284 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c30:	697b      	ldr	r3, [r7, #20]
	}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20000204 	.word	0x20000204
 8005c40:	20000208 	.word	0x20000208
 8005c44:	2000030c 	.word	0x2000030c

08005c48 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c52:	4b29      	ldr	r3, [pc, #164]	; (8005cf8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c58:	4b28      	ldr	r3, [pc, #160]	; (8005cfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fe fb6b 	bl	800433a <uxListRemove>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10b      	bne.n	8005c82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005c6a:	4b24      	ldr	r3, [pc, #144]	; (8005cfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c70:	2201      	movs	r2, #1
 8005c72:	fa02 f303 	lsl.w	r3, r2, r3
 8005c76:	43da      	mvns	r2, r3
 8005c78:	4b21      	ldr	r3, [pc, #132]	; (8005d00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	4a20      	ldr	r2, [pc, #128]	; (8005d00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c88:	d10a      	bne.n	8005ca0 <prvAddCurrentTaskToDelayedList+0x58>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d007      	beq.n	8005ca0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c90:	4b1a      	ldr	r3, [pc, #104]	; (8005cfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3304      	adds	r3, #4
 8005c96:	4619      	mov	r1, r3
 8005c98:	481a      	ldr	r0, [pc, #104]	; (8005d04 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005c9a:	f7fe faf3 	bl	8004284 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c9e:	e026      	b.n	8005cee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ca8:	4b14      	ldr	r3, [pc, #80]	; (8005cfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d209      	bcs.n	8005ccc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cb8:	4b13      	ldr	r3, [pc, #76]	; (8005d08 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	4b0f      	ldr	r3, [pc, #60]	; (8005cfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	f7fe fb00 	bl	80042ca <vListInsert>
}
 8005cca:	e010      	b.n	8005cee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ccc:	4b0f      	ldr	r3, [pc, #60]	; (8005d0c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	4b0a      	ldr	r3, [pc, #40]	; (8005cfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	4610      	mov	r0, r2
 8005cda:	f7fe faf6 	bl	80042ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005cde:	4b0c      	ldr	r3, [pc, #48]	; (8005d10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d202      	bcs.n	8005cee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005ce8:	4a09      	ldr	r2, [pc, #36]	; (8005d10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	6013      	str	r3, [r2, #0]
}
 8005cee:	bf00      	nop
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000308 	.word	0x20000308
 8005cfc:	20000204 	.word	0x20000204
 8005d00:	2000030c 	.word	0x2000030c
 8005d04:	200002f0 	.word	0x200002f0
 8005d08:	200002c0 	.word	0x200002c0
 8005d0c:	200002bc 	.word	0x200002bc
 8005d10:	20000324 	.word	0x20000324

08005d14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	3b04      	subs	r3, #4
 8005d24:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	3b04      	subs	r3, #4
 8005d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f023 0201 	bic.w	r2, r3, #1
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3b04      	subs	r3, #4
 8005d42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d44:	4a08      	ldr	r2, [pc, #32]	; (8005d68 <pxPortInitialiseStack+0x54>)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	3b14      	subs	r3, #20
 8005d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	3b20      	subs	r3, #32
 8005d5a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bc80      	pop	{r7}
 8005d66:	4770      	bx	lr
 8005d68:	08005d6d 	.word	0x08005d6d

08005d6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005d72:	2300      	movs	r3, #0
 8005d74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d76:	4b10      	ldr	r3, [pc, #64]	; (8005db8 <prvTaskExitError+0x4c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7e:	d009      	beq.n	8005d94 <prvTaskExitError+0x28>
 8005d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	e7fe      	b.n	8005d92 <prvTaskExitError+0x26>
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005da6:	bf00      	nop
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0fc      	beq.n	8005da8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005dae:	bf00      	nop
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bc80      	pop	{r7}
 8005db6:	4770      	bx	lr
 8005db8:	20000008 	.word	0x20000008
 8005dbc:	00000000 	.word	0x00000000

08005dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005dc0:	4b07      	ldr	r3, [pc, #28]	; (8005de0 <pxCurrentTCBConst2>)
 8005dc2:	6819      	ldr	r1, [r3, #0]
 8005dc4:	6808      	ldr	r0, [r1, #0]
 8005dc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005dca:	f380 8809 	msr	PSP, r0
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f04f 0000 	mov.w	r0, #0
 8005dd6:	f380 8811 	msr	BASEPRI, r0
 8005dda:	f04e 0e0d 	orr.w	lr, lr, #13
 8005dde:	4770      	bx	lr

08005de0 <pxCurrentTCBConst2>:
 8005de0:	20000204 	.word	0x20000204
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005de4:	bf00      	nop
 8005de6:	bf00      	nop

08005de8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005de8:	4806      	ldr	r0, [pc, #24]	; (8005e04 <prvPortStartFirstTask+0x1c>)
 8005dea:	6800      	ldr	r0, [r0, #0]
 8005dec:	6800      	ldr	r0, [r0, #0]
 8005dee:	f380 8808 	msr	MSP, r0
 8005df2:	b662      	cpsie	i
 8005df4:	b661      	cpsie	f
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	df00      	svc	0
 8005e00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e02:	bf00      	nop
 8005e04:	e000ed08 	.word	0xe000ed08

08005e08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e0e:	4b31      	ldr	r3, [pc, #196]	; (8005ed4 <xPortStartScheduler+0xcc>)
 8005e10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	22ff      	movs	r2, #255	; 0xff
 8005e1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	4b29      	ldr	r3, [pc, #164]	; (8005ed8 <xPortStartScheduler+0xd0>)
 8005e34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e36:	4b29      	ldr	r3, [pc, #164]	; (8005edc <xPortStartScheduler+0xd4>)
 8005e38:	2207      	movs	r2, #7
 8005e3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e3c:	e009      	b.n	8005e52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005e3e:	4b27      	ldr	r3, [pc, #156]	; (8005edc <xPortStartScheduler+0xd4>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	4a25      	ldr	r2, [pc, #148]	; (8005edc <xPortStartScheduler+0xd4>)
 8005e46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e48:	78fb      	ldrb	r3, [r7, #3]
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	005b      	lsls	r3, r3, #1
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e52:	78fb      	ldrb	r3, [r7, #3]
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e5a:	2b80      	cmp	r3, #128	; 0x80
 8005e5c:	d0ef      	beq.n	8005e3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e5e:	4b1f      	ldr	r3, [pc, #124]	; (8005edc <xPortStartScheduler+0xd4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f1c3 0307 	rsb	r3, r3, #7
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d009      	beq.n	8005e7e <xPortStartScheduler+0x76>
 8005e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	60bb      	str	r3, [r7, #8]
 8005e7c:	e7fe      	b.n	8005e7c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e7e:	4b17      	ldr	r3, [pc, #92]	; (8005edc <xPortStartScheduler+0xd4>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	021b      	lsls	r3, r3, #8
 8005e84:	4a15      	ldr	r2, [pc, #84]	; (8005edc <xPortStartScheduler+0xd4>)
 8005e86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e88:	4b14      	ldr	r3, [pc, #80]	; (8005edc <xPortStartScheduler+0xd4>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e90:	4a12      	ldr	r2, [pc, #72]	; (8005edc <xPortStartScheduler+0xd4>)
 8005e92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e9c:	4b10      	ldr	r3, [pc, #64]	; (8005ee0 <xPortStartScheduler+0xd8>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a0f      	ldr	r2, [pc, #60]	; (8005ee0 <xPortStartScheduler+0xd8>)
 8005ea2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ea6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ea8:	4b0d      	ldr	r3, [pc, #52]	; (8005ee0 <xPortStartScheduler+0xd8>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a0c      	ldr	r2, [pc, #48]	; (8005ee0 <xPortStartScheduler+0xd8>)
 8005eae:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005eb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005eb4:	f000 f8b0 	bl	8006018 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005eb8:	4b0a      	ldr	r3, [pc, #40]	; (8005ee4 <xPortStartScheduler+0xdc>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ebe:	f7ff ff93 	bl	8005de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ec2:	f7ff fc05 	bl	80056d0 <vTaskSwitchContext>
	prvTaskExitError();
 8005ec6:	f7ff ff51 	bl	8005d6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	e000e400 	.word	0xe000e400
 8005ed8:	20000330 	.word	0x20000330
 8005edc:	20000334 	.word	0x20000334
 8005ee0:	e000ed20 	.word	0xe000ed20
 8005ee4:	20000008 	.word	0x20000008

08005ee8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f00:	4b0e      	ldr	r3, [pc, #56]	; (8005f3c <vPortEnterCritical+0x54>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3301      	adds	r3, #1
 8005f06:	4a0d      	ldr	r2, [pc, #52]	; (8005f3c <vPortEnterCritical+0x54>)
 8005f08:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f0a:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <vPortEnterCritical+0x54>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d10e      	bne.n	8005f30 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f12:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <vPortEnterCritical+0x58>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d009      	beq.n	8005f30 <vPortEnterCritical+0x48>
 8005f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	603b      	str	r3, [r7, #0]
 8005f2e:	e7fe      	b.n	8005f2e <vPortEnterCritical+0x46>
	}
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bc80      	pop	{r7}
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	20000008 	.word	0x20000008
 8005f40:	e000ed04 	.word	0xe000ed04

08005f44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f4a:	4b10      	ldr	r3, [pc, #64]	; (8005f8c <vPortExitCritical+0x48>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d109      	bne.n	8005f66 <vPortExitCritical+0x22>
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	607b      	str	r3, [r7, #4]
 8005f64:	e7fe      	b.n	8005f64 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005f66:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <vPortExitCritical+0x48>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	4a07      	ldr	r2, [pc, #28]	; (8005f8c <vPortExitCritical+0x48>)
 8005f6e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f70:	4b06      	ldr	r3, [pc, #24]	; (8005f8c <vPortExitCritical+0x48>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d104      	bne.n	8005f82 <vPortExitCritical+0x3e>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bc80      	pop	{r7}
 8005f8a:	4770      	bx	lr
 8005f8c:	20000008 	.word	0x20000008

08005f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f90:	f3ef 8009 	mrs	r0, PSP
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <pxCurrentTCBConst>)
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005fa0:	6010      	str	r0, [r2, #0]
 8005fa2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005fa6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005faa:	f380 8811 	msr	BASEPRI, r0
 8005fae:	f7ff fb8f 	bl	80056d0 <vTaskSwitchContext>
 8005fb2:	f04f 0000 	mov.w	r0, #0
 8005fb6:	f380 8811 	msr	BASEPRI, r0
 8005fba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005fbe:	6819      	ldr	r1, [r3, #0]
 8005fc0:	6808      	ldr	r0, [r1, #0]
 8005fc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005fc6:	f380 8809 	msr	PSP, r0
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	4770      	bx	lr

08005fd0 <pxCurrentTCBConst>:
 8005fd0:	20000204 	.word	0x20000204
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005fd4:	bf00      	nop
 8005fd6:	bf00      	nop

08005fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ff0:	f7ff fab2 	bl	8005558 <xTaskIncrementTick>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ffa:	4b06      	ldr	r3, [pc, #24]	; (8006014 <SysTick_Handler+0x3c>)
 8005ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	2300      	movs	r3, #0
 8006004:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800600c:	bf00      	nop
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	e000ed04 	.word	0xe000ed04

08006018 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006018:	b480      	push	{r7}
 800601a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800601c:	4b0a      	ldr	r3, [pc, #40]	; (8006048 <vPortSetupTimerInterrupt+0x30>)
 800601e:	2200      	movs	r2, #0
 8006020:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006022:	4b0a      	ldr	r3, [pc, #40]	; (800604c <vPortSetupTimerInterrupt+0x34>)
 8006024:	2200      	movs	r2, #0
 8006026:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006028:	4b09      	ldr	r3, [pc, #36]	; (8006050 <vPortSetupTimerInterrupt+0x38>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a09      	ldr	r2, [pc, #36]	; (8006054 <vPortSetupTimerInterrupt+0x3c>)
 800602e:	fba2 2303 	umull	r2, r3, r2, r3
 8006032:	099b      	lsrs	r3, r3, #6
 8006034:	4a08      	ldr	r2, [pc, #32]	; (8006058 <vPortSetupTimerInterrupt+0x40>)
 8006036:	3b01      	subs	r3, #1
 8006038:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800603a:	4b03      	ldr	r3, [pc, #12]	; (8006048 <vPortSetupTimerInterrupt+0x30>)
 800603c:	2207      	movs	r2, #7
 800603e:	601a      	str	r2, [r3, #0]
}
 8006040:	bf00      	nop
 8006042:	46bd      	mov	sp, r7
 8006044:	bc80      	pop	{r7}
 8006046:	4770      	bx	lr
 8006048:	e000e010 	.word	0xe000e010
 800604c:	e000e018 	.word	0xe000e018
 8006050:	2000000c 	.word	0x2000000c
 8006054:	10624dd3 	.word	0x10624dd3
 8006058:	e000e014 	.word	0xe000e014

0800605c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006062:	f3ef 8305 	mrs	r3, IPSR
 8006066:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2b0f      	cmp	r3, #15
 800606c:	d913      	bls.n	8006096 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800606e:	4a15      	ldr	r2, [pc, #84]	; (80060c4 <vPortValidateInterruptPriority+0x68>)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4413      	add	r3, r2
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006078:	4b13      	ldr	r3, [pc, #76]	; (80060c8 <vPortValidateInterruptPriority+0x6c>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	7afa      	ldrb	r2, [r7, #11]
 800607e:	429a      	cmp	r2, r3
 8006080:	d209      	bcs.n	8006096 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	607b      	str	r3, [r7, #4]
 8006094:	e7fe      	b.n	8006094 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006096:	4b0d      	ldr	r3, [pc, #52]	; (80060cc <vPortValidateInterruptPriority+0x70>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800609e:	4b0c      	ldr	r3, [pc, #48]	; (80060d0 <vPortValidateInterruptPriority+0x74>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d909      	bls.n	80060ba <vPortValidateInterruptPriority+0x5e>
 80060a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	e7fe      	b.n	80060b8 <vPortValidateInterruptPriority+0x5c>
	}
 80060ba:	bf00      	nop
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	bc80      	pop	{r7}
 80060c2:	4770      	bx	lr
 80060c4:	e000e3f0 	.word	0xe000e3f0
 80060c8:	20000330 	.word	0x20000330
 80060cc:	e000ed0c 	.word	0xe000ed0c
 80060d0:	20000334 	.word	0x20000334

080060d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08a      	sub	sp, #40	; 0x28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80060dc:	2300      	movs	r3, #0
 80060de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80060e0:	f7ff f990 	bl	8005404 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80060e4:	4b57      	ldr	r3, [pc, #348]	; (8006244 <pvPortMalloc+0x170>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80060ec:	f000 f90c 	bl	8006308 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80060f0:	4b55      	ldr	r3, [pc, #340]	; (8006248 <pvPortMalloc+0x174>)
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4013      	ands	r3, r2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f040 808c 	bne.w	8006216 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01c      	beq.n	800613e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006104:	2208      	movs	r2, #8
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4413      	add	r3, r2
 800610a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f003 0307 	and.w	r3, r3, #7
 8006112:	2b00      	cmp	r3, #0
 8006114:	d013      	beq.n	800613e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f023 0307 	bic.w	r3, r3, #7
 800611c:	3308      	adds	r3, #8
 800611e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	2b00      	cmp	r3, #0
 8006128:	d009      	beq.n	800613e <pvPortMalloc+0x6a>
 800612a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	e7fe      	b.n	800613c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d068      	beq.n	8006216 <pvPortMalloc+0x142>
 8006144:	4b41      	ldr	r3, [pc, #260]	; (800624c <pvPortMalloc+0x178>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	429a      	cmp	r2, r3
 800614c:	d863      	bhi.n	8006216 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800614e:	4b40      	ldr	r3, [pc, #256]	; (8006250 <pvPortMalloc+0x17c>)
 8006150:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006152:	4b3f      	ldr	r3, [pc, #252]	; (8006250 <pvPortMalloc+0x17c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006158:	e004      	b.n	8006164 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	429a      	cmp	r2, r3
 800616c:	d903      	bls.n	8006176 <pvPortMalloc+0xa2>
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1f1      	bne.n	800615a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006176:	4b33      	ldr	r3, [pc, #204]	; (8006244 <pvPortMalloc+0x170>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800617c:	429a      	cmp	r2, r3
 800617e:	d04a      	beq.n	8006216 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2208      	movs	r2, #8
 8006186:	4413      	add	r3, r2
 8006188:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	1ad2      	subs	r2, r2, r3
 800619a:	2308      	movs	r3, #8
 800619c:	005b      	lsls	r3, r3, #1
 800619e:	429a      	cmp	r2, r3
 80061a0:	d91e      	bls.n	80061e0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80061a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4413      	add	r3, r2
 80061a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	f003 0307 	and.w	r3, r3, #7
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d009      	beq.n	80061c8 <pvPortMalloc+0xf4>
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	613b      	str	r3, [r7, #16]
 80061c6:	e7fe      	b.n	80061c6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	1ad2      	subs	r2, r2, r3
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80061da:	69b8      	ldr	r0, [r7, #24]
 80061dc:	f000 f8f6 	bl	80063cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80061e0:	4b1a      	ldr	r3, [pc, #104]	; (800624c <pvPortMalloc+0x178>)
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	4a18      	ldr	r2, [pc, #96]	; (800624c <pvPortMalloc+0x178>)
 80061ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80061ee:	4b17      	ldr	r3, [pc, #92]	; (800624c <pvPortMalloc+0x178>)
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	4b18      	ldr	r3, [pc, #96]	; (8006254 <pvPortMalloc+0x180>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d203      	bcs.n	8006202 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80061fa:	4b14      	ldr	r3, [pc, #80]	; (800624c <pvPortMalloc+0x178>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a15      	ldr	r2, [pc, #84]	; (8006254 <pvPortMalloc+0x180>)
 8006200:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	4b10      	ldr	r3, [pc, #64]	; (8006248 <pvPortMalloc+0x174>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	431a      	orrs	r2, r3
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	2200      	movs	r2, #0
 8006214:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006216:	f7ff f903 	bl	8005420 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	f003 0307 	and.w	r3, r3, #7
 8006220:	2b00      	cmp	r3, #0
 8006222:	d009      	beq.n	8006238 <pvPortMalloc+0x164>
 8006224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	60fb      	str	r3, [r7, #12]
 8006236:	e7fe      	b.n	8006236 <pvPortMalloc+0x162>
	return pvReturn;
 8006238:	69fb      	ldr	r3, [r7, #28]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3728      	adds	r7, #40	; 0x28
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	20000f40 	.word	0x20000f40
 8006248:	20000f4c 	.word	0x20000f4c
 800624c:	20000f44 	.word	0x20000f44
 8006250:	20000f38 	.word	0x20000f38
 8006254:	20000f48 	.word	0x20000f48

08006258 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d046      	beq.n	80062f8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800626a:	2308      	movs	r3, #8
 800626c:	425b      	negs	r3, r3
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	4413      	add	r3, r2
 8006272:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	4b20      	ldr	r3, [pc, #128]	; (8006300 <vPortFree+0xa8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4013      	ands	r3, r2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d109      	bne.n	800629a <vPortFree+0x42>
 8006286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	e7fe      	b.n	8006298 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d009      	beq.n	80062b6 <vPortFree+0x5e>
 80062a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	60bb      	str	r3, [r7, #8]
 80062b4:	e7fe      	b.n	80062b4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	4b11      	ldr	r3, [pc, #68]	; (8006300 <vPortFree+0xa8>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4013      	ands	r3, r2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d019      	beq.n	80062f8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d115      	bne.n	80062f8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	4b0b      	ldr	r3, [pc, #44]	; (8006300 <vPortFree+0xa8>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	43db      	mvns	r3, r3
 80062d6:	401a      	ands	r2, r3
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80062dc:	f7ff f892 	bl	8005404 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	4b07      	ldr	r3, [pc, #28]	; (8006304 <vPortFree+0xac>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4413      	add	r3, r2
 80062ea:	4a06      	ldr	r2, [pc, #24]	; (8006304 <vPortFree+0xac>)
 80062ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80062ee:	6938      	ldr	r0, [r7, #16]
 80062f0:	f000 f86c 	bl	80063cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80062f4:	f7ff f894 	bl	8005420 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80062f8:	bf00      	nop
 80062fa:	3718      	adds	r7, #24
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	20000f4c 	.word	0x20000f4c
 8006304:	20000f44 	.word	0x20000f44

08006308 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800630e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006312:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006314:	4b27      	ldr	r3, [pc, #156]	; (80063b4 <prvHeapInit+0xac>)
 8006316:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00c      	beq.n	800633c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	3307      	adds	r3, #7
 8006326:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 0307 	bic.w	r3, r3, #7
 800632e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	4a1f      	ldr	r2, [pc, #124]	; (80063b4 <prvHeapInit+0xac>)
 8006338:	4413      	add	r3, r2
 800633a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006340:	4a1d      	ldr	r2, [pc, #116]	; (80063b8 <prvHeapInit+0xb0>)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006346:	4b1c      	ldr	r3, [pc, #112]	; (80063b8 <prvHeapInit+0xb0>)
 8006348:	2200      	movs	r2, #0
 800634a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	4413      	add	r3, r2
 8006352:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006354:	2208      	movs	r2, #8
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	1a9b      	subs	r3, r3, r2
 800635a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 0307 	bic.w	r3, r3, #7
 8006362:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4a15      	ldr	r2, [pc, #84]	; (80063bc <prvHeapInit+0xb4>)
 8006368:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800636a:	4b14      	ldr	r3, [pc, #80]	; (80063bc <prvHeapInit+0xb4>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2200      	movs	r2, #0
 8006370:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006372:	4b12      	ldr	r3, [pc, #72]	; (80063bc <prvHeapInit+0xb4>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2200      	movs	r2, #0
 8006378:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	1ad2      	subs	r2, r2, r3
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006388:	4b0c      	ldr	r3, [pc, #48]	; (80063bc <prvHeapInit+0xb4>)
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	4a0a      	ldr	r2, [pc, #40]	; (80063c0 <prvHeapInit+0xb8>)
 8006396:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	4a09      	ldr	r2, [pc, #36]	; (80063c4 <prvHeapInit+0xbc>)
 800639e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80063a0:	4b09      	ldr	r3, [pc, #36]	; (80063c8 <prvHeapInit+0xc0>)
 80063a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80063a6:	601a      	str	r2, [r3, #0]
}
 80063a8:	bf00      	nop
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bc80      	pop	{r7}
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	20000338 	.word	0x20000338
 80063b8:	20000f38 	.word	0x20000f38
 80063bc:	20000f40 	.word	0x20000f40
 80063c0:	20000f48 	.word	0x20000f48
 80063c4:	20000f44 	.word	0x20000f44
 80063c8:	20000f4c 	.word	0x20000f4c

080063cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80063d4:	4b27      	ldr	r3, [pc, #156]	; (8006474 <prvInsertBlockIntoFreeList+0xa8>)
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	e002      	b.n	80063e0 <prvInsertBlockIntoFreeList+0x14>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d8f7      	bhi.n	80063da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	4413      	add	r3, r2
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d108      	bne.n	800640e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	441a      	add	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	441a      	add	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	429a      	cmp	r2, r3
 8006420:	d118      	bne.n	8006454 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	4b14      	ldr	r3, [pc, #80]	; (8006478 <prvInsertBlockIntoFreeList+0xac>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	429a      	cmp	r2, r3
 800642c:	d00d      	beq.n	800644a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	441a      	add	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	e008      	b.n	800645c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800644a:	4b0b      	ldr	r3, [pc, #44]	; (8006478 <prvInsertBlockIntoFreeList+0xac>)
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	e003      	b.n	800645c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	429a      	cmp	r2, r3
 8006462:	d002      	beq.n	800646a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800646a:	bf00      	nop
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	bc80      	pop	{r7}
 8006472:	4770      	bx	lr
 8006474:	20000f38 	.word	0x20000f38
 8006478:	20000f40 	.word	0x20000f40

0800647c <_ZN3wyz9CStrategyC1Ev>:
#include <string>
#include <cstring>

namespace wyz {
using namespace std;
class CStrategy {
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	4a04      	ldr	r2, [pc, #16]	; (8006498 <_ZN3wyz9CStrategyC1Ev+0x1c>)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4618      	mov	r0, r3
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	bc80      	pop	{r7}
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	0800b518 	.word	0x0800b518

0800649c <_ZN3wyz16CAnalysisOfFrameC1EmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>:

#include <CAnalysisOfFrame.h>

namespace wyz {

CAnalysisOfFrame::CAnalysisOfFrame(uint32_t SizeOfDataBuf,string HeadOfFrame,string TailOfFrame) {
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7ff ffe5 	bl	800647c <_ZN3wyz9CStrategyC1Ev>
 80064b2:	4a28      	ldr	r2, [pc, #160]	; (8006554 <_ZN3wyz16CAnalysisOfFrameC1EmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0xb8>)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	3304      	adds	r3, #4
 80064bc:	4618      	mov	r0, r3
 80064be:	f002 fd8b 	bl	8008fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	331c      	adds	r3, #28
 80064c6:	4618      	mov	r0, r3
 80064c8:	f002 fd86 	bl	8008fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3334      	adds	r3, #52	; 0x34
 80064d0:	4618      	mov	r0, r3
 80064d2:	f002 fd81 	bl	8008fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	334c      	adds	r3, #76	; 0x4c
 80064da:	4618      	mov	r0, r3
 80064dc:	f002 fd7c 	bl	8008fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	// TODO Auto-generated constructor stub
	this->m_HeadOfFrame = HeadOfFrame;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3334      	adds	r3, #52	; 0x34
 80064e4:	6879      	ldr	r1, [r7, #4]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f002 fd83 	bl	8008ff2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	this->m_TailOfFrame = TailOfFrame;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	334c      	adds	r3, #76	; 0x4c
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f002 fd7d 	bl	8008ff2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	this->m_DataString.reserve(SizeOfDataBuf*2);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	1d1a      	adds	r2, r3, #4
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	4619      	mov	r1, r3
 8006502:	4610      	mov	r0, r2
 8006504:	f002 fda2 	bl	800904c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
	this->m_LastDataString.reserve(SizeOfDataBuf);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	331c      	adds	r3, #28
 800650c:	68b9      	ldr	r1, [r7, #8]
 800650e:	4618      	mov	r0, r3
 8006510:	f002 fd9c 	bl	800904c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
	this->m_SizeOfDataBuf = SizeOfDataBuf;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	665a      	str	r2, [r3, #100]	; 0x64
}
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	e015      	b.n	800654a <_ZN3wyz16CAnalysisOfFrameC1EmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0xae>
CAnalysisOfFrame::CAnalysisOfFrame(uint32_t SizeOfDataBuf,string HeadOfFrame,string TailOfFrame) {
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	334c      	adds	r3, #76	; 0x4c
 8006522:	4618      	mov	r0, r3
 8006524:	f002 fd5f 	bl	8008fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	3334      	adds	r3, #52	; 0x34
 800652c:	4618      	mov	r0, r3
 800652e:	f002 fd5a 	bl	8008fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	331c      	adds	r3, #28
 8006536:	4618      	mov	r0, r3
 8006538:	f002 fd55 	bl	8008fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	3304      	adds	r3, #4
 8006540:	4618      	mov	r0, r3
 8006542:	f002 fd50 	bl	8008fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006546:	f002 f898 	bl	800867a <__cxa_end_cleanup>
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	0800b50c 	.word	0x0800b50c

08006558 <_ZN3wyz16CAnalysisOfFrame16ConcreteStrategyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
CAnalysisOfFrame::~CAnalysisOfFrame() {
	// TODO Auto-generated destructor stub
}

string CAnalysisOfFrame::ConcreteStrategy(string Str)
{
 8006558:	b5b0      	push	{r4, r5, r7, lr}
 800655a:	b098      	sub	sp, #96	; 0x60
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
	string::size_type  Index;
	this->m_DataString = Str;
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	3304      	adds	r3, #4
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	4618      	mov	r0, r3
 800656c:	f002 fd41 	bl	8008ff2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	if(this->m_LastDataString.empty() == false)
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	331c      	adds	r3, #28
 8006574:	4618      	mov	r0, r3
 8006576:	f002 fd9f 	bl	80090b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 800657a:	4603      	mov	r3, r0
 800657c:	f083 0301 	eor.w	r3, r3, #1
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d02d      	beq.n	80065e2 <_ZN3wyz16CAnalysisOfFrame16ConcreteStrategyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8a>
	{
		Index = this->m_LastDataString.find(this->m_HeadOfFrame);    //上次存下来的截取帧头内的
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f103 001c 	add.w	r0, r3, #28
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	3334      	adds	r3, #52	; 0x34
 8006590:	2200      	movs	r2, #0
 8006592:	4619      	mov	r1, r3
 8006594:	f002 fe80 	bl	8009298 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 8006598:	65f8      	str	r0, [r7, #92]	; 0x5c
		if(Index != this->m_LastDataString.npos)
 800659a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800659c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a0:	d01f      	beq.n	80065e2 <_ZN3wyz16CAnalysisOfFrame16ConcreteStrategyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8a>
		{
			this->m_LastDataString = this->m_LastDataString.substr(Index);
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f103 041c 	add.w	r4, r3, #28
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f103 011c 	add.w	r1, r3, #28
 80065ae:	f107 0014 	add.w	r0, r7, #20
 80065b2:	f04f 33ff 	mov.w	r3, #4294967295
 80065b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065b8:	f002 ff1e 	bl	80093f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80065bc:	f107 0314 	add.w	r3, r7, #20
 80065c0:	4619      	mov	r1, r3
 80065c2:	4620      	mov	r0, r4
 80065c4:	f002 fd1b 	bl	8008ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80065c8:	f107 0314 	add.w	r3, r7, #20
 80065cc:	4618      	mov	r0, r3
 80065ce:	f002 fd0a 	bl	8008fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			this->m_DataString.insert(0, this->m_LastDataString);//链接字符串
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	1d18      	adds	r0, r3, #4
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	331c      	adds	r3, #28
 80065da:	461a      	mov	r2, r3
 80065dc:	2100      	movs	r1, #0
 80065de:	f002 fe21 	bl	8009224 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>
		}
	}
	Index = this->m_DataString.find(this->m_HeadOfFrame);
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	1d18      	adds	r0, r3, #4
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	3334      	adds	r3, #52	; 0x34
 80065ea:	2200      	movs	r2, #0
 80065ec:	4619      	mov	r1, r3
 80065ee:	f002 fe53 	bl	8009298 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 80065f2:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(Index != this->m_DataString.npos)  //找到帧头
 80065f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fa:	f000 8089 	beq.w	8006710 <_ZN3wyz16CAnalysisOfFrame16ConcreteStrategyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b8>
	{
		this->m_DataString = this->m_DataString.substr(Index); //截取帧头后面的（包括帧头）
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	1d1c      	adds	r4, r3, #4
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	1d19      	adds	r1, r3, #4
 8006606:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800660a:	f04f 33ff 	mov.w	r3, #4294967295
 800660e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006610:	f002 fef2 	bl	80093f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8006614:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006618:	4619      	mov	r1, r3
 800661a:	4620      	mov	r0, r4
 800661c:	f002 fcef 	bl	8008ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8006620:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006624:	4618      	mov	r0, r3
 8006626:	f002 fcde 	bl	8008fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		Index = this->m_DataString.rfind(this->m_TailOfFrame); //准备截取
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	1d18      	adds	r0, r3, #4
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	334c      	adds	r3, #76	; 0x4c
 8006632:	f04f 32ff 	mov.w	r2, #4294967295
 8006636:	4619      	mov	r1, r3
 8006638:	f002 fe4d 	bl	80092d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5rfindERKS4_j>
 800663c:	65f8      	str	r0, [r7, #92]	; 0x5c
		if(Index == this->m_DataString.npos) //命令不完全
 800663e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006644:	d135      	bne.n	80066b2 <_ZN3wyz16CAnalysisOfFrame16ConcreteStrategyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x15a>
		{
			if(this->m_DataString.length() < this->m_SizeOfDataBuf)
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	3304      	adds	r3, #4
 800664a:	4618      	mov	r0, r3
 800664c:	f002 fcfc 	bl	8009048 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8006650:	4602      	mov	r2, r0
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006656:	429a      	cmp	r2, r3
 8006658:	bf34      	ite	cc
 800665a:	2301      	movcc	r3, #1
 800665c:	2300      	movcs	r3, #0
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	d015      	beq.n	8006690 <_ZN3wyz16CAnalysisOfFrame16ConcreteStrategyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x138>
			{
				this->m_LastDataString = this ->m_DataString; //存起来
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	f103 021c 	add.w	r2, r3, #28
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	3304      	adds	r3, #4
 800666e:	4619      	mov	r1, r3
 8006670:	4610      	mov	r0, r2
 8006672:	f002 fcbe 	bl	8008ff2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
				this->m_DataString = "";
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	3304      	adds	r3, #4
 800667a:	492d      	ldr	r1, [pc, #180]	; (8006730 <_ZN3wyz16CAnalysisOfFrame16ConcreteStrategyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d8>)
 800667c:	4618      	mov	r0, r3
 800667e:	f002 fdb4 	bl	80091ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				return this->m_DataString;
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	3304      	adds	r3, #4
 8006686:	4619      	mov	r1, r3
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f002 fe4f 	bl	800932c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800668e:	e04b      	b.n	8006728 <_ZN3wyz16CAnalysisOfFrame16ConcreteStrategyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d0>
			}else
			{
				//超过一帧可能的长度则清空
				this->m_DataString.clear();
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	3304      	adds	r3, #4
 8006694:	4618      	mov	r0, r3
 8006696:	f002 fd0a 	bl	80090ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
				this->m_LastDataString.clear();
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	331c      	adds	r3, #28
 800669e:	4618      	mov	r0, r3
 80066a0:	f002 fd05 	bl	80090ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
				return this->m_DataString;
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	3304      	adds	r3, #4
 80066a8:	4619      	mov	r1, r3
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f002 fe3e 	bl	800932c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80066b0:	e03a      	b.n	8006728 <_ZN3wyz16CAnalysisOfFrame16ConcreteStrategyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d0>
			}
		}else{ //完整命令
			this->m_LastDataString = this->m_DataString.substr(Index+this->m_TailOfFrame.length());//剩余的放入缓存区
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f103 041c 	add.w	r4, r3, #28
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	1d1d      	adds	r5, r3, #4
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	334c      	adds	r3, #76	; 0x4c
 80066c0:	4618      	mov	r0, r3
 80066c2:	f002 fcc1 	bl	8009048 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80066c6:	4602      	mov	r2, r0
 80066c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066ca:	441a      	add	r2, r3
 80066cc:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80066d0:	f04f 33ff 	mov.w	r3, #4294967295
 80066d4:	4629      	mov	r1, r5
 80066d6:	f002 fe8f 	bl	80093f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80066da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80066de:	4619      	mov	r1, r3
 80066e0:	4620      	mov	r0, r4
 80066e2:	f002 fc8c 	bl	8008ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80066e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80066ea:	4618      	mov	r0, r3
 80066ec:	f002 fc7b 	bl	8008fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			//完整命令
			return this->m_DataString.substr(0,Index+this->m_TailOfFrame.length());
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	1d1c      	adds	r4, r3, #4
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	334c      	adds	r3, #76	; 0x4c
 80066f8:	4618      	mov	r0, r3
 80066fa:	f002 fca5 	bl	8009048 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80066fe:	4602      	mov	r2, r0
 8006700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006702:	4413      	add	r3, r2
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	4621      	mov	r1, r4
 800670a:	f002 fe75 	bl	80093f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800670e:	e00b      	b.n	8006728 <_ZN3wyz16CAnalysisOfFrame16ConcreteStrategyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d0>
		}
	}else
	{
		//找不到帧头
		this->m_DataString = "";
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	3304      	adds	r3, #4
 8006714:	4906      	ldr	r1, [pc, #24]	; (8006730 <_ZN3wyz16CAnalysisOfFrame16ConcreteStrategyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d8>)
 8006716:	4618      	mov	r0, r3
 8006718:	f002 fd67 	bl	80091ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		return this->m_DataString;
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	3304      	adds	r3, #4
 8006720:	4619      	mov	r1, r3
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f002 fe02 	bl	800932c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	}

}
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	3760      	adds	r7, #96	; 0x60
 800672c:	46bd      	mov	sp, r7
 800672e:	bdb0      	pop	{r4, r5, r7, pc}
 8006730:	0800b4d4 	.word	0x0800b4d4

08006734 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	4618      	mov	r0, r3
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	bc80      	pop	{r7}
 8006748:	4770      	bx	lr

0800674a <_ZdlPvS_>:
inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }

// Default placement versions of operator delete.
inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	6039      	str	r1, [r7, #0]
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	bc80      	pop	{r7}
 800675c:	4770      	bx	lr
	...

08006760 <_ZN3wyz11CTimerMeter21GetTimerMeterInstanceEv>:
	~CTimerMeter();
	TIM_HandleTypeDef  * m_Timer;
	double m_NumberOfMs = 0;
	bool m_FlagOfRun = false;
public:
	static CTimerMeter* GetTimerMeterInstance()
 8006760:	b598      	push	{r3, r4, r7, lr}
 8006762:	af00      	add	r7, sp, #0
	{
		static CTimerMeter* m_pTmierMeter;
		if (m_pTmierMeter == NULL) {
 8006764:	4b0c      	ldr	r3, [pc, #48]	; (8006798 <_ZN3wyz11CTimerMeter21GetTimerMeterInstanceEv+0x38>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d109      	bne.n	8006780 <_ZN3wyz11CTimerMeter21GetTimerMeterInstanceEv+0x20>
			m_pTmierMeter = new CTimerMeter();
 800676c:	2018      	movs	r0, #24
 800676e:	f002 fae3 	bl	8008d38 <_Znwj>
 8006772:	4603      	mov	r3, r0
 8006774:	461c      	mov	r4, r3
 8006776:	4620      	mov	r0, r4
 8006778:	f000 fb10 	bl	8006d9c <_ZN3wyz11CTimerMeterC1Ev>
 800677c:	4b06      	ldr	r3, [pc, #24]	; (8006798 <_ZN3wyz11CTimerMeter21GetTimerMeterInstanceEv+0x38>)
 800677e:	601c      	str	r4, [r3, #0]
		}
		return m_pTmierMeter;
 8006780:	4b05      	ldr	r3, [pc, #20]	; (8006798 <_ZN3wyz11CTimerMeter21GetTimerMeterInstanceEv+0x38>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	e005      	b.n	8006792 <_ZN3wyz11CTimerMeter21GetTimerMeterInstanceEv+0x32>
			m_pTmierMeter = new CTimerMeter();
 8006786:	2118      	movs	r1, #24
 8006788:	4620      	mov	r0, r4
 800678a:	f002 f837 	bl	80087fc <_ZdlPvj>
 800678e:	f001 ff74 	bl	800867a <__cxa_end_cleanup>
	}
 8006792:	4618      	mov	r0, r3
 8006794:	bd98      	pop	{r3, r4, r7, pc}
 8006796:	bf00      	nop
 8006798:	20000f50 	.word	0x20000f50

0800679c <_ZN3wyz9CObserverC1Ev>:
#define CLASS_COBSERVER_H_
#include "CSubject.h"

namespace wyz {

class CObserver {
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	4a04      	ldr	r2, [pc, #16]	; (80067b8 <_ZN3wyz9CObserverC1Ev+0x1c>)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bc80      	pop	{r7}
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	0800b530 	.word	0x0800b530

080067bc <_ZN3wyz10CGPSModuleC1EPNS_9CStrategyE>:
extern TIM_HandleTypeDef htim4;

namespace wyz {
CTimerMeter * pTimerMeter = CTimerMeter::GetTimerMeterInstance();

CGPSModule::CGPSModule(CStrategy *Strategy)
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7ff ffe7 	bl	800679c <_ZN3wyz9CObserverC1Ev>
 80067ce:	4a0d      	ldr	r2, [pc, #52]	; (8006804 <_ZN3wyz10CGPSModuleC1EPNS_9CStrategyE+0x48>)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	3304      	adds	r3, #4
 80067d8:	4618      	mov	r0, r3
 80067da:	f002 fbfd 	bl	8008fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	331c      	adds	r3, #28
 80067e2:	4618      	mov	r0, r3
 80067e4:	f002 fbf8 	bl	8008fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	3338      	adds	r3, #56	; 0x38
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 f87c 	bl	80068ea <_ZNSt7__cxx114listINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
{
	this->m_Strategy = Strategy;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	645a      	str	r2, [r3, #68]	; 0x44
}
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	0800b524 	.word	0x0800b524

08006808 <_ZN3wyz10CGPSModule6UpdateEPNS_8CSubjectE>:
{

}

void CGPSModule::Update(CSubject * pSubject)  //有目标数据更新
{
 8006808:	b5b0      	push	{r4, r5, r7, lr}
 800680a:	b08c      	sub	sp, #48	; 0x30
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
	uint32_t size = static_cast<CUart*>(pSubject)->GetSizeOfRxBuf();
	uint8_t *pData= static_cast<CUart*>(pSubject)->GetPointOfRxBuf();
	char m_pDataBuf[size];
	string DataString;
	memcpy(m_pDataBuf,pData,size); //将uint8 *转 char *
	this->m_DataBufList.push_front(DataString.assign(m_pDataBuf, size));  //先进后出fifo模式
 8006812:	466b      	mov	r3, sp
 8006814:	461d      	mov	r5, r3
	uint32_t size = static_cast<CUart*>(pSubject)->GetSizeOfRxBuf();
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <_ZN3wyz10CGPSModule6UpdateEPNS_8CSubjectE+0x1a>
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	3b04      	subs	r3, #4
 8006820:	e000      	b.n	8006824 <_ZN3wyz10CGPSModule6UpdateEPNS_8CSubjectE+0x1c>
 8006822:	2300      	movs	r3, #0
 8006824:	4618      	mov	r0, r3
 8006826:	f000 fb5d 	bl	8006ee4 <_ZN3wyz5CUart14GetSizeOfRxBufEv>
 800682a:	4603      	mov	r3, r0
 800682c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t *pData= static_cast<CUart*>(pSubject)->GetPointOfRxBuf();
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <_ZN3wyz10CGPSModule6UpdateEPNS_8CSubjectE+0x32>
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	3b04      	subs	r3, #4
 8006838:	e000      	b.n	800683c <_ZN3wyz10CGPSModule6UpdateEPNS_8CSubjectE+0x34>
 800683a:	2300      	movs	r3, #0
 800683c:	4618      	mov	r0, r3
 800683e:	f000 fb5c 	bl	8006efa <_ZN3wyz5CUart15GetPointOfRxBufEv>
 8006842:	4603      	mov	r3, r0
 8006844:	62bb      	str	r3, [r7, #40]	; 0x28
	char m_pDataBuf[size];
 8006846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006848:	1e58      	subs	r0, r3, #1
 800684a:	6278      	str	r0, [r7, #36]	; 0x24
 800684c:	4603      	mov	r3, r0
 800684e:	3301      	adds	r3, #1
 8006850:	4619      	mov	r1, r3
 8006852:	f04f 0200 	mov.w	r2, #0
 8006856:	f04f 0300 	mov.w	r3, #0
 800685a:	f04f 0400 	mov.w	r4, #0
 800685e:	00d4      	lsls	r4, r2, #3
 8006860:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006864:	00cb      	lsls	r3, r1, #3
 8006866:	4603      	mov	r3, r0
 8006868:	3301      	adds	r3, #1
 800686a:	4619      	mov	r1, r3
 800686c:	f04f 0200 	mov.w	r2, #0
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	f04f 0400 	mov.w	r4, #0
 8006878:	00d4      	lsls	r4, r2, #3
 800687a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800687e:	00cb      	lsls	r3, r1, #3
 8006880:	4603      	mov	r3, r0
 8006882:	3301      	adds	r3, #1
 8006884:	3307      	adds	r3, #7
 8006886:	08db      	lsrs	r3, r3, #3
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	ebad 0d03 	sub.w	sp, sp, r3
 800688e:	466b      	mov	r3, sp
 8006890:	3300      	adds	r3, #0
 8006892:	623b      	str	r3, [r7, #32]
	string DataString;
 8006894:	f107 0308 	add.w	r3, r7, #8
 8006898:	4618      	mov	r0, r3
 800689a:	f002 fb9d 	bl	8008fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	memcpy(m_pDataBuf,pData,size); //将uint8 *转 char *
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068a4:	4618      	mov	r0, r3
 80068a6:	f003 f83c 	bl	8009922 <memcpy>
	this->m_DataBufList.push_front(DataString.assign(m_pDataBuf, size));  //先进后出fifo模式
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80068b0:	6a39      	ldr	r1, [r7, #32]
 80068b2:	f107 0308 	add.w	r3, r7, #8
 80068b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068b8:	4618      	mov	r0, r3
 80068ba:	f002 fc7d 	bl	80091b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKcj>
 80068be:	4603      	mov	r3, r0
 80068c0:	4619      	mov	r1, r3
 80068c2:	4620      	mov	r0, r4
 80068c4:	f000 f81e 	bl	8006904 <_ZNSt7__cxx114listINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE10push_frontERKS5_>
	string DataString;
 80068c8:	f107 0308 	add.w	r3, r7, #8
 80068cc:	4618      	mov	r0, r3
 80068ce:	f002 fb8a 	bl	8008fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80068d2:	46ad      	mov	sp, r5
}
 80068d4:	e006      	b.n	80068e4 <_ZN3wyz10CGPSModule6UpdateEPNS_8CSubjectE+0xdc>
	string DataString;
 80068d6:	f107 0308 	add.w	r3, r7, #8
 80068da:	4618      	mov	r0, r3
 80068dc:	f002 fb83 	bl	8008fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80068e0:	f001 fecb 	bl	800867a <__cxa_end_cleanup>
}
 80068e4:	3730      	adds	r7, #48	; 0x30
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bdb0      	pop	{r4, r5, r7, pc}

080068ea <_ZNSt7__cxx114listINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %list with no elements.
       */
      list()
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b082      	sub	sp, #8
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Node_alloc_type>::value)
#endif
      : _Base() { }
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 f817 	bl	8006928 <_ZNSt7__cxx1110_List_baseINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4618      	mov	r0, r3
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <_ZNSt7__cxx114listINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE10push_frontERKS5_>:
       *  to it.  Due to the nature of a %list this operation can be
       *  done in constant time, and does not invalidate iterators and
       *  references.
       */
      void
      push_front(const value_type& __x)
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
      { this->_M_insert(begin(), __x); }
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f81a 	bl	8006948 <_ZNSt7__cxx114listINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8006914:	4603      	mov	r3, r0
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f82f 	bl	800697e <_ZNSt7__cxx114listINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9_M_insertIJRKS5_EEEvSt14_List_iteratorIS5_EDpOT_>
 8006920:	bf00      	nop
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <_ZNSt7__cxx1110_List_baseINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _List_base()
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4618      	mov	r0, r3
 8006934:	f000 f850 	bl	80069d8 <_ZNSt7__cxx1110_List_baseINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE10_List_implC1Ev>
      { _M_init(); }
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f85f 	bl	80069fc <_ZNSt7__cxx1110_List_baseINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE7_M_initEv>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4618      	mov	r0, r3
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <_ZNSt7__cxx114listINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	f107 030c 	add.w	r3, r7, #12
 8006958:	4611      	mov	r1, r2
 800695a:	4618      	mov	r0, r3
 800695c:	f000 f82e 	bl	80069bc <_ZNSt14_List_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1EPNSt8__detail15_List_node_baseE>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4618      	mov	r0, r3
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	bc80      	pop	{r7}
 800697c:	4770      	bx	lr

0800697e <_ZNSt7__cxx114listINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9_M_insertIJRKS5_EEEvSt14_List_iteratorIS5_EDpOT_>:
	this->_M_inc_size(1);
      }
#else
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
 800697e:	b580      	push	{r7, lr}
 8006980:	b086      	sub	sp, #24
 8006982:	af00      	add	r7, sp, #0
 8006984:	60f8      	str	r0, [r7, #12]
 8006986:	60b9      	str	r1, [r7, #8]
 8006988:	607a      	str	r2, [r7, #4]
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7ff ffed 	bl	800696a <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8006990:	4603      	mov	r3, r0
 8006992:	4619      	mov	r1, r3
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f000 f85b 	bl	8006a50 <_ZNSt7__cxx114listINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt10_List_nodeIS5_EDpOT_>
 800699a:	4603      	mov	r3, r0
 800699c:	617b      	str	r3, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	4611      	mov	r1, r2
 80069a4:	4618      	mov	r0, r3
 80069a6:	f002 fa08 	bl	8008dba <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2101      	movs	r1, #1
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 f88b 	bl	8006aca <_ZNSt7__cxx1110_List_baseINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_inc_sizeEj>
       }
 80069b4:	bf00      	nop
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <_ZNSt14_List_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4618      	mov	r0, r3
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bc80      	pop	{r7}
 80069d6:	4770      	bx	lr

080069d8 <_ZNSt7__cxx1110_List_baseINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type(), _M_node()
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 f884 	bl	8006aee <_ZNSaISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	461a      	mov	r2, r3
 80069ea:	2300      	movs	r3, #0
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	6053      	str	r3, [r2, #4]
 80069f0:	6093      	str	r3, [r2, #8]
	{ }
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <_ZNSt7__cxx1110_List_baseINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE7_M_initEv>:
      _M_init() _GLIBCXX_NOEXCEPT
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
	this->_M_impl._M_node._M_next = &this->_M_impl._M_node;
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	605a      	str	r2, [r3, #4]
	_M_set_size(0);
 8006a10:	2100      	movs	r1, #0
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f877 	bl	8006b06 <_ZNSt7__cxx1110_List_baseINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_set_sizeEj>
      }
 8006a18:	bf00      	nop
 8006a1a:	3708      	adds	r7, #8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <_ZNSt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	3308      	adds	r3, #8
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 f87a 	bl	8006b26 <_ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_M_ptrEv>
 8006a32:	4603      	mov	r3, r0
 8006a34:	4618      	mov	r0, r3
 8006a36:	3708      	adds	r7, #8
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <_ZNSt7__cxx1110_List_baseINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4618      	mov	r0, r3
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bc80      	pop	{r7}
 8006a4e:	4770      	bx	lr

08006a50 <_ZNSt7__cxx114listINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt10_List_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8006a50:	b590      	push	{r4, r7, lr}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f000 f87d 	bl	8006b5c <_ZNSt7__cxx1110_List_baseINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_get_nodeEv>
 8006a62:	4603      	mov	r3, r0
 8006a64:	617b      	str	r3, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7ff ffe7 	bl	8006a3c <_ZNSt7__cxx1110_List_baseINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE21_M_get_Node_allocatorEv>
 8006a6e:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8006a70:	f107 0308 	add.w	r3, r7, #8
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	6939      	ldr	r1, [r7, #16]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 f87d 	bl	8006b78 <_ZNSt15__allocated_ptrISaISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERS8_PS7_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 8006a7e:	6978      	ldr	r0, [r7, #20]
 8006a80:	f7ff ffce 	bl	8006a20 <_ZNSt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9_M_valptrEv>
 8006a84:	4604      	mov	r4, r0
 8006a86:	6838      	ldr	r0, [r7, #0]
 8006a88:	f7ff ff6f 	bl	800696a <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	461a      	mov	r2, r3
 8006a90:	4621      	mov	r1, r4
 8006a92:	6938      	ldr	r0, [r7, #16]
 8006a94:	f000 f899 	bl	8006bca <_ZNSt16allocator_traitsISaISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>
	  __guard = nullptr;
 8006a98:	f107 0308 	add.w	r3, r7, #8
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 f8a6 	bl	8006bf0 <_ZNSt15__allocated_ptrISaISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEaSEDn>
	  return __p;
 8006aa4:	697c      	ldr	r4, [r7, #20]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8006aa6:	f107 0308 	add.w	r3, r7, #8
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 f878 	bl	8006ba0 <_ZNSt15__allocated_ptrISaISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>
	  return __p;
 8006ab0:	4623      	mov	r3, r4
 8006ab2:	e006      	b.n	8006ac2 <_ZNSt7__cxx114listINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt10_List_nodeIS5_EDpOT_+0x72>
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8006ab4:	f107 0308 	add.w	r3, r7, #8
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f000 f871 	bl	8006ba0 <_ZNSt15__allocated_ptrISaISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>
 8006abe:	f001 fddc 	bl	800867a <__cxa_end_cleanup>
	}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	371c      	adds	r7, #28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd90      	pop	{r4, r7, pc}

08006aca <_ZNSt7__cxx1110_List_baseINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { *_M_impl._M_node._M_valptr() += __n; }
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b082      	sub	sp, #8
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	6039      	str	r1, [r7, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 f898 	bl	8006c0c <_ZNSt10_List_nodeIjE9_M_valptrEv>
 8006adc:	4603      	mov	r3, r0
 8006ade:	6819      	ldr	r1, [r3, #0]
 8006ae0:	683a      	ldr	r2, [r7, #0]
 8006ae2:	440a      	add	r2, r1
 8006ae4:	601a      	str	r2, [r3, #0]
 8006ae6:	bf00      	nop
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <_ZNSaISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b082      	sub	sp, #8
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f896 	bl	8006c28 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4618      	mov	r0, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <_ZNSt7__cxx1110_List_baseINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_set_sizeEj>:
      void _M_set_size(size_t __n) { *_M_impl._M_node._M_valptr() = __n; }
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 f87a 	bl	8006c0c <_ZNSt10_List_nodeIjE9_M_valptrEv>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	6013      	str	r3, [r2, #0]
 8006b1e:	bf00      	nop
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <_ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b082      	sub	sp, #8
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f884 	bl	8006c3c <_ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_addrEv>
 8006b34:	4603      	mov	r3, r0
 8006b36:	4618      	mov	r0, r3
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <_ZNSt16allocator_traitsISaISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE10deallocateERS8_PS7_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	68b9      	ldr	r1, [r7, #8]
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 f87e 	bl	8006c50 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS8_j>
 8006b54:	bf00      	nop
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <_ZNSt7__cxx1110_List_baseINS_12basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2101      	movs	r1, #1
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 f87e 	bl	8006c6a <_ZNSt16allocator_traitsISaISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8allocateERS8_j>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <_ZNSt15__allocated_ptrISaISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERS8_PS7_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8006b84:	68b8      	ldr	r0, [r7, #8]
 8006b86:	f000 f87f 	bl	8006c88 <_ZSt11__addressofISaISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	601a      	str	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	605a      	str	r2, [r3, #4]
      { }
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <_ZNSt15__allocated_ptrISaISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d007      	beq.n	8006bc0 <_ZNSt15__allocated_ptrISaISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6818      	ldr	r0, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	4619      	mov	r1, r3
 8006bbc:	f7ff ffbf 	bl	8006b3e <_ZNSt16allocator_traitsISaISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE10deallocateERS8_PS7_j>
      }
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <_ZNSt16allocator_traitsISaISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b084      	sub	sp, #16
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7ff fec7 	bl	800696a <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	461a      	mov	r2, r3
 8006be0:	68b9      	ldr	r1, [r7, #8]
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f000 f85a 	bl	8006c9c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS7_JRKS7_EEEvPT_DpOT0_>
 8006be8:	bf00      	nop
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <_ZNSt15__allocated_ptrISaISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	605a      	str	r2, [r3, #4]
	return *this;
 8006c00:	687b      	ldr	r3, [r7, #4]
      }
 8006c02:	4618      	mov	r0, r3
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr

08006c0c <_ZNSt10_List_nodeIjE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3308      	adds	r3, #8
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 f860 	bl	8006cde <_ZN9__gnu_cxx16__aligned_membufIjE6_M_ptrEv>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	4618      	mov	r0, r3
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4618      	mov	r0, r3
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bc80      	pop	{r7}
 8006c3a:	4770      	bx	lr

08006c3c <_ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_addrEv>:
      _M_addr() noexcept
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4618      	mov	r0, r3
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bc80      	pop	{r7}
 8006c4e:	4770      	bx	lr

08006c50 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS8_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8006c5c:	68b8      	ldr	r0, [r7, #8]
 8006c5e:	f002 f885 	bl	8008d6c <_ZdlPv>
      }
 8006c62:	bf00      	nop
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <_ZNSt16allocator_traitsISaISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b082      	sub	sp, #8
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006c74:	2200      	movs	r2, #0
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f83c 	bl	8006cf6 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateEjPKv>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	4618      	mov	r0, r3
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <_ZSt11__addressofISaISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEPT_RS9_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4618      	mov	r0, r3
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bc80      	pop	{r7}
 8006c9a:	4770      	bx	lr

08006c9c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS7_JRKS7_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8006c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f7ff fe5e 	bl	800696a <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8006cae:	4606      	mov	r6, r0
 8006cb0:	68bd      	ldr	r5, [r7, #8]
 8006cb2:	4629      	mov	r1, r5
 8006cb4:	2018      	movs	r0, #24
 8006cb6:	f7ff fd3d 	bl	8006734 <_ZnwjPv>
 8006cba:	4604      	mov	r4, r0
 8006cbc:	2c00      	cmp	r4, #0
 8006cbe:	d00a      	beq.n	8006cd6 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS7_JRKS7_EEEvPT_DpOT0_+0x3a>
 8006cc0:	4631      	mov	r1, r6
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f002 fb32 	bl	800932c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006cc8:	e005      	b.n	8006cd6 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS7_JRKS7_EEEvPT_DpOT0_+0x3a>
 8006cca:	4629      	mov	r1, r5
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f7ff fd3c 	bl	800674a <_ZdlPvS_>
 8006cd2:	f001 fcd2 	bl	800867a <__cxa_end_cleanup>
 8006cd6:	bf00      	nop
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006cde <_ZN9__gnu_cxx16__aligned_membufIjE6_M_ptrEv>:
      _M_ptr() noexcept
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b082      	sub	sp, #8
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f823 	bl	8006d32 <_ZN9__gnu_cxx16__aligned_membufIjE7_M_addrEv>
 8006cec:	4603      	mov	r3, r0
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	60f8      	str	r0, [r7, #12]
 8006cfe:	60b9      	str	r1, [r7, #8]
 8006d00:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 f81f 	bl	8006d46 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeEv>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	bf8c      	ite	hi
 8006d10:	2301      	movhi	r3, #1
 8006d12:	2300      	movls	r3, #0
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006d1a:	f002 f85a 	bl	8008dd2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	015b      	lsls	r3, r3, #5
 8006d22:	4618      	mov	r0, r3
 8006d24:	f002 f808 	bl	8008d38 <_Znwj>
 8006d28:	4603      	mov	r3, r0
      }
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <_ZN9__gnu_cxx16__aligned_membufIjE7_M_addrEv>:
      _M_addr() noexcept
 8006d32:	b480      	push	{r7}
 8006d34:	b083      	sub	sp, #12
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bc80      	pop	{r7}
 8006d44:	4770      	bx	lr

08006d46 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8006d4e:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8006d52:	4618      	mov	r0, r3
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bc80      	pop	{r7}
 8006d5a:	4770      	bx	lr

08006d5c <_Z41__static_initialization_and_destruction_0ii>:
CGPSModule::GpsData CGPSModule::GetGpsData()
{
	return this->m_GpsData;
}

} /* namespace wyz */
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d109      	bne.n	8006d80 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d104      	bne.n	8006d80 <_Z41__static_initialization_and_destruction_0ii+0x24>
CTimerMeter * pTimerMeter = CTimerMeter::GetTimerMeterInstance();
 8006d76:	f7ff fcf3 	bl	8006760 <_ZN3wyz11CTimerMeter21GetTimerMeterInstanceEv>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	4b02      	ldr	r3, [pc, #8]	; (8006d88 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8006d7e:	601a      	str	r2, [r3, #0]
} /* namespace wyz */
 8006d80:	bf00      	nop
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	20000f54 	.word	0x20000f54

08006d8c <_GLOBAL__sub_I__ZN3wyz11pTimerMeterE>:
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006d94:	2001      	movs	r0, #1
 8006d96:	f7ff ffe1 	bl	8006d5c <_Z41__static_initialization_and_destruction_0ii>
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <_ZN3wyz11CTimerMeterC1Ev>:

#include <CTimerMeter.h>

namespace wyz {

CTimerMeter::CTimerMeter() {
 8006d9c:	b490      	push	{r4, r7}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	f04f 0300 	mov.w	r3, #0
 8006daa:	f04f 0400 	mov.w	r4, #0
 8006dae:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	741a      	strb	r2, [r3, #16]
	// TODO Auto-generated constructor stub

}
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bc90      	pop	{r4, r7}
 8006dc2:	4770      	bx	lr

08006dc4 <_ZN3wyz7CDeviceC1Ev>:
#include  "CObserver.h"
#include "main.h"
namespace wyz {
using namespace std;

class CDevice {  //驱动程序基类
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	4a04      	ldr	r2, [pc, #16]	; (8006de0 <_ZN3wyz7CDeviceC1Ev+0x1c>)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bc80      	pop	{r7}
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	0800b57c 	.word	0x0800b57c

08006de4 <_ZN3wyz8CSubjectC1Ev>:
#define CLASS_CSUBJECT_H_

namespace wyz {
class CObserver;

class CSubject {
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	4a04      	ldr	r2, [pc, #16]	; (8006e00 <_ZN3wyz8CSubjectC1Ev+0x1c>)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4618      	mov	r0, r3
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bc80      	pop	{r7}
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	0800b59c 	.word	0x0800b59c

08006e04 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EED1Ev>:
      ~list() = default;
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 f9a3 	bl	800715a <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EED1Ev>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4618      	mov	r0, r3
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
	...

08006e20 <_ZN3wyz5CUartC1EP20__UART_HandleTypeDefmmh>:
#include "CUart.h"
#include "main.h"

namespace wyz {

CUart::CUart(UART_HandleTypeDef *huart,uint32_t SizeOfRxBuf,uint32_t SizeOfTxBuf,uint8_t Mode ) {
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
 8006e2c:	603b      	str	r3, [r7, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7ff ffc7 	bl	8006dc4 <_ZN3wyz7CDeviceC1Ev>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	3304      	adds	r3, #4
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7ff ffd2 	bl	8006de4 <_ZN3wyz8CSubjectC1Ev>
 8006e40:	4a1c      	ldr	r2, [pc, #112]	; (8006eb4 <_ZN3wyz5CUartC1EP20__UART_HandleTypeDefmmh+0x94>)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	4a1c      	ldr	r2, [pc, #112]	; (8006eb8 <_ZN3wyz5CUartC1EP20__UART_HandleTypeDefmmh+0x98>)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	605a      	str	r2, [r3, #4]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	3320      	adds	r3, #32
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 f969 	bl	8007128 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EEC1Ev>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	// TODO Auto-generated constructor stubthis
	this->m_Huart=huart;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	609a      	str	r2, [r3, #8]
	this->m_SizeOfRxBuf=SizeOfRxBuf;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	60da      	str	r2, [r3, #12]
	this->m_SizeOfTxBuf=SizeOfTxBuf;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	611a      	str	r2, [r3, #16]
	this->m_pRxBuf= new uint8_t[SizeOfRxBuf*2]; //读缓存,*2好用双缓存模式
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	005b      	lsls	r3, r3, #1
 8006e74:	4618      	mov	r0, r3
 8006e76:	f001 fcbf 	bl	80087f8 <_Znaj>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	615a      	str	r2, [r3, #20]
	this->m_pTxBuf =new uint8_t[SizeOfTxBuf];
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f001 fcb7 	bl	80087f8 <_Znaj>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	619a      	str	r2, [r3, #24]
	m_UartMode=Mode;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	7e3a      	ldrb	r2, [r7, #24]
 8006e96:	771a      	strb	r2, [r3, #28]
}
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	e006      	b.n	8006eaa <_ZN3wyz5CUartC1EP20__UART_HandleTypeDefmmh+0x8a>
CUart::CUart(UART_HandleTypeDef *huart,uint32_t SizeOfRxBuf,uint32_t SizeOfTxBuf,uint8_t Mode ) {
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3320      	adds	r3, #32
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7ff ffaf 	bl	8006e04 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EED1Ev>
 8006ea6:	f001 fbe8 	bl	800867a <__cxa_end_cleanup>
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	0800b53c 	.word	0x0800b53c
 8006eb8:	0800b568 	.word	0x0800b568

08006ebc <_ZN3wyz5CUart4OpenEv>:
};


/*******************************************/
uint8_t CUart::Open()
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
	return 0;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bc80      	pop	{r7}
 8006ece:	4770      	bx	lr

08006ed0 <_ZN3wyz5CUart5CloseEv>:
uint8_t CUart::Close()
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
	return 0;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bc80      	pop	{r7}
 8006ee2:	4770      	bx	lr

08006ee4 <_ZN3wyz5CUart14GetSizeOfRxBufEv>:

uint32_t CUart::GetSizeOfRxBuf()
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
	return this->m_SizeOfRxBuf;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68db      	ldr	r3, [r3, #12]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bc80      	pop	{r7}
 8006ef8:	4770      	bx	lr

08006efa <_ZN3wyz5CUart15GetPointOfRxBufEv>:

uint8_t* CUart::GetPointOfRxBuf()
{
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
	if(this->m_InterruptMode == m_UART_RxCplt)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d105      	bne.n	8006f18 <_ZN3wyz5CUart15GetPointOfRxBufEv+0x1e>
	{
		return this->m_pRxBuf+this->m_SizeOfRxBuf;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	695a      	ldr	r2, [r3, #20]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	4413      	add	r3, r2
 8006f16:	e001      	b.n	8006f1c <_ZN3wyz5CUart15GetPointOfRxBufEv+0x22>
	}
	else
	{
		return this->m_pRxBuf;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	695b      	ldr	r3, [r3, #20]
	}
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bc80      	pop	{r7}
 8006f24:	4770      	bx	lr

08006f26 <_ZN3wyz5CUart9BlockReadEPhmm>:
void CUart::BlockRead(uint8_t* pDataBuf,uint32_t Size,uint32_t TimeOut)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	60f8      	str	r0, [r7, #12]
 8006f2e:	60b9      	str	r1, [r7, #8]
 8006f30:	607a      	str	r2, [r7, #4]
 8006f32:	603b      	str	r3, [r7, #0]
	HAL_UART_Receive(this->m_Huart,pDataBuf,Size,TimeOut);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6898      	ldr	r0, [r3, #8]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	68b9      	ldr	r1, [r7, #8]
 8006f40:	f7fc fac0 	bl	80034c4 <HAL_UART_Receive>
}
 8006f44:	bf00      	nop
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <_ZN3wyz5CUart10BlockwriteEPhmm>:

void CUart::Blockwrite(uint8_t* pDataBuf,uint32_t Size,uint32_t TimeOut)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
 8006f58:	603b      	str	r3, [r7, #0]
	HAL_UART_Transmit(this->m_Huart,pDataBuf,Size,TimeOut);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6898      	ldr	r0, [r3, #8]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	68b9      	ldr	r1, [r7, #8]
 8006f66:	f7fc fa14 	bl	8003392 <HAL_UART_Transmit>
}
 8006f6a:	bf00      	nop
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <_ZN3wyz5CUart12NonBlockReadEPhmm>:

void CUart::NonBlockRead(uint8_t* pDataBuf,uint32_t Size,uint32_t TimeOut)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b084      	sub	sp, #16
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	60b9      	str	r1, [r7, #8]
 8006f7c:	607a      	str	r2, [r7, #4]
 8006f7e:	603b      	str	r3, [r7, #0]
    if(m_UartMode == m_UsingDMAMode)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	7f1b      	ldrb	r3, [r3, #28]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d108      	bne.n	8006f9a <_ZN3wyz5CUart12NonBlockReadEPhmm+0x28>
    {
    	HAL_UART_Receive_DMA(this->m_Huart,pDataBuf,Size);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	b292      	uxth	r2, r2
 8006f90:	68b9      	ldr	r1, [r7, #8]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fc fc40 	bl	8003818 <HAL_UART_Receive_DMA>
    	HAL_UART_Receive_IT(this->m_Huart,pDataBuf,Size);
    }else if(m_UartMode == m_UsingBlockMode)
    {
    	//配置错误
    }
}
 8006f98:	e00b      	b.n	8006fb2 <_ZN3wyz5CUart12NonBlockReadEPhmm+0x40>
    else if(m_UartMode == m_UsingITMode)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	7f1b      	ldrb	r3, [r3, #28]
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d107      	bne.n	8006fb2 <_ZN3wyz5CUart12NonBlockReadEPhmm+0x40>
    	HAL_UART_Receive_IT(this->m_Huart,pDataBuf,Size);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	b292      	uxth	r2, r2
 8006faa:	68b9      	ldr	r1, [r7, #8]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fc fb73 	bl	8003698 <HAL_UART_Receive_IT>
}
 8006fb2:	bf00      	nop
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <_ZN3wyz5CUart13NonBlockWriteEPhmm>:

void CUart::NonBlockWrite(uint8_t* pDataBuf,uint32_t Size,uint32_t TimeOut)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b084      	sub	sp, #16
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	60f8      	str	r0, [r7, #12]
 8006fc2:	60b9      	str	r1, [r7, #8]
 8006fc4:	607a      	str	r2, [r7, #4]
 8006fc6:	603b      	str	r3, [r7, #0]
	 if(m_UartMode == m_UsingDMAMode)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	7f1b      	ldrb	r3, [r3, #28]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d108      	bne.n	8006fe2 <_ZN3wyz5CUart13NonBlockWriteEPhmm+0x28>
	 {
		 HAL_UART_Transmit_DMA(this->m_Huart,pDataBuf,Size);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	b292      	uxth	r2, r2
 8006fd8:	68b9      	ldr	r1, [r7, #8]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fc fbb0 	bl	8003740 <HAL_UART_Transmit_DMA>
	 	 HAL_UART_Transmit_IT(this->m_Huart,pDataBuf,Size);
	 }else if(m_UartMode == m_UsingBlockMode)
	 {
	 	//配置错误
	 }
}
 8006fe0:	e00b      	b.n	8006ffa <_ZN3wyz5CUart13NonBlockWriteEPhmm+0x40>
	 else if(m_UartMode == m_UsingITMode)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	7f1b      	ldrb	r3, [r3, #28]
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d107      	bne.n	8006ffa <_ZN3wyz5CUart13NonBlockWriteEPhmm+0x40>
	 	 HAL_UART_Transmit_IT(this->m_Huart,pDataBuf,Size);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	b292      	uxth	r2, r2
 8006ff2:	68b9      	ldr	r1, [r7, #8]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7fc fb0b 	bl	8003610 <HAL_UART_Transmit_IT>
}
 8006ffa:	bf00      	nop
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <_ZN3wyz5CUart6AttachEPNS_9CObserverE>:
/************************************************/
void CUart::Attach(CObserver* pObserver)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b082      	sub	sp, #8
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	6039      	str	r1, [r7, #0]
	m_ObserverList.push_back(pObserver);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	3320      	adds	r3, #32
 8007010:	463a      	mov	r2, r7
 8007012:	4611      	mov	r1, r2
 8007014:	4618      	mov	r0, r3
 8007016:	f000 f8b0 	bl	800717a <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE9push_backERKS3_>
	StartObserverMode();
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f854 	bl	80070c8 <_ZN3wyz5CUart17StartObserverModeEv>
}
 8007020:	bf00      	nop
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <_ZThn4_N3wyz5CUart6AttachEPNS_9CObserverE>:
	void BlockRead(uint8_t *pDataBuf,uint32_t Size,uint32_t TimeOut=200);
	void Blockwrite(uint8_t *pDataBuf,uint32_t Size,uint32_t TimeOut=200);
	void NonBlockRead(uint8_t *pDataBuf,uint32_t Size,uint32_t TimeOut=0);
	void NonBlockWrite(uint8_t *pDataBuf,uint32_t Size,uint32_t TimeOut=0);
	/*************继承自CSubject*********************/
	void Attach(CObserver* pObserver);
 8007028:	f1a0 0004 	sub.w	r0, r0, #4
 800702c:	f7ff bfe9 	b.w	8007002 <_ZN3wyz5CUart6AttachEPNS_9CObserverE>

08007030 <_ZN3wyz5CUart6DetachEPNS_9CObserverE>:

void CUart::Detach(CObserver* pObserver)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
	m_ObserverList.remove(pObserver);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	3320      	adds	r3, #32
 800703e:	463a      	mov	r2, r7
 8007040:	4611      	mov	r1, r2
 8007042:	4618      	mov	r0, r3
 8007044:	f000 f8ab 	bl	800719e <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_>
}
 8007048:	bf00      	nop
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <_ZThn4_N3wyz5CUart6DetachEPNS_9CObserverE>:
	void Detach(CObserver* pObserver);
 8007050:	f1a0 0004 	sub.w	r0, r0, #4
 8007054:	f7ff bfec 	b.w	8007030 <_ZN3wyz5CUart6DetachEPNS_9CObserverE>

08007058 <_ZN3wyz5CUart6NotifyEv>:

void CUart::Notify()
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]

	list<CObserver*>::iterator item = m_ObserverList.begin();
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3320      	adds	r3, #32
 8007064:	4618      	mov	r0, r3
 8007066:	f000 f8ff 	bl	8007268 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE5beginEv>
 800706a:	4603      	mov	r3, r0
 800706c:	60bb      	str	r3, [r7, #8]
	while(item != m_ObserverList.end())
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	3320      	adds	r3, #32
 8007072:	4618      	mov	r0, r3
 8007074:	f000 f909 	bl	800728a <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE3endEv>
 8007078:	4603      	mov	r3, r0
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	f107 020c 	add.w	r2, r7, #12
 8007080:	f107 0308 	add.w	r3, r7, #8
 8007084:	4611      	mov	r1, r2
 8007086:	4618      	mov	r0, r3
 8007088:	f000 f90f 	bl	80072aa <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEneERKS3_>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d012      	beq.n	80070b8 <_ZN3wyz5CUart6NotifyEv+0x60>
	{
		(*item)->Update(this);
 8007092:	f107 0308 	add.w	r3, r7, #8
 8007096:	4618      	mov	r0, r3
 8007098:	f000 f91a 	bl	80072d0 <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEdeEv>
 800709c:	4603      	mov	r3, r0
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	6812      	ldr	r2, [r2, #0]
 80070a4:	6879      	ldr	r1, [r7, #4]
 80070a6:	3104      	adds	r1, #4
 80070a8:	4618      	mov	r0, r3
 80070aa:	4790      	blx	r2
		++item;
 80070ac:	f107 0308 	add.w	r3, r7, #8
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 f91b 	bl	80072ec <_ZNSt14_List_iteratorIPN3wyz9CObserverEEppEv>
	while(item != m_ObserverList.end())
 80070b6:	e7da      	b.n	800706e <_ZN3wyz5CUart6NotifyEv+0x16>
	}
}
 80070b8:	bf00      	nop
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <_ZThn4_N3wyz5CUart6NotifyEv>:
	void Notify();
 80070c0:	f1a0 0004 	sub.w	r0, r0, #4
 80070c4:	f7ff bfc8 	b.w	8007058 <_ZN3wyz5CUart6NotifyEv>

080070c8 <_ZN3wyz5CUart17StartObserverModeEv>:

void CUart::StartObserverMode()
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(this->m_Huart,m_pRxBuf,this->m_SizeOfRxBuf*2);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6898      	ldr	r0, [r3, #8]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6959      	ldr	r1, [r3, #20]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	461a      	mov	r2, r3
 80070e4:	f7fc fb98 	bl	8003818 <HAL_UART_Receive_DMA>
}
 80070e8:	bf00      	nop
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <_ZN3wyz5CUart13HardInterruptEP20__UART_HandleTypeDefh>:
/*****************************************************/
void CUart::HardInterrupt(UART_HandleTypeDef * huart,uint8_t interruptMode)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	4613      	mov	r3, r2
 80070fc:	71fb      	strb	r3, [r7, #7]
	this->m_InterruptMode = interruptMode;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	79fa      	ldrb	r2, [r7, #7]
 8007102:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	if(huart->Instance == this->m_Huart->Instance) //是本串口的中断函数
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	429a      	cmp	r2, r3
 8007112:	d105      	bne.n	8007120 <_ZN3wyz5CUart13HardInterruptEP20__UART_HandleTypeDefh+0x30>
	{
		this->Notify();
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	3320      	adds	r3, #32
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	4798      	blx	r3
	}else
	{
		//设置错误
	}
}
 8007120:	bf00      	nop
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EEC1Ev>:
      list()
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4618      	mov	r0, r3
 8007134:	f000 f8e9 	bl	800730a <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EEC1Ev>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4618      	mov	r0, r3
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE10_List_implD1Ev>:
      struct _List_impl
 8007142:	b580      	push	{r7, lr}
 8007144:	b082      	sub	sp, #8
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f8ed 	bl	800732a <_ZNSaISt10_List_nodeIPN3wyz9CObserverEEED1Ev>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 800715a:	b580      	push	{r7, lr}
 800715c:	b082      	sub	sp, #8
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f8ed 	bl	8007342 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE8_M_clearEv>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4618      	mov	r0, r3
 800716c:	f7ff ffe9 	bl	8007142 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE10_List_implD1Ev>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4618      	mov	r0, r3
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE9push_backERKS3_>:
      push_back(const value_type& __x)
 800717a:	b580      	push	{r7, lr}
 800717c:	b082      	sub	sp, #8
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	6039      	str	r1, [r7, #0]
      { this->_M_insert(end(), __x); }
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f880 	bl	800728a <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE3endEv>
 800718a:	4603      	mov	r3, r0
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f905 	bl	80073a0 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE9_M_insertIJRKS3_EEEvSt14_List_iteratorIS3_EDpOT_>
 8007196:	bf00      	nop
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_>:
          insert(__last1, __first2, __last2);
      }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
 800719e:	b590      	push	{r4, r7, lr}
 80071a0:	b087      	sub	sp, #28
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	6039      	str	r1, [r7, #0]
    remove(const value_type& __value)
    {
      iterator __first = begin();
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f85d 	bl	8007268 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE5beginEv>
 80071ae:	4603      	mov	r3, r0
 80071b0:	617b      	str	r3, [r7, #20]
      iterator __last = end();
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f869 	bl	800728a <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE3endEv>
 80071b8:	4603      	mov	r3, r0
 80071ba:	613b      	str	r3, [r7, #16]
      iterator __extra = __last;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	60fb      	str	r3, [r7, #12]
      while (__first != __last)
 80071c0:	f107 0210 	add.w	r2, r7, #16
 80071c4:	f107 0314 	add.w	r3, r7, #20
 80071c8:	4611      	mov	r1, r2
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 f86d 	bl	80072aa <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEneERKS3_>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d035      	beq.n	8007242 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_+0xa4>
	{
	  iterator __next = __first;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	60bb      	str	r3, [r7, #8]
	  ++__next;
 80071da:	f107 0308 	add.w	r3, r7, #8
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 f884 	bl	80072ec <_ZNSt14_List_iteratorIPN3wyz9CObserverEEppEv>
	  if (*__first == __value)
 80071e4:	f107 0314 	add.w	r3, r7, #20
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 f871 	bl	80072d0 <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEdeEv>
 80071ee:	4603      	mov	r3, r0
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	bf0c      	ite	eq
 80071fa:	2301      	moveq	r3, #1
 80071fc:	2300      	movne	r3, #0
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b00      	cmp	r3, #0
 8007202:	d01b      	beq.n	800723c <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_+0x9e>
	    {
	      // _GLIBCXX_RESOLVE_LIB_DEFECTS
	      // 526. Is it undefined if a function in the standard changes
	      // in parameters?
	      if (std::__addressof(*__first) != std::__addressof(__value))
 8007204:	f107 0314 	add.w	r3, r7, #20
 8007208:	4618      	mov	r0, r3
 800720a:	f000 f861 	bl	80072d0 <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEdeEv>
 800720e:	4603      	mov	r3, r0
 8007210:	4618      	mov	r0, r3
 8007212:	f000 f8e4 	bl	80073de <_ZSt11__addressofIPN3wyz9CObserverEEPT_RS3_>
 8007216:	4604      	mov	r4, r0
 8007218:	6838      	ldr	r0, [r7, #0]
 800721a:	f000 f8ea 	bl	80073f2 <_ZSt11__addressofIKPN3wyz9CObserverEEPT_RS4_>
 800721e:	4603      	mov	r3, r0
 8007220:	429c      	cmp	r4, r3
 8007222:	bf14      	ite	ne
 8007224:	2301      	movne	r3, #1
 8007226:	2300      	moveq	r3, #0
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d004      	beq.n	8007238 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_+0x9a>
		_M_erase(__first);
 800722e:	6979      	ldr	r1, [r7, #20]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f8e8 	bl	8007406 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE8_M_eraseESt14_List_iteratorIS3_E>
 8007236:	e001      	b.n	800723c <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_+0x9e>
	      else
		__extra = __first;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	60fb      	str	r3, [r7, #12]
	    }
	  __first = __next;
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	617b      	str	r3, [r7, #20]
      while (__first != __last)
 8007240:	e7be      	b.n	80071c0 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_+0x22>
	}
      if (__extra != __last)
 8007242:	f107 0210 	add.w	r2, r7, #16
 8007246:	f107 030c 	add.w	r3, r7, #12
 800724a:	4611      	mov	r1, r2
 800724c:	4618      	mov	r0, r3
 800724e:	f000 f82c 	bl	80072aa <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEneERKS3_>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_+0xc2>
	_M_erase(__extra);
 8007258:	68f9      	ldr	r1, [r7, #12]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f8d3 	bl	8007406 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE8_M_eraseESt14_List_iteratorIS3_E>
    }
 8007260:	bf00      	nop
 8007262:	371c      	adds	r7, #28
 8007264:	46bd      	mov	sp, r7
 8007266:	bd90      	pop	{r4, r7, pc}

08007268 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	f107 030c 	add.w	r3, r7, #12
 8007278:	4611      	mov	r1, r2
 800727a:	4618      	mov	r0, r3
 800727c:	f000 f8e9 	bl	8007452 <_ZNSt14_List_iteratorIPN3wyz9CObserverEEC1EPNSt8__detail15_List_node_baseE>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	f107 030c 	add.w	r3, r7, #12
 8007298:	4611      	mov	r1, r2
 800729a:	4618      	mov	r0, r3
 800729c:	f000 f8d9 	bl	8007452 <_ZNSt14_List_iteratorIPN3wyz9CObserverEEC1EPNSt8__detail15_List_node_baseE>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEneERKS3_>:
      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT
 80072aa:	b480      	push	{r7}
 80072ac:	b083      	sub	sp, #12
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
 80072b2:	6039      	str	r1, [r7, #0]
      { return _M_node != __x._M_node; }
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	429a      	cmp	r2, r3
 80072be:	bf14      	ite	ne
 80072c0:	2301      	movne	r3, #1
 80072c2:	2300      	moveq	r3, #0
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	4618      	mov	r0, r3
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bc80      	pop	{r7}
 80072ce:	4770      	bx	lr

080072d0 <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4618      	mov	r0, r3
 80072de:	f000 f8c6 	bl	800746e <_ZNSt10_List_nodeIPN3wyz9CObserverEE9_M_valptrEv>
 80072e2:	4603      	mov	r3, r0
 80072e4:	4618      	mov	r0, r3
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <_ZNSt14_List_iteratorIPN3wyz9CObserverEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	601a      	str	r2, [r3, #0]
	return *this;
 80072fe:	687b      	ldr	r3, [r7, #4]
      }
 8007300:	4618      	mov	r0, r3
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	bc80      	pop	{r7}
 8007308:	4770      	bx	lr

0800730a <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EEC1Ev>:
      _List_base()
 800730a:	b580      	push	{r7, lr}
 800730c:	b082      	sub	sp, #8
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4618      	mov	r0, r3
 8007316:	f000 f8b8 	bl	800748a <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE10_List_implC1Ev>
      { _M_init(); }
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f8c7 	bl	80074ae <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE7_M_initEv>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4618      	mov	r0, r3
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <_ZNSaISt10_List_nodeIPN3wyz9CObserverEEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 800732a:	b580      	push	{r7, lr}
 800732c:	b082      	sub	sp, #8
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f8cd 	bl	80074d2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEED1Ev>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4618      	mov	r0, r3
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 8007342:	b580      	push	{r7, lr}
 8007344:	b086      	sub	sp, #24
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	429a      	cmp	r2, r3
 8007356:	d015      	beq.n	8007384 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE8_M_clearEv+0x42>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 8007362:	6938      	ldr	r0, [r7, #16]
 8007364:	f000 f883 	bl	800746e <_ZNSt10_List_nodeIPN3wyz9CObserverEE9_M_valptrEv>
 8007368:	60f8      	str	r0, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f8bb 	bl	80074e6 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE21_M_get_Node_allocatorEv>
 8007370:	4603      	mov	r3, r0
 8007372:	68f9      	ldr	r1, [r7, #12]
 8007374:	4618      	mov	r0, r3
 8007376:	f000 f8c0 	bl	80074fa <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE7destroyIS3_EEvRS5_PT_>
	  _M_put_node(__tmp);
 800737a:	6939      	ldr	r1, [r7, #16]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f8c9 	bl	8007514 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>
      while (__cur != &_M_impl._M_node)
 8007382:	e7e5      	b.n	8007350 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE8_M_clearEv+0xe>
    }
 8007384:	bf00      	nop
 8007386:	3718      	adds	r7, #24
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <_ZSt7forwardIRKPN3wyz9CObserverEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4618      	mov	r0, r3
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	bc80      	pop	{r7}
 800739e:	4770      	bx	lr

080073a0 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE9_M_insertIJRKS3_EEEvSt14_List_iteratorIS3_EDpOT_>:
       _M_insert(iterator __position, _Args&&... __args)
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7ff ffed 	bl	800738c <_ZSt7forwardIRKPN3wyz9CObserverEEOT_RNSt16remove_referenceIS5_E4typeE>
 80073b2:	4603      	mov	r3, r0
 80073b4:	4619      	mov	r1, r3
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 f8bb 	bl	8007532 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt10_List_nodeIS3_EDpOT_>
 80073bc:	4603      	mov	r3, r0
 80073be:	617b      	str	r3, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	4611      	mov	r1, r2
 80073c6:	4618      	mov	r0, r3
 80073c8:	f001 fcf7 	bl	8008dba <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2101      	movs	r1, #1
 80073d0:	4618      	mov	r0, r3
 80073d2:	f000 f8eb 	bl	80075ac <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_inc_sizeEj>
       }
 80073d6:	bf00      	nop
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <_ZSt11__addressofIPN3wyz9CObserverEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80073de:	b480      	push	{r7}
 80073e0:	b083      	sub	sp, #12
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4618      	mov	r0, r3
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bc80      	pop	{r7}
 80073f0:	4770      	bx	lr

080073f2 <_ZSt11__addressofIKPN3wyz9CObserverEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80073f2:	b480      	push	{r7}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4618      	mov	r0, r3
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	bc80      	pop	{r7}
 8007404:	4770      	bx	lr

08007406 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE8_M_eraseESt14_List_iteratorIS3_E>:
#endif

      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
 8007406:	b590      	push	{r4, r7, lr}
 8007408:	b085      	sub	sp, #20
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	6039      	str	r1, [r7, #0]
      {
	this->_M_dec_size(1);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2101      	movs	r1, #1
 8007414:	4618      	mov	r0, r3
 8007416:	f000 f8db 	bl	80075d0 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_dec_sizeEj>
	__position._M_node->_M_unhook();
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	4618      	mov	r0, r3
 800741e:	f001 fcd3 	bl	8008dc8 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	_Node* __n = static_cast<_Node*>(__position._M_node);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	60fb      	str	r3, [r7, #12]
#if __cplusplus >= 201103L
	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4618      	mov	r0, r3
 800742a:	f000 f85c 	bl	80074e6 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE21_M_get_Node_allocatorEv>
 800742e:	4604      	mov	r4, r0
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f000 f81c 	bl	800746e <_ZNSt10_List_nodeIPN3wyz9CObserverEE9_M_valptrEv>
 8007436:	4603      	mov	r3, r0
 8007438:	4619      	mov	r1, r3
 800743a:	4620      	mov	r0, r4
 800743c:	f000 f85d 	bl	80074fa <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE7destroyIS3_EEvRS5_PT_>
#else
	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
#endif

	_M_put_node(__n);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68f9      	ldr	r1, [r7, #12]
 8007444:	4618      	mov	r0, r3
 8007446:	f000 f865 	bl	8007514 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>
      }
 800744a:	bf00      	nop
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	bd90      	pop	{r4, r7, pc}

08007452 <_ZNSt14_List_iteratorIPN3wyz9CObserverEEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8007452:	b480      	push	{r7}
 8007454:	b083      	sub	sp, #12
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4618      	mov	r0, r3
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	bc80      	pop	{r7}
 800746c:	4770      	bx	lr

0800746e <_ZNSt10_List_nodeIPN3wyz9CObserverEE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 800746e:	b580      	push	{r7, lr}
 8007470:	b082      	sub	sp, #8
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	3308      	adds	r3, #8
 800747a:	4618      	mov	r0, r3
 800747c:	f000 f8ba 	bl	80075f4 <_ZN9__gnu_cxx16__aligned_membufIPN3wyz9CObserverEE6_M_ptrEv>
 8007480:	4603      	mov	r3, r0
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type(), _M_node()
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f8ba 	bl	800760c <_ZNSaISt10_List_nodeIPN3wyz9CObserverEEEC1Ev>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	461a      	mov	r2, r3
 800749c:	2300      	movs	r3, #0
 800749e:	6013      	str	r3, [r2, #0]
 80074a0:	6053      	str	r3, [r2, #4]
 80074a2:	6093      	str	r3, [r2, #8]
	{ }
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4618      	mov	r0, r3
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE7_M_initEv>:
      _M_init() _GLIBCXX_NOEXCEPT
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b082      	sub	sp, #8
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
	this->_M_impl._M_node._M_next = &this->_M_impl._M_node;
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	605a      	str	r2, [r3, #4]
	_M_set_size(0);
 80074c2:	2100      	movs	r1, #0
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f8ad 	bl	8007624 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_set_sizeEj>
      }
 80074ca:	bf00      	nop
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80074d2:	b480      	push	{r7}
 80074d4:	b083      	sub	sp, #12
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4618      	mov	r0, r3
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bc80      	pop	{r7}
 80074e4:	4770      	bx	lr

080074e6 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4618      	mov	r0, r3
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bc80      	pop	{r7}
 80074f8:	4770      	bx	lr

080074fa <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE7destroyIS3_EEvRS5_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b082      	sub	sp, #8
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f89c 	bl	8007644 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE7destroyIS4_EEvPT_>
 800750c:	bf00      	nop
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	4618      	mov	r0, r3
 8007526:	f000 f897 	bl	8007658 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE10deallocateERS5_PS4_j>
 800752a:	bf00      	nop
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt10_List_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8007532:	b590      	push	{r4, r7, lr}
 8007534:	b087      	sub	sp, #28
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4618      	mov	r0, r3
 8007540:	f000 f899 	bl	8007676 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_get_nodeEv>
 8007544:	4603      	mov	r3, r0
 8007546:	617b      	str	r3, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4618      	mov	r0, r3
 800754c:	f7ff ffcb 	bl	80074e6 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE21_M_get_Node_allocatorEv>
 8007550:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8007552:	f107 0308 	add.w	r3, r7, #8
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	6939      	ldr	r1, [r7, #16]
 800755a:	4618      	mov	r0, r3
 800755c:	f000 f899 	bl	8007692 <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN3wyz9CObserverEEEEC1ERS5_PS4_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 8007560:	6978      	ldr	r0, [r7, #20]
 8007562:	f7ff ff84 	bl	800746e <_ZNSt10_List_nodeIPN3wyz9CObserverEE9_M_valptrEv>
 8007566:	4604      	mov	r4, r0
 8007568:	6838      	ldr	r0, [r7, #0]
 800756a:	f7ff ff0f 	bl	800738c <_ZSt7forwardIRKPN3wyz9CObserverEEOT_RNSt16remove_referenceIS5_E4typeE>
 800756e:	4603      	mov	r3, r0
 8007570:	461a      	mov	r2, r3
 8007572:	4621      	mov	r1, r4
 8007574:	6938      	ldr	r0, [r7, #16]
 8007576:	f000 f8b5 	bl	80076e4 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE9constructIS3_JRKS3_EEEvRS5_PT_DpOT0_>
	  __guard = nullptr;
 800757a:	f107 0308 	add.w	r3, r7, #8
 800757e:	2100      	movs	r1, #0
 8007580:	4618      	mov	r0, r3
 8007582:	f000 f8c2 	bl	800770a <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN3wyz9CObserverEEEEaSEDn>
	  return __p;
 8007586:	697c      	ldr	r4, [r7, #20]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8007588:	f107 0308 	add.w	r3, r7, #8
 800758c:	4618      	mov	r0, r3
 800758e:	f000 f894 	bl	80076ba <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN3wyz9CObserverEEEED1Ev>
	  return __p;
 8007592:	4623      	mov	r3, r4
 8007594:	e006      	b.n	80075a4 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt10_List_nodeIS3_EDpOT_+0x72>
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8007596:	f107 0308 	add.w	r3, r7, #8
 800759a:	4618      	mov	r0, r3
 800759c:	f000 f88d 	bl	80076ba <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN3wyz9CObserverEEEED1Ev>
 80075a0:	f001 f86b 	bl	800867a <__cxa_end_cleanup>
	}
 80075a4:	4618      	mov	r0, r3
 80075a6:	371c      	adds	r7, #28
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd90      	pop	{r4, r7, pc}

080075ac <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { *_M_impl._M_node._M_valptr() += __n; }
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7ff fb27 	bl	8006c0c <_ZNSt10_List_nodeIjE9_M_valptrEv>
 80075be:	4603      	mov	r3, r0
 80075c0:	6819      	ldr	r1, [r3, #0]
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	440a      	add	r2, r1
 80075c6:	601a      	str	r2, [r3, #0]
 80075c8:	bf00      	nop
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_dec_sizeEj>:
      void _M_dec_size(size_t __n) { *_M_impl._M_node._M_valptr() -= __n; }
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4618      	mov	r0, r3
 80075de:	f7ff fb15 	bl	8006c0c <_ZNSt10_List_nodeIjE9_M_valptrEv>
 80075e2:	4603      	mov	r3, r0
 80075e4:	6819      	ldr	r1, [r3, #0]
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	1a8a      	subs	r2, r1, r2
 80075ea:	601a      	str	r2, [r3, #0]
 80075ec:	bf00      	nop
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <_ZN9__gnu_cxx16__aligned_membufIPN3wyz9CObserverEE6_M_ptrEv>:
      _M_ptr() noexcept
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f892 	bl	8007726 <_ZN9__gnu_cxx16__aligned_membufIPN3wyz9CObserverEE7_M_addrEv>
 8007602:	4603      	mov	r3, r0
 8007604:	4618      	mov	r0, r3
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <_ZNSaISt10_List_nodeIPN3wyz9CObserverEEEC1Ev>:
      allocator() throw() { }
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f890 	bl	800773a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEEC1Ev>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4618      	mov	r0, r3
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_set_sizeEj>:
      void _M_set_size(size_t __n) { *_M_impl._M_node._M_valptr() = __n; }
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4618      	mov	r0, r3
 8007632:	f7ff faeb 	bl	8006c0c <_ZNSt10_List_nodeIjE9_M_valptrEv>
 8007636:	4602      	mov	r2, r0
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	6013      	str	r3, [r2, #0]
 800763c:	bf00      	nop
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE7destroyIS4_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
 800764e:	bf00      	nop
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	bc80      	pop	{r7}
 8007656:	4770      	bx	lr

08007658 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE10deallocateERS5_PS4_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	68b9      	ldr	r1, [r7, #8]
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 f870 	bl	800774e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE10deallocateEPS5_j>
 800766e:	bf00      	nop
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 8007676:	b580      	push	{r7, lr}
 8007678:	b082      	sub	sp, #8
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2101      	movs	r1, #1
 8007682:	4618      	mov	r0, r3
 8007684:	f000 f870 	bl	8007768 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE8allocateERS5_j>
 8007688:	4603      	mov	r3, r0
 800768a:	4618      	mov	r0, r3
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN3wyz9CObserverEEEEC1ERS5_PS4_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8007692:	b580      	push	{r7, lr}
 8007694:	b084      	sub	sp, #16
 8007696:	af00      	add	r7, sp, #0
 8007698:	60f8      	str	r0, [r7, #12]
 800769a:	60b9      	str	r1, [r7, #8]
 800769c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800769e:	68b8      	ldr	r0, [r7, #8]
 80076a0:	f000 f871 	bl	8007786 <_ZSt11__addressofISaISt10_List_nodeIPN3wyz9CObserverEEEEPT_RS6_>
 80076a4:	4602      	mov	r2, r0
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	605a      	str	r2, [r3, #4]
      { }
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN3wyz9CObserverEEEED1Ev>:
      ~__allocated_ptr()
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b082      	sub	sp, #8
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d007      	beq.n	80076da <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN3wyz9CObserverEEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6818      	ldr	r0, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	4619      	mov	r1, r3
 80076d6:	f7ff ffbf 	bl	8007658 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE10deallocateERS5_PS4_j>
      }
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4618      	mov	r0, r3
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE9constructIS3_JRKS3_EEEvRS5_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7ff fe4b 	bl	800738c <_ZSt7forwardIRKPN3wyz9CObserverEEOT_RNSt16remove_referenceIS5_E4typeE>
 80076f6:	4603      	mov	r3, r0
 80076f8:	461a      	mov	r2, r3
 80076fa:	68b9      	ldr	r1, [r7, #8]
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 f84c 	bl	800779a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>
 8007702:	bf00      	nop
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN3wyz9CObserverEEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800770a:	b480      	push	{r7}
 800770c:	b083      	sub	sp, #12
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	605a      	str	r2, [r3, #4]
	return *this;
 800771a:	687b      	ldr	r3, [r7, #4]
      }
 800771c:	4618      	mov	r0, r3
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	bc80      	pop	{r7}
 8007724:	4770      	bx	lr

08007726 <_ZN9__gnu_cxx16__aligned_membufIPN3wyz9CObserverEE7_M_addrEv>:
      _M_addr() noexcept
 8007726:	b480      	push	{r7}
 8007728:	b083      	sub	sp, #12
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4618      	mov	r0, r3
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	bc80      	pop	{r7}
 8007738:	4770      	bx	lr

0800773a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800773a:	b480      	push	{r7}
 800773c:	b083      	sub	sp, #12
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4618      	mov	r0, r3
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	bc80      	pop	{r7}
 800774c:	4770      	bx	lr

0800774e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE10deallocateEPS5_j>:
      deallocate(pointer __p, size_type)
 800774e:	b580      	push	{r7, lr}
 8007750:	b084      	sub	sp, #16
 8007752:	af00      	add	r7, sp, #0
 8007754:	60f8      	str	r0, [r7, #12]
 8007756:	60b9      	str	r1, [r7, #8]
 8007758:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800775a:	68b8      	ldr	r0, [r7, #8]
 800775c:	f001 fb06 	bl	8008d6c <_ZdlPv>
      }
 8007760:	bf00      	nop
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE8allocateERS5_j>:
      allocate(allocator_type& __a, size_type __n)
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8007772:	2200      	movs	r2, #0
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f827 	bl	80077ca <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE8allocateEjPKv>
 800777c:	4603      	mov	r3, r0
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <_ZSt11__addressofISaISt10_List_nodeIPN3wyz9CObserverEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007786:	b480      	push	{r7}
 8007788:	b083      	sub	sp, #12
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4618      	mov	r0, r3
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	bc80      	pop	{r7}
 8007798:	4770      	bx	lr

0800779a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800779a:	b590      	push	{r4, r7, lr}
 800779c:	b085      	sub	sp, #20
 800779e:	af00      	add	r7, sp, #0
 80077a0:	60f8      	str	r0, [r7, #12]
 80077a2:	60b9      	str	r1, [r7, #8]
 80077a4:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7ff fdf0 	bl	800738c <_ZSt7forwardIRKPN3wyz9CObserverEEOT_RNSt16remove_referenceIS5_E4typeE>
 80077ac:	4603      	mov	r3, r0
 80077ae:	681c      	ldr	r4, [r3, #0]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	4619      	mov	r1, r3
 80077b4:	2004      	movs	r0, #4
 80077b6:	f7fe ffbd 	bl	8006734 <_ZnwjPv>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d000      	beq.n	80077c2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE9constructIS4_JRKS4_EEEvPT_DpOT0_+0x28>
 80077c0:	601c      	str	r4, [r3, #0]
 80077c2:	bf00      	nop
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd90      	pop	{r4, r7, pc}

080077ca <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b084      	sub	sp, #16
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f000 f818 	bl	800780c <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE8max_sizeEv>
 80077dc:	4602      	mov	r2, r0
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	4293      	cmp	r3, r2
 80077e2:	bf8c      	ite	hi
 80077e4:	2301      	movhi	r3, #1
 80077e6:	2300      	movls	r3, #0
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80077ee:	f001 faf0 	bl	8008dd2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	4613      	mov	r3, r2
 80077f6:	005b      	lsls	r3, r3, #1
 80077f8:	4413      	add	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4618      	mov	r0, r3
 80077fe:	f001 fa9b 	bl	8008d38 <_Znwj>
 8007802:	4603      	mov	r3, r0
      }
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8007814:	4b02      	ldr	r3, [pc, #8]	; (8007820 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE8max_sizeEv+0x14>)
 8007816:	4618      	mov	r0, r3
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	bc80      	pop	{r7}
 800781e:	4770      	bx	lr
 8007820:	15555555 	.word	0x15555555

08007824 <_ZN3wyz11CTimerMeter20HardInterruptOfTimerEP17TIM_HandleTypeDef>:
		counter = (double)i;
		this->m_Timer = NULL;
		this->m_FlagOfRun = false;
		return this->m_NumberOfMs + (counter/1000.0);
	}
	void HardInterruptOfTimer(TIM_HandleTypeDef * timer)
 8007824:	b590      	push	{r4, r7, lr}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
	{
		if(this->m_FlagOfRun == true)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	7c1b      	ldrb	r3, [r3, #16]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d017      	beq.n	8007866 <_ZN3wyz11CTimerMeter20HardInterruptOfTimerEP17TIM_HandleTypeDef+0x42>
		{
			if(this->m_Timer != NULL and this->m_Timer->Instance == timer->Instance)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d013      	beq.n	8007866 <_ZN3wyz11CTimerMeter20HardInterruptOfTimerEP17TIM_HandleTypeDef+0x42>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	429a      	cmp	r2, r3
 800784a:	d10c      	bne.n	8007866 <_ZN3wyz11CTimerMeter20HardInterruptOfTimerEP17TIM_HandleTypeDef+0x42>
				{
					this->m_NumberOfMs ++ ;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007852:	f04f 0200 	mov.w	r2, #0
 8007856:	4b06      	ldr	r3, [pc, #24]	; (8007870 <_ZN3wyz11CTimerMeter20HardInterruptOfTimerEP17TIM_HandleTypeDef+0x4c>)
 8007858:	f7f8 fc92 	bl	8000180 <__adddf3>
 800785c:	4603      	mov	r3, r0
 800785e:	460c      	mov	r4, r1
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	e9c2 3402 	strd	r3, r4, [r2, #8]
				}
		}
	}
 8007866:	bf00      	nop
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	bd90      	pop	{r4, r7, pc}
 800786e:	bf00      	nop
 8007870:	3ff00000 	.word	0x3ff00000

08007874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007876:	b09b      	sub	sp, #108	; 0x6c
 8007878:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800787a:	f7fa f8a1 	bl	80019c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800787e:	f000 f8a7 	bl	80079d0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007882:	f000 f9d3 	bl	8007c2c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8007886:	f000 f9ab 	bl	8007be0 <_ZL11MX_DMA_Initv>
  MX_USART1_UART_Init();
 800788a:	f000 f94d 	bl	8007b28 <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 800788e:	f000 f979 	bl	8007b84 <_ZL19MX_USART2_UART_Initv>
  MX_TIM4_Init();
 8007892:	f000 f8ed 	bl	8007a70 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */
/********************************************************************************
 * ***************************************************************************////
  new int[5];
 8007896:	2014      	movs	r0, #20
 8007898:	f000 ffae 	bl	80087f8 <_Znaj>
  HAL_TIM_Base_Start_IT(&htim4);
 800789c:	4846      	ldr	r0, [pc, #280]	; (80079b8 <main+0x144>)
 800789e:	f7fb f9d6 	bl	8002c4e <HAL_TIM_Base_Start_IT>
  CObserver *pGpsModule = new CGPSModule(new CAnalysisOfFrame(100,"$GNRMC","\r\n"));
 80078a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80078a6:	4618      	mov	r0, r3
 80078a8:	f001 fa85 	bl	8008db6 <_ZNSaIcEC1Ev>
 80078ac:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80078b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078b4:	4941      	ldr	r1, [pc, #260]	; (80079bc <main+0x148>)
 80078b6:	4618      	mov	r0, r3
 80078b8:	f001 fd6a 	bl	8009390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80078bc:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80078c0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80078c4:	4618      	mov	r0, r3
 80078c6:	f001 fa76 	bl	8008db6 <_ZNSaIcEC1Ev>
 80078ca:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80078ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80078d2:	493b      	ldr	r1, [pc, #236]	; (80079c0 <main+0x14c>)
 80078d4:	4618      	mov	r0, r3
 80078d6:	f001 fd5b 	bl	8009390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80078da:	f107 0548 	add.w	r5, r7, #72	; 0x48
 80078de:	2068      	movs	r0, #104	; 0x68
 80078e0:	f001 fa2a 	bl	8008d38 <_Znwj>
 80078e4:	4603      	mov	r3, r0
 80078e6:	461e      	mov	r6, r3
 80078e8:	462b      	mov	r3, r5
 80078ea:	4622      	mov	r2, r4
 80078ec:	2164      	movs	r1, #100	; 0x64
 80078ee:	4630      	mov	r0, r6
 80078f0:	f7fe fdd4 	bl	800649c <_ZN3wyz16CAnalysisOfFrameC1EmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
 80078f4:	4635      	mov	r5, r6
 80078f6:	2080      	movs	r0, #128	; 0x80
 80078f8:	f001 fa1e 	bl	8008d38 <_Znwj>
 80078fc:	4603      	mov	r3, r0
 80078fe:	461c      	mov	r4, r3
 8007900:	4629      	mov	r1, r5
 8007902:	4620      	mov	r0, r4
 8007904:	f7fe ff5a 	bl	80067bc <_ZN3wyz10CGPSModuleC1EPNS_9CStrategyE>
 8007908:	667c      	str	r4, [r7, #100]	; 0x64
 800790a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800790e:	4618      	mov	r0, r3
 8007910:	f001 fb69 	bl	8008fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007914:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007918:	4618      	mov	r0, r3
 800791a:	f001 fa4d 	bl	8008db8 <_ZNSaIcED1Ev>
 800791e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007922:	4618      	mov	r0, r3
 8007924:	f001 fb5f 	bl	8008fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007928:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800792c:	4618      	mov	r0, r3
 800792e:	f001 fa43 	bl	8008db8 <_ZNSaIcED1Ev>
  pUart1->Attach(pGpsModule);  //绑定观察
 8007932:	4b24      	ldr	r3, [pc, #144]	; (80079c4 <main+0x150>)
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	4b23      	ldr	r3, [pc, #140]	; (80079c4 <main+0x150>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007940:	4610      	mov	r0, r2
 8007942:	4798      	blx	r3
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8007944:	4b20      	ldr	r3, [pc, #128]	; (80079c8 <main+0x154>)
 8007946:	f107 0418 	add.w	r4, r7, #24
 800794a:	461d      	mov	r5, r3
 800794c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800794e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007950:	682b      	ldr	r3, [r5, #0]
 8007952:	6023      	str	r3, [r4, #0]
  ;
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8007954:	f107 0318 	add.w	r3, r7, #24
 8007958:	2100      	movs	r1, #0
 800795a:	4618      	mov	r0, r3
 800795c:	f7fc fc2c 	bl	80041b8 <osThreadCreate>
 8007960:	4602      	mov	r2, r0
 8007962:	4b1a      	ldr	r3, [pc, #104]	; (80079cc <main+0x158>)
 8007964:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8007966:	f7fc fc20 	bl	80041aa <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  string s;
 800796a:	463b      	mov	r3, r7
 800796c:	4618      	mov	r0, r3
 800796e:	f001 fb33 	bl	8008fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
  while (1)
 8007972:	e7fe      	b.n	8007972 <main+0xfe>
  CObserver *pGpsModule = new CGPSModule(new CAnalysisOfFrame(100,"$GNRMC","\r\n"));
 8007974:	2168      	movs	r1, #104	; 0x68
 8007976:	4630      	mov	r0, r6
 8007978:	f000 ff40 	bl	80087fc <_ZdlPvj>
 800797c:	e004      	b.n	8007988 <main+0x114>
 800797e:	2180      	movs	r1, #128	; 0x80
 8007980:	4620      	mov	r0, r4
 8007982:	f000 ff3b 	bl	80087fc <_ZdlPvj>
 8007986:	e7ff      	b.n	8007988 <main+0x114>
 8007988:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800798c:	4618      	mov	r0, r3
 800798e:	f001 fb2a 	bl	8008fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007992:	e7ff      	b.n	8007994 <main+0x120>
 8007994:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007998:	4618      	mov	r0, r3
 800799a:	f001 fa0d 	bl	8008db8 <_ZNSaIcED1Ev>
 800799e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80079a2:	4618      	mov	r0, r3
 80079a4:	f001 fb1f 	bl	8008fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80079a8:	e7ff      	b.n	80079aa <main+0x136>
 80079aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80079ae:	4618      	mov	r0, r3
 80079b0:	f001 fa02 	bl	8008db8 <_ZNSaIcED1Ev>
 80079b4:	f000 fe61 	bl	800867a <__cxa_end_cleanup>
 80079b8:	20000f58 	.word	0x20000f58
 80079bc:	0800b4d8 	.word	0x0800b4d8
 80079c0:	0800b4e0 	.word	0x0800b4e0
 80079c4:	200010a8 	.word	0x200010a8
 80079c8:	0800b4f0 	.word	0x0800b4f0
 80079cc:	200010a0 	.word	0x200010a0

080079d0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b090      	sub	sp, #64	; 0x40
 80079d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80079d6:	f107 0318 	add.w	r3, r7, #24
 80079da:	2228      	movs	r2, #40	; 0x28
 80079dc:	2100      	movs	r1, #0
 80079de:	4618      	mov	r0, r3
 80079e0:	f001 ffc3 	bl	800996a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80079e4:	1d3b      	adds	r3, r7, #4
 80079e6:	2200      	movs	r2, #0
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	605a      	str	r2, [r3, #4]
 80079ec:	609a      	str	r2, [r3, #8]
 80079ee:	60da      	str	r2, [r3, #12]
 80079f0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80079f2:	2301      	movs	r3, #1
 80079f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80079f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80079fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80079fc:	2300      	movs	r3, #0
 80079fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007a00:	2301      	movs	r3, #1
 8007a02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007a04:	2302      	movs	r3, #2
 8007a06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007a08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007a0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007a0e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007a14:	f107 0318 	add.w	r3, r7, #24
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7fa fca1 	bl	8002360 <HAL_RCC_OscConfig>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	bf14      	ite	ne
 8007a24:	2301      	movne	r3, #1
 8007a26:	2300      	moveq	r3, #0
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8007a2e:	f000 f9d9 	bl	8007de4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007a32:	230f      	movs	r3, #15
 8007a34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007a36:	2302      	movs	r3, #2
 8007a38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007a44:	2300      	movs	r3, #0
 8007a46:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007a48:	1d3b      	adds	r3, r7, #4
 8007a4a:	2102      	movs	r1, #2
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fa ff07 	bl	8002860 <HAL_RCC_ClockConfig>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	bf14      	ite	ne
 8007a58:	2301      	movne	r3, #1
 8007a5a:	2300      	moveq	r3, #0
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8007a62:	f000 f9bf 	bl	8007de4 <Error_Handler>
  }
}
 8007a66:	bf00      	nop
 8007a68:	3740      	adds	r7, #64	; 0x40
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
	...

08007a70 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007a76:	f107 0308 	add.w	r3, r7, #8
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	601a      	str	r2, [r3, #0]
 8007a7e:	605a      	str	r2, [r3, #4]
 8007a80:	609a      	str	r2, [r3, #8]
 8007a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007a84:	463b      	mov	r3, r7
 8007a86:	2200      	movs	r2, #0
 8007a88:	601a      	str	r2, [r3, #0]
 8007a8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007a8c:	4b24      	ldr	r3, [pc, #144]	; (8007b20 <_ZL12MX_TIM4_Initv+0xb0>)
 8007a8e:	4a25      	ldr	r2, [pc, #148]	; (8007b24 <_ZL12MX_TIM4_Initv+0xb4>)
 8007a90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8007a92:	4b23      	ldr	r3, [pc, #140]	; (8007b20 <_ZL12MX_TIM4_Initv+0xb0>)
 8007a94:	2247      	movs	r2, #71	; 0x47
 8007a96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a98:	4b21      	ldr	r3, [pc, #132]	; (8007b20 <_ZL12MX_TIM4_Initv+0xb0>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8007a9e:	4b20      	ldr	r3, [pc, #128]	; (8007b20 <_ZL12MX_TIM4_Initv+0xb0>)
 8007aa0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007aa4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007aa6:	4b1e      	ldr	r3, [pc, #120]	; (8007b20 <_ZL12MX_TIM4_Initv+0xb0>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007aac:	4b1c      	ldr	r3, [pc, #112]	; (8007b20 <_ZL12MX_TIM4_Initv+0xb0>)
 8007aae:	2280      	movs	r2, #128	; 0x80
 8007ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007ab2:	481b      	ldr	r0, [pc, #108]	; (8007b20 <_ZL12MX_TIM4_Initv+0xb0>)
 8007ab4:	f7fb f8a0 	bl	8002bf8 <HAL_TIM_Base_Init>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	bf14      	ite	ne
 8007abe:	2301      	movne	r3, #1
 8007ac0:	2300      	moveq	r3, #0
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d001      	beq.n	8007acc <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8007ac8:	f000 f98c 	bl	8007de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ad0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007ad2:	f107 0308 	add.w	r3, r7, #8
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	4811      	ldr	r0, [pc, #68]	; (8007b20 <_ZL12MX_TIM4_Initv+0xb0>)
 8007ada:	f7fb f9e3 	bl	8002ea4 <HAL_TIM_ConfigClockSource>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	bf14      	ite	ne
 8007ae4:	2301      	movne	r3, #1
 8007ae6:	2300      	moveq	r3, #0
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 8007aee:	f000 f979 	bl	8007de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007af2:	2300      	movs	r3, #0
 8007af4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007af6:	2300      	movs	r3, #0
 8007af8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007afa:	463b      	mov	r3, r7
 8007afc:	4619      	mov	r1, r3
 8007afe:	4808      	ldr	r0, [pc, #32]	; (8007b20 <_ZL12MX_TIM4_Initv+0xb0>)
 8007b00:	f7fb fba4 	bl	800324c <HAL_TIMEx_MasterConfigSynchronization>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bf14      	ite	ne
 8007b0a:	2301      	movne	r3, #1
 8007b0c:	2300      	moveq	r3, #0
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 8007b14:	f000 f966 	bl	8007de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8007b18:	bf00      	nop
 8007b1a:	3718      	adds	r7, #24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	20000f58 	.word	0x20000f58
 8007b24:	40000800 	.word	0x40000800

08007b28 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007b2c:	4b13      	ldr	r3, [pc, #76]	; (8007b7c <_ZL19MX_USART1_UART_Initv+0x54>)
 8007b2e:	4a14      	ldr	r2, [pc, #80]	; (8007b80 <_ZL19MX_USART1_UART_Initv+0x58>)
 8007b30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007b32:	4b12      	ldr	r3, [pc, #72]	; (8007b7c <_ZL19MX_USART1_UART_Initv+0x54>)
 8007b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007b38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007b3a:	4b10      	ldr	r3, [pc, #64]	; (8007b7c <_ZL19MX_USART1_UART_Initv+0x54>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007b40:	4b0e      	ldr	r3, [pc, #56]	; (8007b7c <_ZL19MX_USART1_UART_Initv+0x54>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007b46:	4b0d      	ldr	r3, [pc, #52]	; (8007b7c <_ZL19MX_USART1_UART_Initv+0x54>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007b4c:	4b0b      	ldr	r3, [pc, #44]	; (8007b7c <_ZL19MX_USART1_UART_Initv+0x54>)
 8007b4e:	220c      	movs	r2, #12
 8007b50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007b52:	4b0a      	ldr	r3, [pc, #40]	; (8007b7c <_ZL19MX_USART1_UART_Initv+0x54>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007b58:	4b08      	ldr	r3, [pc, #32]	; (8007b7c <_ZL19MX_USART1_UART_Initv+0x54>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007b5e:	4807      	ldr	r0, [pc, #28]	; (8007b7c <_ZL19MX_USART1_UART_Initv+0x54>)
 8007b60:	f7fb fbca 	bl	80032f8 <HAL_UART_Init>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	bf14      	ite	ne
 8007b6a:	2301      	movne	r3, #1
 8007b6c:	2300      	moveq	r3, #0
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d001      	beq.n	8007b78 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8007b74:	f000 f936 	bl	8007de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007b78:	bf00      	nop
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	20000f98 	.word	0x20000f98
 8007b80:	40013800 	.word	0x40013800

08007b84 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007b88:	4b13      	ldr	r3, [pc, #76]	; (8007bd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8007b8a:	4a14      	ldr	r2, [pc, #80]	; (8007bdc <_ZL19MX_USART2_UART_Initv+0x58>)
 8007b8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007b8e:	4b12      	ldr	r3, [pc, #72]	; (8007bd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8007b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007b94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007b96:	4b10      	ldr	r3, [pc, #64]	; (8007bd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007b9c:	4b0e      	ldr	r3, [pc, #56]	; (8007bd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007ba2:	4b0d      	ldr	r3, [pc, #52]	; (8007bd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007ba8:	4b0b      	ldr	r3, [pc, #44]	; (8007bd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8007baa:	220c      	movs	r2, #12
 8007bac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007bae:	4b0a      	ldr	r3, [pc, #40]	; (8007bd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007bb4:	4b08      	ldr	r3, [pc, #32]	; (8007bd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007bba:	4807      	ldr	r0, [pc, #28]	; (8007bd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8007bbc:	f7fb fb9c 	bl	80032f8 <HAL_UART_Init>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	bf14      	ite	ne
 8007bc6:	2301      	movne	r3, #1
 8007bc8:	2300      	moveq	r3, #0
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d001      	beq.n	8007bd4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8007bd0:	f000 f908 	bl	8007de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007bd4:	bf00      	nop
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	20000fd8 	.word	0x20000fd8
 8007bdc:	40004400 	.word	0x40004400

08007be0 <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007be6:	4b10      	ldr	r3, [pc, #64]	; (8007c28 <_ZL11MX_DMA_Initv+0x48>)
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	4a0f      	ldr	r2, [pc, #60]	; (8007c28 <_ZL11MX_DMA_Initv+0x48>)
 8007bec:	f043 0301 	orr.w	r3, r3, #1
 8007bf0:	6153      	str	r3, [r2, #20]
 8007bf2:	4b0d      	ldr	r3, [pc, #52]	; (8007c28 <_ZL11MX_DMA_Initv+0x48>)
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	607b      	str	r3, [r7, #4]
 8007bfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8007bfe:	2200      	movs	r2, #0
 8007c00:	2105      	movs	r1, #5
 8007c02:	200f      	movs	r0, #15
 8007c04:	f7f9 ffc3 	bl	8001b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8007c08:	200f      	movs	r0, #15
 8007c0a:	f7f9 ffdc 	bl	8001bc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8007c0e:	2200      	movs	r2, #0
 8007c10:	2105      	movs	r1, #5
 8007c12:	2010      	movs	r0, #16
 8007c14:	f7f9 ffbb 	bl	8001b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8007c18:	2010      	movs	r0, #16
 8007c1a:	f7f9 ffd4 	bl	8001bc6 <HAL_NVIC_EnableIRQ>

}
 8007c1e:	bf00      	nop
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	40021000 	.word	0x40021000

08007c2c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b088      	sub	sp, #32
 8007c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c32:	f107 0310 	add.w	r3, r7, #16
 8007c36:	2200      	movs	r2, #0
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	605a      	str	r2, [r3, #4]
 8007c3c:	609a      	str	r2, [r3, #8]
 8007c3e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c40:	4b2a      	ldr	r3, [pc, #168]	; (8007cec <_ZL12MX_GPIO_Initv+0xc0>)
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	4a29      	ldr	r2, [pc, #164]	; (8007cec <_ZL12MX_GPIO_Initv+0xc0>)
 8007c46:	f043 0310 	orr.w	r3, r3, #16
 8007c4a:	6193      	str	r3, [r2, #24]
 8007c4c:	4b27      	ldr	r3, [pc, #156]	; (8007cec <_ZL12MX_GPIO_Initv+0xc0>)
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	f003 0310 	and.w	r3, r3, #16
 8007c54:	60fb      	str	r3, [r7, #12]
 8007c56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007c58:	4b24      	ldr	r3, [pc, #144]	; (8007cec <_ZL12MX_GPIO_Initv+0xc0>)
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	4a23      	ldr	r2, [pc, #140]	; (8007cec <_ZL12MX_GPIO_Initv+0xc0>)
 8007c5e:	f043 0320 	orr.w	r3, r3, #32
 8007c62:	6193      	str	r3, [r2, #24]
 8007c64:	4b21      	ldr	r3, [pc, #132]	; (8007cec <_ZL12MX_GPIO_Initv+0xc0>)
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	f003 0320 	and.w	r3, r3, #32
 8007c6c:	60bb      	str	r3, [r7, #8]
 8007c6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c70:	4b1e      	ldr	r3, [pc, #120]	; (8007cec <_ZL12MX_GPIO_Initv+0xc0>)
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	4a1d      	ldr	r2, [pc, #116]	; (8007cec <_ZL12MX_GPIO_Initv+0xc0>)
 8007c76:	f043 0304 	orr.w	r3, r3, #4
 8007c7a:	6193      	str	r3, [r2, #24]
 8007c7c:	4b1b      	ldr	r3, [pc, #108]	; (8007cec <_ZL12MX_GPIO_Initv+0xc0>)
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	f003 0304 	and.w	r3, r3, #4
 8007c84:	607b      	str	r3, [r7, #4]
 8007c86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c88:	4b18      	ldr	r3, [pc, #96]	; (8007cec <_ZL12MX_GPIO_Initv+0xc0>)
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	4a17      	ldr	r2, [pc, #92]	; (8007cec <_ZL12MX_GPIO_Initv+0xc0>)
 8007c8e:	f043 0308 	orr.w	r3, r3, #8
 8007c92:	6193      	str	r3, [r2, #24]
 8007c94:	4b15      	ldr	r3, [pc, #84]	; (8007cec <_ZL12MX_GPIO_Initv+0xc0>)
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	f003 0308 	and.w	r3, r3, #8
 8007c9c:	603b      	str	r3, [r7, #0]
 8007c9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007ca0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007ca4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007caa:	f107 0310 	add.w	r3, r7, #16
 8007cae:	4619      	mov	r1, r3
 8007cb0:	480f      	ldr	r0, [pc, #60]	; (8007cf0 <_ZL12MX_GPIO_Initv+0xc4>)
 8007cb2:	f7fa f9fb 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5 
                           PA6 PA7 PA8 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8007cb6:	f649 13f3 	movw	r3, #39411	; 0x99f3
 8007cba:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cc0:	f107 0310 	add.w	r3, r7, #16
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	480b      	ldr	r0, [pc, #44]	; (8007cf4 <_ZL12MX_GPIO_Initv+0xc8>)
 8007cc8:	f7fa f9f0 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8007ccc:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8007cd0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cd6:	f107 0310 	add.w	r3, r7, #16
 8007cda:	4619      	mov	r1, r3
 8007cdc:	4806      	ldr	r0, [pc, #24]	; (8007cf8 <_ZL12MX_GPIO_Initv+0xcc>)
 8007cde:	f7fa f9e5 	bl	80020ac <HAL_GPIO_Init>

}
 8007ce2:	bf00      	nop
 8007ce4:	3720      	adds	r7, #32
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	40021000 	.word	0x40021000
 8007cf0:	40011000 	.word	0x40011000
 8007cf4:	40010800 	.word	0x40010800
 8007cf8:	40010c00 	.word	0x40010c00

08007cfc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/*用户中断*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef  *huart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
	static_cast<CUart*>(pUart1)->HardInterrupt(huart,m_UART_RxCplt); //硬件中断处调�???
 8007d04:	4b08      	ldr	r3, [pc, #32]	; (8007d28 <HAL_UART_RxCpltCallback+0x2c>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d003      	beq.n	8007d14 <HAL_UART_RxCpltCallback+0x18>
 8007d0c:	4b06      	ldr	r3, [pc, #24]	; (8007d28 <HAL_UART_RxCpltCallback+0x2c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	3b04      	subs	r3, #4
 8007d12:	e000      	b.n	8007d16 <HAL_UART_RxCpltCallback+0x1a>
 8007d14:	2300      	movs	r3, #0
 8007d16:	2201      	movs	r2, #1
 8007d18:	6879      	ldr	r1, [r7, #4]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7ff f9e8 	bl	80070f0 <_ZN3wyz5CUart13HardInterruptEP20__UART_HandleTypeDefh>
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	200010a8 	.word	0x200010a8

08007d2c <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
	static_cast<CUart*>(pUart1)->HardInterrupt(huart,m_UART_RxHalfCplt); //硬件中断调用
 8007d34:	4b08      	ldr	r3, [pc, #32]	; (8007d58 <HAL_UART_RxHalfCpltCallback+0x2c>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <HAL_UART_RxHalfCpltCallback+0x18>
 8007d3c:	4b06      	ldr	r3, [pc, #24]	; (8007d58 <HAL_UART_RxHalfCpltCallback+0x2c>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3b04      	subs	r3, #4
 8007d42:	e000      	b.n	8007d46 <HAL_UART_RxHalfCpltCallback+0x1a>
 8007d44:	2300      	movs	r3, #0
 8007d46:	2200      	movs	r2, #0
 8007d48:	6879      	ldr	r1, [r7, #4]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7ff f9d0 	bl	80070f0 <_ZN3wyz5CUart13HardInterruptEP20__UART_HandleTypeDefh>
}
 8007d50:	bf00      	nop
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	200010a8 	.word	0x200010a8

08007d5c <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b090      	sub	sp, #64	; 0x40
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
		int a;
		char b;
		double c;
	} Simple2;
	Simple2 u1,u2;
	u1.b = 1;
 8007d64:	2301      	movs	r3, #1
 8007d66:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	Simple2 * p2;
	CMyQueueFreertos<Simple2*> q1(3);
 8007d6a:	f107 0310 	add.w	r3, r7, #16
 8007d6e:	2103      	movs	r1, #3
 8007d70:	4618      	mov	r0, r3
 8007d72:	f000 f83d 	bl	8007df0 <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2EC1Em>
	bool flag;
	q1.m_QueueSendToBack(&u1, 100);
 8007d76:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007d7a:	f107 0010 	add.w	r0, r7, #16
 8007d7e:	2300      	movs	r3, #0
 8007d80:	2264      	movs	r2, #100	; 0x64
 8007d82:	f000 f881 	bl	8007e88 <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E17m_QueueSendToBackES4_jb>
	p2 = q1.m_QueueReceive(flag,100);
 8007d86:	f107 010f 	add.w	r1, r7, #15
 8007d8a:	f107 0010 	add.w	r0, r7, #16
 8007d8e:	2300      	movs	r3, #0
 8007d90:	2264      	movs	r2, #100	; 0x64
 8007d92:	f000 f89a 	bl	8007eca <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E14m_QueueReceiveERbjb>
 8007d96:	4603      	mov	r3, r0
 8007d98:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8007d9a:	2001      	movs	r0, #1
 8007d9c:	f7fc fa33 	bl	8004206 <osDelay>
 8007da0:	e7fb      	b.n	8007d9a <_Z16StartDefaultTaskPKv+0x3e>
	CMyQueueFreertos<Simple2*> q1(3);
 8007da2:	f107 0310 	add.w	r3, r7, #16
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 f846 	bl	8007e38 <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2ED1Ev>
 8007dac:	f000 fc65 	bl	800867a <__cxa_end_cleanup>

08007db0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	//由于haltick在这里，所以halinit启动前中断函数不可调用
	pTimerMeter->HardInterruptOfTimer(htim);
 8007db8:	4b08      	ldr	r3, [pc, #32]	; (8007ddc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6879      	ldr	r1, [r7, #4]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7ff fd30 	bl	8007824 <_ZN3wyz11CTimerMeter20HardInterruptOfTimerEP17TIM_HandleTypeDef>
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a05      	ldr	r2, [pc, #20]	; (8007de0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d101      	bne.n	8007dd2 <HAL_TIM_PeriodElapsedCallback+0x22>
    HAL_IncTick();
 8007dce:	f7f9 fe0d 	bl	80019ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007dd2:	bf00      	nop
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	200010a4 	.word	0x200010a4
 8007de0:	40000400 	.word	0x40000400

08007de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007de4:	b480      	push	{r7}
 8007de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007de8:	bf00      	nop
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bc80      	pop	{r7}
 8007dee:	4770      	bx	lr

08007df0 <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2EC1Em>:
{
	return uxQueueSpacesAvailable(this->m_QueueHandle);
}
//构造函数
template <typename CQueueData>
CMyQueueFreertos<CQueueData>::CMyQueueFreertos(unsigned portBASE_TYPE queueLength)
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f000 f8a3 	bl	8007f48 <_ZN3wyz12CMyQueueBaseIPZ16StartDefaultTaskPKvE7Simple2EC2Ev>
 8007e02:	4a0c      	ldr	r2, [pc, #48]	; (8007e34 <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2EC1Em+0x44>)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	601a      	str	r2, [r3, #0]
{
	m_QueueHandle = xQueueCreate(queueLength,sizeof(CQueueData));
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	2104      	movs	r1, #4
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fc fb24 	bl	800445c <xQueueGenericCreate>
 8007e14:	4602      	mov	r2, r0
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	605a      	str	r2, [r3, #4]
}
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	e005      	b.n	8007e2a <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2EC1Em+0x3a>
CMyQueueFreertos<CQueueData>::CMyQueueFreertos(unsigned portBASE_TYPE queueLength)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4618      	mov	r0, r3
 8007e22:	f000 f8a1 	bl	8007f68 <_ZN3wyz12CMyQueueBaseIPZ16StartDefaultTaskPKvE7Simple2ED2Ev>
 8007e26:	f000 fc28 	bl	800867a <__cxa_end_cleanup>
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	0800b5b0 	.word	0x0800b5b0

08007e38 <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2ED1Ev>:
		return uxQueueMessagesWaiting(this->m_QueueHandle);
	}
}
//析构函数
template <typename CQueueData>
CMyQueueFreertos<CQueueData>::~CMyQueueFreertos()
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
{
	vQueueDelete(this->m_QueueHandle);
}
 8007e40:	4a08      	ldr	r2, [pc, #32]	; (8007e64 <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2ED1Ev+0x2c>)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	601a      	str	r2, [r3, #0]
	vQueueDelete(this->m_QueueHandle);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fc ffe1 	bl	8004e12 <vQueueDelete>
}
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 f888 	bl	8007f68 <_ZN3wyz12CMyQueueBaseIPZ16StartDefaultTaskPKvE7Simple2ED2Ev>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	0800b5b0 	.word	0x0800b5b0

08007e68 <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2ED0Ev>:
CMyQueueFreertos<CQueueData>::~CMyQueueFreertos()
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
}
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f7ff ffe1 	bl	8007e38 <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2ED1Ev>
 8007e76:	2108      	movs	r1, #8
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fcbf 	bl	80087fc <_ZdlPvj>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4618      	mov	r0, r3
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E17m_QueueSendToBackES4_jb>:
portBASE_TYPE CMyQueueFreertos<CQueueData>::m_QueueSendToBack( CQueueData data, unsigned int tickToWait,bool FromISR)
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	70fb      	strb	r3, [r7, #3]
	if(FromISR == true)
 8007e96:	78fb      	ldrb	r3, [r7, #3]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d009      	beq.n	8007eb0 <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E17m_QueueSendToBackES4_jb+0x28>
		return xQueueOverwriteFromISR(this->m_QueueHandle,&data,pdFALSE);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6858      	ldr	r0, [r3, #4]
 8007ea0:	f107 0108 	add.w	r1, r7, #8
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f7fc fc2a 	bl	8004700 <xQueueGenericSendFromISR>
 8007eac:	4603      	mov	r3, r0
 8007eae:	e008      	b.n	8007ec2 <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E17m_QueueSendToBackES4_jb+0x3a>
		return xQueueSendToBack(this->m_QueueHandle,&data,tickToWait);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6858      	ldr	r0, [r3, #4]
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	f107 0108 	add.w	r1, r7, #8
 8007eba:	2300      	movs	r3, #0
 8007ebc:	f7fc fb26 	bl	800450c <xQueueGenericSend>
 8007ec0:	4603      	mov	r3, r0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E14m_QueueReceiveERbjb>:
CQueueData CMyQueueFreertos<CQueueData>::m_QueueReceive(bool& flagOfSuccess, unsigned int tickToWait,bool FromISR)
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b086      	sub	sp, #24
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	60b9      	str	r1, [r7, #8]
 8007ed4:	607a      	str	r2, [r7, #4]
 8007ed6:	70fb      	strb	r3, [r7, #3]
	if(FromISR == true)
 8007ed8:	78fb      	ldrb	r3, [r7, #3]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d017      	beq.n	8007f0e <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E14m_QueueReceiveERbjb+0x44>
		if (xQueueReceiveFromISR(this->m_QueueHandle,&data,pdFALSE) == pdTRUE)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f107 0114 	add.w	r1, r7, #20
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7fc fe57 	bl	8004b9c <xQueueReceiveFromISR>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	bf0c      	ite	eq
 8007ef4:	2301      	moveq	r3, #1
 8007ef6:	2300      	movne	r3, #0
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E14m_QueueReceiveERbjb+0x3c>
			flagOfSuccess = true;
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2201      	movs	r2, #1
 8007f02:	701a      	strb	r2, [r3, #0]
 8007f04:	e01a      	b.n	8007f3c <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E14m_QueueReceiveERbjb+0x72>
			flagOfSuccess = false;
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	701a      	strb	r2, [r3, #0]
 8007f0c:	e016      	b.n	8007f3c <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E14m_QueueReceiveERbjb+0x72>
		if( xQueueReceive(this->m_QueueHandle,&data,tickToWait) == pdTRUE)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f107 0114 	add.w	r1, r7, #20
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7fc fc85 	bl	8004828 <xQueueReceive>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	bf0c      	ite	eq
 8007f24:	2301      	moveq	r3, #1
 8007f26:	2300      	movne	r3, #0
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d003      	beq.n	8007f36 <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E14m_QueueReceiveERbjb+0x6c>
			flagOfSuccess = true;
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2201      	movs	r2, #1
 8007f32:	701a      	strb	r2, [r3, #0]
 8007f34:	e002      	b.n	8007f3c <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E14m_QueueReceiveERbjb+0x72>
			flagOfSuccess = false;
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	701a      	strb	r2, [r3, #0]
	return data;
 8007f3c:	697b      	ldr	r3, [r7, #20]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3718      	adds	r7, #24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
	...

08007f48 <_ZN3wyz12CMyQueueBaseIPZ16StartDefaultTaskPKvE7Simple2EC2Ev>:
namespace wyz {

template <typename CQueueData>
class CMyQueueBase {
public:
	CMyQueueBase() {};
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	4a04      	ldr	r2, [pc, #16]	; (8007f64 <_ZN3wyz12CMyQueueBaseIPZ16StartDefaultTaskPKvE7Simple2EC2Ev+0x1c>)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	601a      	str	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bc80      	pop	{r7}
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	0800b5d8 	.word	0x0800b5d8

08007f68 <_ZN3wyz12CMyQueueBaseIPZ16StartDefaultTaskPKvE7Simple2ED2Ev>:
	virtual ~CMyQueueBase() {};
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	4a04      	ldr	r2, [pc, #16]	; (8007f84 <_ZN3wyz12CMyQueueBaseIPZ16StartDefaultTaskPKvE7Simple2ED2Ev+0x1c>)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bc80      	pop	{r7}
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	0800b5d8 	.word	0x0800b5d8

08007f88 <_Z41__static_initialization_and_destruction_0ii>:
 8007f88:	b590      	push	{r4, r7, lr}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af02      	add	r7, sp, #8
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d139      	bne.n	800800c <_Z41__static_initialization_and_destruction_0ii+0x84>
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d134      	bne.n	800800c <_Z41__static_initialization_and_destruction_0ii+0x84>
CTimerMeter * pTimerMeter = CTimerMeter::GetTimerMeterInstance();
 8007fa2:	f7fe fbdd 	bl	8006760 <_ZN3wyz11CTimerMeter21GetTimerMeterInstanceEv>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	4b1a      	ldr	r3, [pc, #104]	; (8008014 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8007faa:	601a      	str	r2, [r3, #0]
CSubject *pUart1 = new CUart(&huart1,10,1,m_ObserverMode);
 8007fac:	2030      	movs	r0, #48	; 0x30
 8007fae:	f000 fec3 	bl	8008d38 <_Znwj>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	461c      	mov	r4, r3
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	2301      	movs	r3, #1
 8007fbc:	220a      	movs	r2, #10
 8007fbe:	4916      	ldr	r1, [pc, #88]	; (8008018 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	f7fe ff2d 	bl	8006e20 <_ZN3wyz5CUartC1EP20__UART_HandleTypeDefmmh>
 8007fc6:	2c00      	cmp	r4, #0
 8007fc8:	d001      	beq.n	8007fce <_Z41__static_initialization_and_destruction_0ii+0x46>
 8007fca:	1d23      	adds	r3, r4, #4
 8007fcc:	e000      	b.n	8007fd0 <_Z41__static_initialization_and_destruction_0ii+0x48>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	4a12      	ldr	r2, [pc, #72]	; (800801c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8007fd2:	6013      	str	r3, [r2, #0]
CUart *pUart2 = new CUart(&huart2,1,100,m_UsingDMAMode);
 8007fd4:	2030      	movs	r0, #48	; 0x30
 8007fd6:	f000 feaf 	bl	8008d38 <_Znwj>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	461c      	mov	r4, r3
 8007fde:	2301      	movs	r3, #1
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	2364      	movs	r3, #100	; 0x64
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	490e      	ldr	r1, [pc, #56]	; (8008020 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f7fe ff19 	bl	8006e20 <_ZN3wyz5CUartC1EP20__UART_HandleTypeDefmmh>
 8007fee:	4b0d      	ldr	r3, [pc, #52]	; (8008024 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8007ff0:	601c      	str	r4, [r3, #0]
}
 8007ff2:	e00b      	b.n	800800c <_Z41__static_initialization_and_destruction_0ii+0x84>
CSubject *pUart1 = new CUart(&huart1,10,1,m_ObserverMode);
 8007ff4:	2130      	movs	r1, #48	; 0x30
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f000 fc00 	bl	80087fc <_ZdlPvj>
 8007ffc:	f000 fb3d 	bl	800867a <__cxa_end_cleanup>
CUart *pUart2 = new CUart(&huart2,1,100,m_UsingDMAMode);
 8008000:	2130      	movs	r1, #48	; 0x30
 8008002:	4620      	mov	r0, r4
 8008004:	f000 fbfa 	bl	80087fc <_ZdlPvj>
 8008008:	f000 fb37 	bl	800867a <__cxa_end_cleanup>
}
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	bd90      	pop	{r4, r7, pc}
 8008012:	bf00      	nop
 8008014:	200010a4 	.word	0x200010a4
 8008018:	20000f98 	.word	0x20000f98
 800801c:	200010a8 	.word	0x200010a8
 8008020:	20000fd8 	.word	0x20000fd8
 8008024:	200010ac 	.word	0x200010ac

08008028 <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E18m_QueueSendToFrontES4_jb>:
portBASE_TYPE CMyQueueFreertos<CQueueData>::m_QueueSendToFront( CQueueData data, unsigned int tickToWait,bool FromISR )
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
 8008034:	70fb      	strb	r3, [r7, #3]
	if(FromISR == true)
 8008036:	78fb      	ldrb	r3, [r7, #3]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d009      	beq.n	8008050 <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E18m_QueueSendToFrontES4_jb+0x28>
		return xQueueSendToFrontFromISR(this->m_QueueHandle,&data,pdFALSE);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6858      	ldr	r0, [r3, #4]
 8008040:	f107 0108 	add.w	r1, r7, #8
 8008044:	2301      	movs	r3, #1
 8008046:	2200      	movs	r2, #0
 8008048:	f7fc fb5a 	bl	8004700 <xQueueGenericSendFromISR>
 800804c:	4603      	mov	r3, r0
 800804e:	e008      	b.n	8008062 <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E18m_QueueSendToFrontES4_jb+0x3a>
		return xQueueSendToFront(this->m_QueueHandle,&data,tickToWait);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6858      	ldr	r0, [r3, #4]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	f107 0108 	add.w	r1, r7, #8
 800805a:	2301      	movs	r3, #1
 800805c:	f7fc fa56 	bl	800450c <xQueueGenericSend>
 8008060:	4603      	mov	r3, r0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E11m_QueuePeekERbjb>:
CQueueData CMyQueueFreertos<CQueueData>::m_QueuePeek(bool& flagOfSuccess,unsigned int tickToWait,bool FromISR)
 800806a:	b580      	push	{r7, lr}
 800806c:	b086      	sub	sp, #24
 800806e:	af00      	add	r7, sp, #0
 8008070:	60f8      	str	r0, [r7, #12]
 8008072:	60b9      	str	r1, [r7, #8]
 8008074:	607a      	str	r2, [r7, #4]
 8008076:	70fb      	strb	r3, [r7, #3]
	if(FromISR == true)
 8008078:	78fb      	ldrb	r3, [r7, #3]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d017      	beq.n	80080ae <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E11m_QueuePeekERbjb+0x44>
		if( xQueuePeekFromISR(this->m_QueueHandle,&data) == pdTRUE)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f107 0214 	add.w	r2, r7, #20
 8008086:	4611      	mov	r1, r2
 8008088:	4618      	mov	r0, r3
 800808a:	f7fc fe04 	bl	8004c96 <xQueuePeekFromISR>
 800808e:	4603      	mov	r3, r0
 8008090:	2b01      	cmp	r3, #1
 8008092:	bf0c      	ite	eq
 8008094:	2301      	moveq	r3, #1
 8008096:	2300      	movne	r3, #0
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E11m_QueuePeekERbjb+0x3c>
			flagOfSuccess = true;
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	2201      	movs	r2, #1
 80080a2:	701a      	strb	r2, [r3, #0]
 80080a4:	e01a      	b.n	80080dc <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E11m_QueuePeekERbjb+0x72>
			flagOfSuccess = false;
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	2200      	movs	r2, #0
 80080aa:	701a      	strb	r2, [r3, #0]
 80080ac:	e016      	b.n	80080dc <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E11m_QueuePeekERbjb+0x72>
		if( xQueuePeek(this->m_QueueHandle,&data,tickToWait))
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f107 0114 	add.w	r1, r7, #20
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7fc fc91 	bl	80049e0 <xQueuePeek>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	bf14      	ite	ne
 80080c4:	2301      	movne	r3, #1
 80080c6:	2300      	moveq	r3, #0
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E11m_QueuePeekERbjb+0x6c>
			flagOfSuccess = true;
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	2201      	movs	r2, #1
 80080d2:	701a      	strb	r2, [r3, #0]
 80080d4:	e002      	b.n	80080dc <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E11m_QueuePeekERbjb+0x72>
			flagOfSuccess = false;
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	2200      	movs	r2, #0
 80080da:	701a      	strb	r2, [r3, #0]
	return data;
 80080dc:	697b      	ldr	r3, [r7, #20]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E21m_QueueSpaceAvailableEv>:
UBaseType_t CMyQueueFreertos<CQueueData>::m_QueueSpaceAvailable()
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b082      	sub	sp, #8
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
	return uxQueueSpacesAvailable(this->m_QueueHandle);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fc fe51 	bl	8004d9a <uxQueueSpacesAvailable>
 80080f8:	4603      	mov	r3, r0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E22m_QueueMessagesWaitingEb>:
UBaseType_t CMyQueueFreertos<CQueueData>::m_QueueMessagesWaiting(bool FromISR)
 8008102:	b580      	push	{r7, lr}
 8008104:	b082      	sub	sp, #8
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	460b      	mov	r3, r1
 800810c:	70fb      	strb	r3, [r7, #3]
	if(FromISR == true)
 800810e:	78fb      	ldrb	r3, [r7, #3]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d006      	beq.n	8008122 <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E22m_QueueMessagesWaitingEb+0x20>
		return uxQueueMessagesWaitingFromISR(this->m_QueueHandle);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	4618      	mov	r0, r3
 800811a:	f7fc fe60 	bl	8004dde <uxQueueMessagesWaitingFromISR>
 800811e:	4603      	mov	r3, r0
 8008120:	e005      	b.n	800812e <_ZN3wyz16CMyQueueFreertosIPZ16StartDefaultTaskPKvE7Simple2E22m_QueueMessagesWaitingEb+0x2c>
		return uxQueueMessagesWaiting(this->m_QueueHandle);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	4618      	mov	r0, r3
 8008128:	f7fc fe1a 	bl	8004d60 <uxQueueMessagesWaiting>
 800812c:	4603      	mov	r3, r0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <_GLOBAL__sub_I_htim4>:
 8008136:	b580      	push	{r7, lr}
 8008138:	af00      	add	r7, sp, #0
 800813a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800813e:	2001      	movs	r0, #1
 8008140:	f7ff ff22 	bl	8007f88 <_Z41__static_initialization_and_destruction_0ii>
 8008144:	bd80      	pop	{r7, pc}
	...

08008148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800814e:	4b18      	ldr	r3, [pc, #96]	; (80081b0 <HAL_MspInit+0x68>)
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	4a17      	ldr	r2, [pc, #92]	; (80081b0 <HAL_MspInit+0x68>)
 8008154:	f043 0301 	orr.w	r3, r3, #1
 8008158:	6193      	str	r3, [r2, #24]
 800815a:	4b15      	ldr	r3, [pc, #84]	; (80081b0 <HAL_MspInit+0x68>)
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	60bb      	str	r3, [r7, #8]
 8008164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008166:	4b12      	ldr	r3, [pc, #72]	; (80081b0 <HAL_MspInit+0x68>)
 8008168:	69db      	ldr	r3, [r3, #28]
 800816a:	4a11      	ldr	r2, [pc, #68]	; (80081b0 <HAL_MspInit+0x68>)
 800816c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008170:	61d3      	str	r3, [r2, #28]
 8008172:	4b0f      	ldr	r3, [pc, #60]	; (80081b0 <HAL_MspInit+0x68>)
 8008174:	69db      	ldr	r3, [r3, #28]
 8008176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800817a:	607b      	str	r3, [r7, #4]
 800817c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800817e:	2200      	movs	r2, #0
 8008180:	210f      	movs	r1, #15
 8008182:	f06f 0001 	mvn.w	r0, #1
 8008186:	f7f9 fd02 	bl	8001b8e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800818a:	4b0a      	ldr	r3, [pc, #40]	; (80081b4 <HAL_MspInit+0x6c>)
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008196:	60fb      	str	r3, [r7, #12]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	4a04      	ldr	r2, [pc, #16]	; (80081b4 <HAL_MspInit+0x6c>)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80081a6:	bf00      	nop
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	40021000 	.word	0x40021000
 80081b4:	40010000 	.word	0x40010000

080081b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a0d      	ldr	r2, [pc, #52]	; (80081fc <HAL_TIM_Base_MspInit+0x44>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d113      	bne.n	80081f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80081ca:	4b0d      	ldr	r3, [pc, #52]	; (8008200 <HAL_TIM_Base_MspInit+0x48>)
 80081cc:	69db      	ldr	r3, [r3, #28]
 80081ce:	4a0c      	ldr	r2, [pc, #48]	; (8008200 <HAL_TIM_Base_MspInit+0x48>)
 80081d0:	f043 0304 	orr.w	r3, r3, #4
 80081d4:	61d3      	str	r3, [r2, #28]
 80081d6:	4b0a      	ldr	r3, [pc, #40]	; (8008200 <HAL_TIM_Base_MspInit+0x48>)
 80081d8:	69db      	ldr	r3, [r3, #28]
 80081da:	f003 0304 	and.w	r3, r3, #4
 80081de:	60fb      	str	r3, [r7, #12]
 80081e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80081e2:	2200      	movs	r2, #0
 80081e4:	2105      	movs	r1, #5
 80081e6:	201e      	movs	r0, #30
 80081e8:	f7f9 fcd1 	bl	8001b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80081ec:	201e      	movs	r0, #30
 80081ee:	f7f9 fcea 	bl	8001bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80081f2:	bf00      	nop
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	40000800 	.word	0x40000800
 8008200:	40021000 	.word	0x40021000

08008204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b08a      	sub	sp, #40	; 0x28
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800820c:	f107 0318 	add.w	r3, r7, #24
 8008210:	2200      	movs	r2, #0
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	605a      	str	r2, [r3, #4]
 8008216:	609a      	str	r2, [r3, #8]
 8008218:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a65      	ldr	r2, [pc, #404]	; (80083b4 <HAL_UART_MspInit+0x1b0>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d160      	bne.n	80082e6 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008224:	4b64      	ldr	r3, [pc, #400]	; (80083b8 <HAL_UART_MspInit+0x1b4>)
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	4a63      	ldr	r2, [pc, #396]	; (80083b8 <HAL_UART_MspInit+0x1b4>)
 800822a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800822e:	6193      	str	r3, [r2, #24]
 8008230:	4b61      	ldr	r3, [pc, #388]	; (80083b8 <HAL_UART_MspInit+0x1b4>)
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008238:	617b      	str	r3, [r7, #20]
 800823a:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800823c:	4b5e      	ldr	r3, [pc, #376]	; (80083b8 <HAL_UART_MspInit+0x1b4>)
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	4a5d      	ldr	r2, [pc, #372]	; (80083b8 <HAL_UART_MspInit+0x1b4>)
 8008242:	f043 0304 	orr.w	r3, r3, #4
 8008246:	6193      	str	r3, [r2, #24]
 8008248:	4b5b      	ldr	r3, [pc, #364]	; (80083b8 <HAL_UART_MspInit+0x1b4>)
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	f003 0304 	and.w	r3, r3, #4
 8008250:	613b      	str	r3, [r7, #16]
 8008252:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800825a:	2302      	movs	r3, #2
 800825c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800825e:	2303      	movs	r3, #3
 8008260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008262:	f107 0318 	add.w	r3, r7, #24
 8008266:	4619      	mov	r1, r3
 8008268:	4854      	ldr	r0, [pc, #336]	; (80083bc <HAL_UART_MspInit+0x1b8>)
 800826a:	f7f9 ff1f 	bl	80020ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800826e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008274:	2300      	movs	r3, #0
 8008276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008278:	2300      	movs	r3, #0
 800827a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800827c:	f107 0318 	add.w	r3, r7, #24
 8008280:	4619      	mov	r1, r3
 8008282:	484e      	ldr	r0, [pc, #312]	; (80083bc <HAL_UART_MspInit+0x1b8>)
 8008284:	f7f9 ff12 	bl	80020ac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8008288:	4b4d      	ldr	r3, [pc, #308]	; (80083c0 <HAL_UART_MspInit+0x1bc>)
 800828a:	4a4e      	ldr	r2, [pc, #312]	; (80083c4 <HAL_UART_MspInit+0x1c0>)
 800828c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800828e:	4b4c      	ldr	r3, [pc, #304]	; (80083c0 <HAL_UART_MspInit+0x1bc>)
 8008290:	2200      	movs	r2, #0
 8008292:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008294:	4b4a      	ldr	r3, [pc, #296]	; (80083c0 <HAL_UART_MspInit+0x1bc>)
 8008296:	2200      	movs	r2, #0
 8008298:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800829a:	4b49      	ldr	r3, [pc, #292]	; (80083c0 <HAL_UART_MspInit+0x1bc>)
 800829c:	2280      	movs	r2, #128	; 0x80
 800829e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80082a0:	4b47      	ldr	r3, [pc, #284]	; (80083c0 <HAL_UART_MspInit+0x1bc>)
 80082a2:	2200      	movs	r2, #0
 80082a4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80082a6:	4b46      	ldr	r3, [pc, #280]	; (80083c0 <HAL_UART_MspInit+0x1bc>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80082ac:	4b44      	ldr	r3, [pc, #272]	; (80083c0 <HAL_UART_MspInit+0x1bc>)
 80082ae:	2220      	movs	r2, #32
 80082b0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80082b2:	4b43      	ldr	r3, [pc, #268]	; (80083c0 <HAL_UART_MspInit+0x1bc>)
 80082b4:	2200      	movs	r2, #0
 80082b6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80082b8:	4841      	ldr	r0, [pc, #260]	; (80083c0 <HAL_UART_MspInit+0x1bc>)
 80082ba:	f7f9 fc93 	bl	8001be4 <HAL_DMA_Init>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80082c4:	f7ff fd8e 	bl	8007de4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a3d      	ldr	r2, [pc, #244]	; (80083c0 <HAL_UART_MspInit+0x1bc>)
 80082cc:	635a      	str	r2, [r3, #52]	; 0x34
 80082ce:	4a3c      	ldr	r2, [pc, #240]	; (80083c0 <HAL_UART_MspInit+0x1bc>)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80082d4:	2200      	movs	r2, #0
 80082d6:	2105      	movs	r1, #5
 80082d8:	2025      	movs	r0, #37	; 0x25
 80082da:	f7f9 fc58 	bl	8001b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80082de:	2025      	movs	r0, #37	; 0x25
 80082e0:	f7f9 fc71 	bl	8001bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80082e4:	e062      	b.n	80083ac <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART2)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a37      	ldr	r2, [pc, #220]	; (80083c8 <HAL_UART_MspInit+0x1c4>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d15d      	bne.n	80083ac <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80082f0:	4b31      	ldr	r3, [pc, #196]	; (80083b8 <HAL_UART_MspInit+0x1b4>)
 80082f2:	69db      	ldr	r3, [r3, #28]
 80082f4:	4a30      	ldr	r2, [pc, #192]	; (80083b8 <HAL_UART_MspInit+0x1b4>)
 80082f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082fa:	61d3      	str	r3, [r2, #28]
 80082fc:	4b2e      	ldr	r3, [pc, #184]	; (80083b8 <HAL_UART_MspInit+0x1b4>)
 80082fe:	69db      	ldr	r3, [r3, #28]
 8008300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008304:	60fb      	str	r3, [r7, #12]
 8008306:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008308:	4b2b      	ldr	r3, [pc, #172]	; (80083b8 <HAL_UART_MspInit+0x1b4>)
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	4a2a      	ldr	r2, [pc, #168]	; (80083b8 <HAL_UART_MspInit+0x1b4>)
 800830e:	f043 0304 	orr.w	r3, r3, #4
 8008312:	6193      	str	r3, [r2, #24]
 8008314:	4b28      	ldr	r3, [pc, #160]	; (80083b8 <HAL_UART_MspInit+0x1b4>)
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	f003 0304 	and.w	r3, r3, #4
 800831c:	60bb      	str	r3, [r7, #8]
 800831e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008320:	2304      	movs	r3, #4
 8008322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008324:	2302      	movs	r3, #2
 8008326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008328:	2303      	movs	r3, #3
 800832a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800832c:	f107 0318 	add.w	r3, r7, #24
 8008330:	4619      	mov	r1, r3
 8008332:	4822      	ldr	r0, [pc, #136]	; (80083bc <HAL_UART_MspInit+0x1b8>)
 8008334:	f7f9 feba 	bl	80020ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008338:	2308      	movs	r3, #8
 800833a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800833c:	2300      	movs	r3, #0
 800833e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008340:	2300      	movs	r3, #0
 8008342:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008344:	f107 0318 	add.w	r3, r7, #24
 8008348:	4619      	mov	r1, r3
 800834a:	481c      	ldr	r0, [pc, #112]	; (80083bc <HAL_UART_MspInit+0x1b8>)
 800834c:	f7f9 feae 	bl	80020ac <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8008350:	4b1e      	ldr	r3, [pc, #120]	; (80083cc <HAL_UART_MspInit+0x1c8>)
 8008352:	4a1f      	ldr	r2, [pc, #124]	; (80083d0 <HAL_UART_MspInit+0x1cc>)
 8008354:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008356:	4b1d      	ldr	r3, [pc, #116]	; (80083cc <HAL_UART_MspInit+0x1c8>)
 8008358:	2200      	movs	r2, #0
 800835a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800835c:	4b1b      	ldr	r3, [pc, #108]	; (80083cc <HAL_UART_MspInit+0x1c8>)
 800835e:	2200      	movs	r2, #0
 8008360:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008362:	4b1a      	ldr	r3, [pc, #104]	; (80083cc <HAL_UART_MspInit+0x1c8>)
 8008364:	2280      	movs	r2, #128	; 0x80
 8008366:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008368:	4b18      	ldr	r3, [pc, #96]	; (80083cc <HAL_UART_MspInit+0x1c8>)
 800836a:	2200      	movs	r2, #0
 800836c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800836e:	4b17      	ldr	r3, [pc, #92]	; (80083cc <HAL_UART_MspInit+0x1c8>)
 8008370:	2200      	movs	r2, #0
 8008372:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8008374:	4b15      	ldr	r3, [pc, #84]	; (80083cc <HAL_UART_MspInit+0x1c8>)
 8008376:	2220      	movs	r2, #32
 8008378:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800837a:	4b14      	ldr	r3, [pc, #80]	; (80083cc <HAL_UART_MspInit+0x1c8>)
 800837c:	2200      	movs	r2, #0
 800837e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008380:	4812      	ldr	r0, [pc, #72]	; (80083cc <HAL_UART_MspInit+0x1c8>)
 8008382:	f7f9 fc2f 	bl	8001be4 <HAL_DMA_Init>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d001      	beq.n	8008390 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 800838c:	f7ff fd2a 	bl	8007de4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a0e      	ldr	r2, [pc, #56]	; (80083cc <HAL_UART_MspInit+0x1c8>)
 8008394:	635a      	str	r2, [r3, #52]	; 0x34
 8008396:	4a0d      	ldr	r2, [pc, #52]	; (80083cc <HAL_UART_MspInit+0x1c8>)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800839c:	2200      	movs	r2, #0
 800839e:	2105      	movs	r1, #5
 80083a0:	2026      	movs	r0, #38	; 0x26
 80083a2:	f7f9 fbf4 	bl	8001b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80083a6:	2026      	movs	r0, #38	; 0x26
 80083a8:	f7f9 fc0d 	bl	8001bc6 <HAL_NVIC_EnableIRQ>
}
 80083ac:	bf00      	nop
 80083ae:	3728      	adds	r7, #40	; 0x28
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	40013800 	.word	0x40013800
 80083b8:	40021000 	.word	0x40021000
 80083bc:	40010800 	.word	0x40010800
 80083c0:	20001018 	.word	0x20001018
 80083c4:	40020058 	.word	0x40020058
 80083c8:	40004400 	.word	0x40004400
 80083cc:	2000105c 	.word	0x2000105c
 80083d0:	4002006c 	.word	0x4002006c

080083d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b08c      	sub	sp, #48	; 0x30
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80083dc:	2300      	movs	r3, #0
 80083de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80083e0:	2300      	movs	r3, #0
 80083e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 80083e4:	2200      	movs	r2, #0
 80083e6:	6879      	ldr	r1, [r7, #4]
 80083e8:	201d      	movs	r0, #29
 80083ea:	f7f9 fbd0 	bl	8001b8e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 80083ee:	201d      	movs	r0, #29
 80083f0:	f7f9 fbe9 	bl	8001bc6 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80083f4:	4b1f      	ldr	r3, [pc, #124]	; (8008474 <HAL_InitTick+0xa0>)
 80083f6:	69db      	ldr	r3, [r3, #28]
 80083f8:	4a1e      	ldr	r2, [pc, #120]	; (8008474 <HAL_InitTick+0xa0>)
 80083fa:	f043 0302 	orr.w	r3, r3, #2
 80083fe:	61d3      	str	r3, [r2, #28]
 8008400:	4b1c      	ldr	r3, [pc, #112]	; (8008474 <HAL_InitTick+0xa0>)
 8008402:	69db      	ldr	r3, [r3, #28]
 8008404:	f003 0302 	and.w	r3, r3, #2
 8008408:	60fb      	str	r3, [r7, #12]
 800840a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800840c:	f107 0210 	add.w	r2, r7, #16
 8008410:	f107 0314 	add.w	r3, r7, #20
 8008414:	4611      	mov	r1, r2
 8008416:	4618      	mov	r0, r3
 8008418:	f7fa fba0 	bl	8002b5c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800841c:	f7fa fb76 	bl	8002b0c <HAL_RCC_GetPCLK1Freq>
 8008420:	4603      	mov	r3, r0
 8008422:	005b      	lsls	r3, r3, #1
 8008424:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008428:	4a13      	ldr	r2, [pc, #76]	; (8008478 <HAL_InitTick+0xa4>)
 800842a:	fba2 2303 	umull	r2, r3, r2, r3
 800842e:	0c9b      	lsrs	r3, r3, #18
 8008430:	3b01      	subs	r3, #1
 8008432:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8008434:	4b11      	ldr	r3, [pc, #68]	; (800847c <HAL_InitTick+0xa8>)
 8008436:	4a12      	ldr	r2, [pc, #72]	; (8008480 <HAL_InitTick+0xac>)
 8008438:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 800843a:	4b10      	ldr	r3, [pc, #64]	; (800847c <HAL_InitTick+0xa8>)
 800843c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008440:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8008442:	4a0e      	ldr	r2, [pc, #56]	; (800847c <HAL_InitTick+0xa8>)
 8008444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008446:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8008448:	4b0c      	ldr	r3, [pc, #48]	; (800847c <HAL_InitTick+0xa8>)
 800844a:	2200      	movs	r2, #0
 800844c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800844e:	4b0b      	ldr	r3, [pc, #44]	; (800847c <HAL_InitTick+0xa8>)
 8008450:	2200      	movs	r2, #0
 8008452:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8008454:	4809      	ldr	r0, [pc, #36]	; (800847c <HAL_InitTick+0xa8>)
 8008456:	f7fa fbcf 	bl	8002bf8 <HAL_TIM_Base_Init>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d104      	bne.n	800846a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8008460:	4806      	ldr	r0, [pc, #24]	; (800847c <HAL_InitTick+0xa8>)
 8008462:	f7fa fbf4 	bl	8002c4e <HAL_TIM_Base_Start_IT>
 8008466:	4603      	mov	r3, r0
 8008468:	e000      	b.n	800846c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
}
 800846c:	4618      	mov	r0, r3
 800846e:	3730      	adds	r7, #48	; 0x30
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	40021000 	.word	0x40021000
 8008478:	431bde83 	.word	0x431bde83
 800847c:	20001110 	.word	0x20001110
 8008480:	40000400 	.word	0x40000400

08008484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008484:	b480      	push	{r7}
 8008486:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008488:	bf00      	nop
 800848a:	46bd      	mov	sp, r7
 800848c:	bc80      	pop	{r7}
 800848e:	4770      	bx	lr

08008490 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008490:	b480      	push	{r7}
 8008492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008494:	e7fe      	b.n	8008494 <HardFault_Handler+0x4>

08008496 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008496:	b480      	push	{r7}
 8008498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800849a:	e7fe      	b.n	800849a <MemManage_Handler+0x4>

0800849c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800849c:	b480      	push	{r7}
 800849e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80084a0:	e7fe      	b.n	80084a0 <BusFault_Handler+0x4>

080084a2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80084a2:	b480      	push	{r7}
 80084a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80084a6:	e7fe      	b.n	80084a6 <UsageFault_Handler+0x4>

080084a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80084a8:	b480      	push	{r7}
 80084aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80084ac:	bf00      	nop
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bc80      	pop	{r7}
 80084b2:	4770      	bx	lr

080084b4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80084b8:	4802      	ldr	r0, [pc, #8]	; (80084c4 <DMA1_Channel5_IRQHandler+0x10>)
 80084ba:	f7f9 fcc3 	bl	8001e44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80084be:	bf00      	nop
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	20001018 	.word	0x20001018

080084c8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80084cc:	4802      	ldr	r0, [pc, #8]	; (80084d8 <DMA1_Channel6_IRQHandler+0x10>)
 80084ce:	f7f9 fcb9 	bl	8001e44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80084d2:	bf00      	nop
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	2000105c 	.word	0x2000105c

080084dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80084e0:	4802      	ldr	r0, [pc, #8]	; (80084ec <TIM3_IRQHandler+0x10>)
 80084e2:	f7fa fbd7 	bl	8002c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80084e6:	bf00      	nop
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	20001110 	.word	0x20001110

080084f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80084f4:	4802      	ldr	r0, [pc, #8]	; (8008500 <TIM4_IRQHandler+0x10>)
 80084f6:	f7fa fbcd 	bl	8002c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80084fa:	bf00      	nop
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	20000f58 	.word	0x20000f58

08008504 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008508:	4802      	ldr	r0, [pc, #8]	; (8008514 <USART1_IRQHandler+0x10>)
 800850a:	f7fb fa05 	bl	8003918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800850e:	bf00      	nop
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	20000f98 	.word	0x20000f98

08008518 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800851c:	4802      	ldr	r0, [pc, #8]	; (8008528 <USART2_IRQHandler+0x10>)
 800851e:	f7fb f9fb 	bl	8003918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008522:	bf00      	nop
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	20000fd8 	.word	0x20000fd8

0800852c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800852c:	b480      	push	{r7}
 800852e:	af00      	add	r7, sp, #0
	return 1;
 8008530:	2301      	movs	r3, #1
}
 8008532:	4618      	mov	r0, r3
 8008534:	46bd      	mov	sp, r7
 8008536:	bc80      	pop	{r7}
 8008538:	4770      	bx	lr

0800853a <_kill>:

int _kill(int pid, int sig)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b082      	sub	sp, #8
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008544:	f001 f996 	bl	8009874 <__errno>
 8008548:	4602      	mov	r2, r0
 800854a:	2316      	movs	r3, #22
 800854c:	6013      	str	r3, [r2, #0]
	return -1;
 800854e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008552:	4618      	mov	r0, r3
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <_exit>:

void _exit (int status)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b082      	sub	sp, #8
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008562:	f04f 31ff 	mov.w	r1, #4294967295
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7ff ffe7 	bl	800853a <_kill>
	while (1) {}		/* Make sure we hang here */
 800856c:	e7fe      	b.n	800856c <_exit+0x12>
	...

08008570 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008578:	4b11      	ldr	r3, [pc, #68]	; (80085c0 <_sbrk+0x50>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d102      	bne.n	8008586 <_sbrk+0x16>
		heap_end = &end;
 8008580:	4b0f      	ldr	r3, [pc, #60]	; (80085c0 <_sbrk+0x50>)
 8008582:	4a10      	ldr	r2, [pc, #64]	; (80085c4 <_sbrk+0x54>)
 8008584:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008586:	4b0e      	ldr	r3, [pc, #56]	; (80085c0 <_sbrk+0x50>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800858c:	4b0c      	ldr	r3, [pc, #48]	; (80085c0 <_sbrk+0x50>)
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4413      	add	r3, r2
 8008594:	466a      	mov	r2, sp
 8008596:	4293      	cmp	r3, r2
 8008598:	d907      	bls.n	80085aa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800859a:	f001 f96b 	bl	8009874 <__errno>
 800859e:	4602      	mov	r2, r0
 80085a0:	230c      	movs	r3, #12
 80085a2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80085a4:	f04f 33ff 	mov.w	r3, #4294967295
 80085a8:	e006      	b.n	80085b8 <_sbrk+0x48>
	}

	heap_end += incr;
 80085aa:	4b05      	ldr	r3, [pc, #20]	; (80085c0 <_sbrk+0x50>)
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4413      	add	r3, r2
 80085b2:	4a03      	ldr	r2, [pc, #12]	; (80085c0 <_sbrk+0x50>)
 80085b4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80085b6:	68fb      	ldr	r3, [r7, #12]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	200010b0 	.word	0x200010b0
 80085c4:	20001158 	.word	0x20001158

080085c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80085c8:	b480      	push	{r7}
 80085ca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80085cc:	4b15      	ldr	r3, [pc, #84]	; (8008624 <SystemInit+0x5c>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a14      	ldr	r2, [pc, #80]	; (8008624 <SystemInit+0x5c>)
 80085d2:	f043 0301 	orr.w	r3, r3, #1
 80085d6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80085d8:	4b12      	ldr	r3, [pc, #72]	; (8008624 <SystemInit+0x5c>)
 80085da:	685a      	ldr	r2, [r3, #4]
 80085dc:	4911      	ldr	r1, [pc, #68]	; (8008624 <SystemInit+0x5c>)
 80085de:	4b12      	ldr	r3, [pc, #72]	; (8008628 <SystemInit+0x60>)
 80085e0:	4013      	ands	r3, r2
 80085e2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80085e4:	4b0f      	ldr	r3, [pc, #60]	; (8008624 <SystemInit+0x5c>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a0e      	ldr	r2, [pc, #56]	; (8008624 <SystemInit+0x5c>)
 80085ea:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80085ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085f2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80085f4:	4b0b      	ldr	r3, [pc, #44]	; (8008624 <SystemInit+0x5c>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a0a      	ldr	r2, [pc, #40]	; (8008624 <SystemInit+0x5c>)
 80085fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085fe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8008600:	4b08      	ldr	r3, [pc, #32]	; (8008624 <SystemInit+0x5c>)
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	4a07      	ldr	r2, [pc, #28]	; (8008624 <SystemInit+0x5c>)
 8008606:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800860a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800860c:	4b05      	ldr	r3, [pc, #20]	; (8008624 <SystemInit+0x5c>)
 800860e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8008612:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8008614:	4b05      	ldr	r3, [pc, #20]	; (800862c <SystemInit+0x64>)
 8008616:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800861a:	609a      	str	r2, [r3, #8]
#endif 
}
 800861c:	bf00      	nop
 800861e:	46bd      	mov	sp, r7
 8008620:	bc80      	pop	{r7}
 8008622:	4770      	bx	lr
 8008624:	40021000 	.word	0x40021000
 8008628:	f8ff0000 	.word	0xf8ff0000
 800862c:	e000ed00 	.word	0xe000ed00

08008630 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8008630:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8008632:	e003      	b.n	800863c <LoopCopyDataInit>

08008634 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8008634:	4b0b      	ldr	r3, [pc, #44]	; (8008664 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8008636:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8008638:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800863a:	3104      	adds	r1, #4

0800863c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800863c:	480a      	ldr	r0, [pc, #40]	; (8008668 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800863e:	4b0b      	ldr	r3, [pc, #44]	; (800866c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8008640:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8008642:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8008644:	d3f6      	bcc.n	8008634 <CopyDataInit>
  ldr r2, =_sbss
 8008646:	4a0a      	ldr	r2, [pc, #40]	; (8008670 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8008648:	e002      	b.n	8008650 <LoopFillZerobss>

0800864a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800864a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800864c:	f842 3b04 	str.w	r3, [r2], #4

08008650 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8008650:	4b08      	ldr	r3, [pc, #32]	; (8008674 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8008652:	429a      	cmp	r2, r3
  bcc FillZerobss
 8008654:	d3f9      	bcc.n	800864a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008656:	f7ff ffb7 	bl	80085c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800865a:	f001 f911 	bl	8009880 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800865e:	f7ff f909 	bl	8007874 <main>
  bx lr
 8008662:	4770      	bx	lr
  ldr r3, =_sidata
 8008664:	0800c154 	.word	0x0800c154
  ldr r0, =_sdata
 8008668:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800866c:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8008670:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8008674:	20001154 	.word	0x20001154

08008678 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008678:	e7fe      	b.n	8008678 <ADC1_2_IRQHandler>

0800867a <__cxa_end_cleanup>:
 800867a:	b41e      	push	{r1, r2, r3, r4}
 800867c:	f000 f89b 	bl	80087b6 <__gnu_end_cleanup>
 8008680:	bc1e      	pop	{r1, r2, r3, r4}
 8008682:	f7f8 ff99 	bl	80015b8 <_Unwind_Resume>

08008686 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8008686:	7803      	ldrb	r3, [r0, #0]
 8008688:	2b47      	cmp	r3, #71	; 0x47
 800868a:	d117      	bne.n	80086bc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800868c:	7843      	ldrb	r3, [r0, #1]
 800868e:	2b4e      	cmp	r3, #78	; 0x4e
 8008690:	d114      	bne.n	80086bc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8008692:	7883      	ldrb	r3, [r0, #2]
 8008694:	2b55      	cmp	r3, #85	; 0x55
 8008696:	d111      	bne.n	80086bc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8008698:	78c3      	ldrb	r3, [r0, #3]
 800869a:	2b43      	cmp	r3, #67	; 0x43
 800869c:	d10e      	bne.n	80086bc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800869e:	7903      	ldrb	r3, [r0, #4]
 80086a0:	2b43      	cmp	r3, #67	; 0x43
 80086a2:	d10b      	bne.n	80086bc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80086a4:	7943      	ldrb	r3, [r0, #5]
 80086a6:	2b2b      	cmp	r3, #43	; 0x2b
 80086a8:	d108      	bne.n	80086bc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80086aa:	7983      	ldrb	r3, [r0, #6]
 80086ac:	2b2b      	cmp	r3, #43	; 0x2b
 80086ae:	d105      	bne.n	80086bc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80086b0:	79c0      	ldrb	r0, [r0, #7]
 80086b2:	2801      	cmp	r0, #1
 80086b4:	bf8c      	ite	hi
 80086b6:	2000      	movhi	r0, #0
 80086b8:	2001      	movls	r0, #1
 80086ba:	4770      	bx	lr
 80086bc:	2000      	movs	r0, #0
 80086be:	4770      	bx	lr

080086c0 <__cxa_type_match>:
 80086c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80086c4:	461e      	mov	r6, r3
 80086c6:	7803      	ldrb	r3, [r0, #0]
 80086c8:	460d      	mov	r5, r1
 80086ca:	2b47      	cmp	r3, #71	; 0x47
 80086cc:	4602      	mov	r2, r0
 80086ce:	79c1      	ldrb	r1, [r0, #7]
 80086d0:	d113      	bne.n	80086fa <__cxa_type_match+0x3a>
 80086d2:	7843      	ldrb	r3, [r0, #1]
 80086d4:	2b4e      	cmp	r3, #78	; 0x4e
 80086d6:	d110      	bne.n	80086fa <__cxa_type_match+0x3a>
 80086d8:	7883      	ldrb	r3, [r0, #2]
 80086da:	2b55      	cmp	r3, #85	; 0x55
 80086dc:	d10d      	bne.n	80086fa <__cxa_type_match+0x3a>
 80086de:	78c3      	ldrb	r3, [r0, #3]
 80086e0:	2b43      	cmp	r3, #67	; 0x43
 80086e2:	d10a      	bne.n	80086fa <__cxa_type_match+0x3a>
 80086e4:	7903      	ldrb	r3, [r0, #4]
 80086e6:	2b46      	cmp	r3, #70	; 0x46
 80086e8:	d107      	bne.n	80086fa <__cxa_type_match+0x3a>
 80086ea:	7943      	ldrb	r3, [r0, #5]
 80086ec:	2b4f      	cmp	r3, #79	; 0x4f
 80086ee:	d104      	bne.n	80086fa <__cxa_type_match+0x3a>
 80086f0:	7983      	ldrb	r3, [r0, #6]
 80086f2:	2b52      	cmp	r3, #82	; 0x52
 80086f4:	d101      	bne.n	80086fa <__cxa_type_match+0x3a>
 80086f6:	2900      	cmp	r1, #0
 80086f8:	d030      	beq.n	800875c <__cxa_type_match+0x9c>
 80086fa:	4610      	mov	r0, r2
 80086fc:	f7ff ffc3 	bl	8008686 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8008700:	2300      	movs	r3, #0
 8008702:	f080 0001 	eor.w	r0, r0, #1
 8008706:	b2c0      	uxtb	r0, r0
 8008708:	2400      	movs	r4, #0
 800870a:	9401      	str	r4, [sp, #4]
 800870c:	bb4b      	cbnz	r3, 8008762 <__cxa_type_match+0xa2>
 800870e:	bb50      	cbnz	r0, 8008766 <__cxa_type_match+0xa6>
 8008710:	2901      	cmp	r1, #1
 8008712:	bf0a      	itet	eq
 8008714:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8008718:	f1a2 0320 	subne.w	r3, r2, #32
 800871c:	3b78      	subeq	r3, #120	; 0x78
 800871e:	2901      	cmp	r1, #1
 8008720:	bf0c      	ite	eq
 8008722:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8008726:	3258      	addne	r2, #88	; 0x58
 8008728:	681c      	ldr	r4, [r3, #0]
 800872a:	9201      	str	r2, [sp, #4]
 800872c:	6823      	ldr	r3, [r4, #0]
 800872e:	4620      	mov	r0, r4
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	4798      	blx	r3
 8008734:	b1c8      	cbz	r0, 800876a <__cxa_type_match+0xaa>
 8008736:	2702      	movs	r7, #2
 8008738:	9b01      	ldr	r3, [sp, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	9301      	str	r3, [sp, #4]
 800873e:	682b      	ldr	r3, [r5, #0]
 8008740:	aa01      	add	r2, sp, #4
 8008742:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8008746:	4621      	mov	r1, r4
 8008748:	2301      	movs	r3, #1
 800874a:	4628      	mov	r0, r5
 800874c:	47c0      	blx	r8
 800874e:	b170      	cbz	r0, 800876e <__cxa_type_match+0xae>
 8008750:	9b01      	ldr	r3, [sp, #4]
 8008752:	6033      	str	r3, [r6, #0]
 8008754:	4638      	mov	r0, r7
 8008756:	b002      	add	sp, #8
 8008758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800875c:	2301      	movs	r3, #1
 800875e:	4608      	mov	r0, r1
 8008760:	e7d2      	b.n	8008708 <__cxa_type_match+0x48>
 8008762:	4c04      	ldr	r4, [pc, #16]	; (8008774 <__cxa_type_match+0xb4>)
 8008764:	e7e2      	b.n	800872c <__cxa_type_match+0x6c>
 8008766:	4c04      	ldr	r4, [pc, #16]	; (8008778 <__cxa_type_match+0xb8>)
 8008768:	e7e0      	b.n	800872c <__cxa_type_match+0x6c>
 800876a:	2701      	movs	r7, #1
 800876c:	e7e7      	b.n	800873e <__cxa_type_match+0x7e>
 800876e:	4607      	mov	r7, r0
 8008770:	e7f0      	b.n	8008754 <__cxa_type_match+0x94>
 8008772:	bf00      	nop
 8008774:	0800b6e8 	.word	0x0800b6e8
 8008778:	0800b6f0 	.word	0x0800b6f0

0800877c <__cxa_begin_cleanup>:
 800877c:	b510      	push	{r4, lr}
 800877e:	4604      	mov	r4, r0
 8008780:	f000 f836 	bl	80087f0 <__cxa_get_globals>
 8008784:	4602      	mov	r2, r0
 8008786:	4620      	mov	r0, r4
 8008788:	f1a4 0120 	sub.w	r1, r4, #32
 800878c:	f7ff ff7b 	bl	8008686 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8008790:	b160      	cbz	r0, 80087ac <__cxa_begin_cleanup+0x30>
 8008792:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008796:	3301      	adds	r3, #1
 8008798:	2b01      	cmp	r3, #1
 800879a:	f844 3c04 	str.w	r3, [r4, #-4]
 800879e:	d103      	bne.n	80087a8 <__cxa_begin_cleanup+0x2c>
 80087a0:	6893      	ldr	r3, [r2, #8]
 80087a2:	f844 3c08 	str.w	r3, [r4, #-8]
 80087a6:	6091      	str	r1, [r2, #8]
 80087a8:	2001      	movs	r0, #1
 80087aa:	bd10      	pop	{r4, pc}
 80087ac:	6893      	ldr	r3, [r2, #8]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d0f9      	beq.n	80087a6 <__cxa_begin_cleanup+0x2a>
 80087b2:	f000 fae9 	bl	8008d88 <_ZSt9terminatev>

080087b6 <__gnu_end_cleanup>:
 80087b6:	b510      	push	{r4, lr}
 80087b8:	f000 f81a 	bl	80087f0 <__cxa_get_globals>
 80087bc:	6882      	ldr	r2, [r0, #8]
 80087be:	4601      	mov	r1, r0
 80087c0:	b90a      	cbnz	r2, 80087c6 <__gnu_end_cleanup+0x10>
 80087c2:	f000 fae1 	bl	8008d88 <_ZSt9terminatev>
 80087c6:	f102 0420 	add.w	r4, r2, #32
 80087ca:	4620      	mov	r0, r4
 80087cc:	f7ff ff5b 	bl	8008686 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80087d0:	b140      	cbz	r0, 80087e4 <__gnu_end_cleanup+0x2e>
 80087d2:	69d3      	ldr	r3, [r2, #28]
 80087d4:	3b01      	subs	r3, #1
 80087d6:	61d3      	str	r3, [r2, #28]
 80087d8:	b913      	cbnz	r3, 80087e0 <__gnu_end_cleanup+0x2a>
 80087da:	6990      	ldr	r0, [r2, #24]
 80087dc:	6088      	str	r0, [r1, #8]
 80087de:	6193      	str	r3, [r2, #24]
 80087e0:	4620      	mov	r0, r4
 80087e2:	bd10      	pop	{r4, pc}
 80087e4:	6088      	str	r0, [r1, #8]
 80087e6:	e7fb      	b.n	80087e0 <__gnu_end_cleanup+0x2a>

080087e8 <__cxa_pure_virtual>:
 80087e8:	b508      	push	{r3, lr}
 80087ea:	f000 facd 	bl	8008d88 <_ZSt9terminatev>
	...

080087f0 <__cxa_get_globals>:
 80087f0:	4800      	ldr	r0, [pc, #0]	; (80087f4 <__cxa_get_globals+0x4>)
 80087f2:	4770      	bx	lr
 80087f4:	200010b4 	.word	0x200010b4

080087f8 <_Znaj>:
 80087f8:	f000 ba9e 	b.w	8008d38 <_Znwj>

080087fc <_ZdlPvj>:
 80087fc:	f000 bab6 	b.w	8008d6c <_ZdlPv>

08008800 <_ZL12read_uleb128PKhPm>:
 8008800:	2300      	movs	r3, #0
 8008802:	b570      	push	{r4, r5, r6, lr}
 8008804:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 8008808:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800880c:	f810 5b01 	ldrb.w	r5, [r0], #1
 8008810:	1994      	adds	r4, r2, r6
 8008812:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 8008816:	40a2      	lsls	r2, r4
 8008818:	4313      	orrs	r3, r2
 800881a:	062a      	lsls	r2, r5, #24
 800881c:	d4f4      	bmi.n	8008808 <_ZL12read_uleb128PKhPm+0x8>
 800881e:	600b      	str	r3, [r1, #0]
 8008820:	bd70      	pop	{r4, r5, r6, pc}

08008822 <_ZL12read_sleb128PKhPl>:
 8008822:	2300      	movs	r3, #0
 8008824:	461a      	mov	r2, r3
 8008826:	b530      	push	{r4, r5, lr}
 8008828:	f810 4b01 	ldrb.w	r4, [r0], #1
 800882c:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8008830:	4095      	lsls	r5, r2
 8008832:	432b      	orrs	r3, r5
 8008834:	0625      	lsls	r5, r4, #24
 8008836:	f102 0207 	add.w	r2, r2, #7
 800883a:	d4f5      	bmi.n	8008828 <_ZL12read_sleb128PKhPl+0x6>
 800883c:	2a1f      	cmp	r2, #31
 800883e:	d806      	bhi.n	800884e <_ZL12read_sleb128PKhPl+0x2c>
 8008840:	0664      	lsls	r4, r4, #25
 8008842:	bf42      	ittt	mi
 8008844:	f04f 34ff 	movmi.w	r4, #4294967295
 8008848:	fa04 f202 	lslmi.w	r2, r4, r2
 800884c:	4313      	orrmi	r3, r2
 800884e:	600b      	str	r3, [r1, #0]
 8008850:	bd30      	pop	{r4, r5, pc}

08008852 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8008852:	2850      	cmp	r0, #80	; 0x50
 8008854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008856:	4605      	mov	r5, r0
 8008858:	460e      	mov	r6, r1
 800885a:	4614      	mov	r4, r2
 800885c:	461f      	mov	r7, r3
 800885e:	d107      	bne.n	8008870 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e>
 8008860:	1cd0      	adds	r0, r2, #3
 8008862:	f020 0003 	bic.w	r0, r0, #3
 8008866:	f850 3b04 	ldr.w	r3, [r0], #4
 800886a:	603b      	str	r3, [r7, #0]
 800886c:	b003      	add	sp, #12
 800886e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008870:	f000 030f 	and.w	r3, r0, #15
 8008874:	2b0c      	cmp	r3, #12
 8008876:	d82e      	bhi.n	80088d6 <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 8008878:	e8df f003 	tbb	[pc, r3]
 800887c:	251d0725 	.word	0x251d0725
 8008880:	2d2d2d29 	.word	0x2d2d2d29
 8008884:	2521182d 	.word	0x2521182d
 8008888:	29          	.byte	0x29
 8008889:	00          	.byte	0x00
 800888a:	a901      	add	r1, sp, #4
 800888c:	4620      	mov	r0, r4
 800888e:	f7ff ffb7 	bl	8008800 <_ZL12read_uleb128PKhPm>
 8008892:	9b01      	ldr	r3, [sp, #4]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d0e8      	beq.n	800886a <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 8008898:	f005 0270 	and.w	r2, r5, #112	; 0x70
 800889c:	2a10      	cmp	r2, #16
 800889e:	bf08      	it	eq
 80088a0:	4626      	moveq	r6, r4
 80088a2:	062a      	lsls	r2, r5, #24
 80088a4:	4433      	add	r3, r6
 80088a6:	bf48      	it	mi
 80088a8:	681b      	ldrmi	r3, [r3, #0]
 80088aa:	e7de      	b.n	800886a <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 80088ac:	a901      	add	r1, sp, #4
 80088ae:	4620      	mov	r0, r4
 80088b0:	f7ff ffb7 	bl	8008822 <_ZL12read_sleb128PKhPl>
 80088b4:	e7ed      	b.n	8008892 <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 80088b6:	4620      	mov	r0, r4
 80088b8:	f830 3b02 	ldrh.w	r3, [r0], #2
 80088bc:	e7ea      	b.n	8008894 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80088be:	4620      	mov	r0, r4
 80088c0:	f930 3b02 	ldrsh.w	r3, [r0], #2
 80088c4:	e7e6      	b.n	8008894 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80088c6:	4620      	mov	r0, r4
 80088c8:	f850 3b04 	ldr.w	r3, [r0], #4
 80088cc:	e7e2      	b.n	8008894 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80088ce:	4620      	mov	r0, r4
 80088d0:	f850 3b08 	ldr.w	r3, [r0], #8
 80088d4:	e7de      	b.n	8008894 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80088d6:	f000 ffc5 	bl	8009864 <abort>

080088da <_Unwind_GetGR>:
 80088da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088dc:	ab03      	add	r3, sp, #12
 80088de:	9300      	str	r3, [sp, #0]
 80088e0:	2300      	movs	r3, #0
 80088e2:	460a      	mov	r2, r1
 80088e4:	4619      	mov	r1, r3
 80088e6:	f7f8 faa7 	bl	8000e38 <_Unwind_VRS_Get>
 80088ea:	9803      	ldr	r0, [sp, #12]
 80088ec:	b005      	add	sp, #20
 80088ee:	f85d fb04 	ldr.w	pc, [sp], #4

080088f2 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>:
 80088f2:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80088f6:	2820      	cmp	r0, #32
 80088f8:	b508      	push	{r3, lr}
 80088fa:	d010      	beq.n	800891e <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x2c>
 80088fc:	d804      	bhi.n	8008908 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x16>
 80088fe:	b1c0      	cbz	r0, 8008932 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x40>
 8008900:	2810      	cmp	r0, #16
 8008902:	d016      	beq.n	8008932 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x40>
 8008904:	f000 ffae 	bl	8009864 <abort>
 8008908:	2840      	cmp	r0, #64	; 0x40
 800890a:	d00d      	beq.n	8008928 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x36>
 800890c:	2850      	cmp	r0, #80	; 0x50
 800890e:	d010      	beq.n	8008932 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x40>
 8008910:	2830      	cmp	r0, #48	; 0x30
 8008912:	d1f7      	bne.n	8008904 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x12>
 8008914:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008918:	4608      	mov	r0, r1
 800891a:	f7f9 b849 	b.w	80019b0 <_Unwind_GetDataRelBase>
 800891e:	4608      	mov	r0, r1
 8008920:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008924:	f7f9 b848 	b.w	80019b8 <_Unwind_GetTextRelBase>
 8008928:	4608      	mov	r0, r1
 800892a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800892e:	f7f9 b82f 	b.w	8001990 <_Unwind_GetRegionStart>
 8008932:	2000      	movs	r0, #0
 8008934:	bd08      	pop	{r3, pc}

08008936 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8008936:	29ff      	cmp	r1, #255	; 0xff
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	460c      	mov	r4, r1
 800893c:	4615      	mov	r5, r2
 800893e:	461e      	mov	r6, r3
 8008940:	d00b      	beq.n	800895a <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj+0x24>
 8008942:	4601      	mov	r1, r0
 8008944:	4620      	mov	r0, r4
 8008946:	f7ff ffd4 	bl	80088f2 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 800894a:	4601      	mov	r1, r0
 800894c:	4633      	mov	r3, r6
 800894e:	462a      	mov	r2, r5
 8008950:	4620      	mov	r0, r4
 8008952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008956:	f7ff bf7c 	b.w	8008852 <_ZL28read_encoded_value_with_basehjPKhPj>
 800895a:	2100      	movs	r1, #0
 800895c:	e7f6      	b.n	800894c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj+0x16>

0800895e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 800895e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008960:	460e      	mov	r6, r1
 8008962:	4614      	mov	r4, r2
 8008964:	4605      	mov	r5, r0
 8008966:	b108      	cbz	r0, 800896c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 8008968:	f7f9 f812 	bl	8001990 <_Unwind_GetRegionStart>
 800896c:	6020      	str	r0, [r4, #0]
 800896e:	7831      	ldrb	r1, [r6, #0]
 8008970:	1c72      	adds	r2, r6, #1
 8008972:	29ff      	cmp	r1, #255	; 0xff
 8008974:	d01c      	beq.n	80089b0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x52>
 8008976:	1d23      	adds	r3, r4, #4
 8008978:	4628      	mov	r0, r5
 800897a:	f7ff ffdc 	bl	8008936 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800897e:	4602      	mov	r2, r0
 8008980:	7813      	ldrb	r3, [r2, #0]
 8008982:	1c50      	adds	r0, r2, #1
 8008984:	2bff      	cmp	r3, #255	; 0xff
 8008986:	7523      	strb	r3, [r4, #20]
 8008988:	d014      	beq.n	80089b4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 800898a:	2310      	movs	r3, #16
 800898c:	a901      	add	r1, sp, #4
 800898e:	7523      	strb	r3, [r4, #20]
 8008990:	f7ff ff36 	bl	8008800 <_ZL12read_uleb128PKhPm>
 8008994:	9b01      	ldr	r3, [sp, #4]
 8008996:	4403      	add	r3, r0
 8008998:	60e3      	str	r3, [r4, #12]
 800899a:	7803      	ldrb	r3, [r0, #0]
 800899c:	a901      	add	r1, sp, #4
 800899e:	7563      	strb	r3, [r4, #21]
 80089a0:	3001      	adds	r0, #1
 80089a2:	f7ff ff2d 	bl	8008800 <_ZL12read_uleb128PKhPm>
 80089a6:	9b01      	ldr	r3, [sp, #4]
 80089a8:	4403      	add	r3, r0
 80089aa:	6123      	str	r3, [r4, #16]
 80089ac:	b002      	add	sp, #8
 80089ae:	bd70      	pop	{r4, r5, r6, pc}
 80089b0:	6060      	str	r0, [r4, #4]
 80089b2:	e7e5      	b.n	8008980 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x22>
 80089b4:	2300      	movs	r3, #0
 80089b6:	e7ef      	b.n	8008998 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3a>

080089b8 <__gxx_personality_v0>:
 80089b8:	2300      	movs	r3, #0
 80089ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089be:	b091      	sub	sp, #68	; 0x44
 80089c0:	9304      	str	r3, [sp, #16]
 80089c2:	f000 0303 	and.w	r3, r0, #3
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	4607      	mov	r7, r0
 80089ca:	460c      	mov	r4, r1
 80089cc:	4616      	mov	r6, r2
 80089ce:	d011      	beq.n	80089f4 <__gxx_personality_v0+0x3c>
 80089d0:	d303      	bcc.n	80089da <__gxx_personality_v0+0x22>
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d003      	beq.n	80089de <__gxx_personality_v0+0x26>
 80089d6:	f000 ff45 	bl	8009864 <abort>
 80089da:	0702      	lsls	r2, r0, #28
 80089dc:	d51a      	bpl.n	8008a14 <__gxx_personality_v0+0x5c>
 80089de:	4631      	mov	r1, r6
 80089e0:	4620      	mov	r0, r4
 80089e2:	f7f8 ffbf 	bl	8001964 <__gnu_unwind_frame>
 80089e6:	b118      	cbz	r0, 80089f0 <__gxx_personality_v0+0x38>
 80089e8:	2009      	movs	r0, #9
 80089ea:	b011      	add	sp, #68	; 0x44
 80089ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f0:	2008      	movs	r0, #8
 80089f2:	e7fa      	b.n	80089ea <__gxx_personality_v0+0x32>
 80089f4:	f000 0508 	and.w	r5, r0, #8
 80089f8:	f005 08ff 	and.w	r8, r5, #255	; 0xff
 80089fc:	bb75      	cbnz	r5, 8008a5c <__gxx_personality_v0+0xa4>
 80089fe:	f8d1 9020 	ldr.w	r9, [r1, #32]
 8008a02:	4610      	mov	r0, r2
 8008a04:	210d      	movs	r1, #13
 8008a06:	f7ff ff68 	bl	80088da <_Unwind_GetGR>
 8008a0a:	4581      	cmp	r9, r0
 8008a0c:	f040 8145 	bne.w	8008c9a <__gxx_personality_v0+0x2e2>
 8008a10:	2506      	movs	r5, #6
 8008a12:	e000      	b.n	8008a16 <__gxx_personality_v0+0x5e>
 8008a14:	2501      	movs	r5, #1
 8008a16:	ab10      	add	r3, sp, #64	; 0x40
 8008a18:	f843 4d2c 	str.w	r4, [r3, #-44]!
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	2300      	movs	r3, #0
 8008a20:	f007 0708 	and.w	r7, r7, #8
 8008a24:	433d      	orrs	r5, r7
 8008a26:	220c      	movs	r2, #12
 8008a28:	4619      	mov	r1, r3
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	f7f8 fa26 	bl	8000e7c <_Unwind_VRS_Set>
 8008a30:	2d06      	cmp	r5, #6
 8008a32:	f040 813e 	bne.w	8008cb2 <__gxx_personality_v0+0x2fa>
 8008a36:	e9d4 980a 	ldrd	r9, r8, [r4, #40]	; 0x28
 8008a3a:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8008a3c:	2f00      	cmp	r7, #0
 8008a3e:	bf0c      	ite	eq
 8008a40:	f04f 0a01 	moveq.w	sl, #1
 8008a44:	f04f 0a03 	movne.w	sl, #3
 8008a48:	f015 0508 	ands.w	r5, r5, #8
 8008a4c:	f000 80c7 	beq.w	8008bde <__gxx_personality_v0+0x226>
 8008a50:	f1ba 0f01 	cmp.w	sl, #1
 8008a54:	f040 80be 	bne.w	8008bd4 <__gxx_personality_v0+0x21c>
 8008a58:	f000 f996 	bl	8008d88 <_ZSt9terminatev>
 8008a5c:	2502      	movs	r5, #2
 8008a5e:	e7da      	b.n	8008a16 <__gxx_personality_v0+0x5e>
 8008a60:	2000      	movs	r0, #0
 8008a62:	e13b      	b.n	8008cdc <__gxx_personality_v0+0x324>
 8008a64:	9a07      	ldr	r2, [sp, #28]
 8008a66:	4413      	add	r3, r2
 8008a68:	42bb      	cmp	r3, r7
 8008a6a:	f240 813f 	bls.w	8008cec <__gxx_personality_v0+0x334>
 8008a6e:	9f08      	ldr	r7, [sp, #32]
 8008a70:	b10f      	cbz	r7, 8008a76 <__gxx_personality_v0+0xbe>
 8008a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a74:	441f      	add	r7, r3
 8008a76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a78:	b110      	cbz	r0, 8008a80 <__gxx_personality_v0+0xc8>
 8008a7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a7c:	3801      	subs	r0, #1
 8008a7e:	4418      	add	r0, r3
 8008a80:	2f00      	cmp	r7, #0
 8008a82:	d0ac      	beq.n	80089de <__gxx_personality_v0+0x26>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	f000 8104 	beq.w	8008c92 <__gxx_personality_v0+0x2da>
 8008a8a:	f015 0308 	ands.w	r3, r5, #8
 8008a8e:	9302      	str	r3, [sp, #8]
 8008a90:	d034      	beq.n	8008afc <__gxx_personality_v0+0x144>
 8008a92:	2347      	movs	r3, #71	; 0x47
 8008a94:	7023      	strb	r3, [r4, #0]
 8008a96:	234e      	movs	r3, #78	; 0x4e
 8008a98:	7063      	strb	r3, [r4, #1]
 8008a9a:	2355      	movs	r3, #85	; 0x55
 8008a9c:	70a3      	strb	r3, [r4, #2]
 8008a9e:	2343      	movs	r3, #67	; 0x43
 8008aa0:	70e3      	strb	r3, [r4, #3]
 8008aa2:	2346      	movs	r3, #70	; 0x46
 8008aa4:	7123      	strb	r3, [r4, #4]
 8008aa6:	234f      	movs	r3, #79	; 0x4f
 8008aa8:	7163      	strb	r3, [r4, #5]
 8008aaa:	2352      	movs	r3, #82	; 0x52
 8008aac:	71a3      	strb	r3, [r4, #6]
 8008aae:	2300      	movs	r3, #0
 8008ab0:	71e3      	strb	r3, [r4, #7]
 8008ab2:	f04f 0a00 	mov.w	sl, #0
 8008ab6:	f06f 0b03 	mvn.w	fp, #3
 8008aba:	a907      	add	r1, sp, #28
 8008abc:	f7ff feb1 	bl	8008822 <_ZL12read_sleb128PKhPl>
 8008ac0:	a908      	add	r1, sp, #32
 8008ac2:	9003      	str	r0, [sp, #12]
 8008ac4:	f7ff fead 	bl	8008822 <_ZL12read_sleb128PKhPl>
 8008ac8:	9907      	ldr	r1, [sp, #28]
 8008aca:	2900      	cmp	r1, #0
 8008acc:	d067      	beq.n	8008b9e <__gxx_personality_v0+0x1e6>
 8008ace:	dd3e      	ble.n	8008b4e <__gxx_personality_v0+0x196>
 8008ad0:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8008ad4:	28ff      	cmp	r0, #255	; 0xff
 8008ad6:	d034      	beq.n	8008b42 <__gxx_personality_v0+0x18a>
 8008ad8:	f000 0307 	and.w	r3, r0, #7
 8008adc:	2b04      	cmp	r3, #4
 8008ade:	f63f af7a 	bhi.w	80089d6 <__gxx_personality_v0+0x1e>
 8008ae2:	a201      	add	r2, pc, #4	; (adr r2, 8008ae8 <__gxx_personality_v0+0x130>)
 8008ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae8:	08008b0f 	.word	0x08008b0f
 8008aec:	080089d7 	.word	0x080089d7
 8008af0:	08008b49 	.word	0x08008b49
 8008af4:	08008b0f 	.word	0x08008b0f
 8008af8:	08008b3d 	.word	0x08008b3d
 8008afc:	79e3      	ldrb	r3, [r4, #7]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	bf0c      	ite	eq
 8008b02:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8008b06:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8008b0a:	9304      	str	r3, [sp, #16]
 8008b0c:	e7d1      	b.n	8008ab2 <__gxx_personality_v0+0xfa>
 8008b0e:	f04f 0c04 	mov.w	ip, #4
 8008b12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b14:	ab09      	add	r3, sp, #36	; 0x24
 8008b16:	fb0c 2211 	mls	r2, ip, r1, r2
 8008b1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008b1c:	f7ff fe99 	bl	8008852 <_ZL28read_encoded_value_with_basehjPKhPj>
 8008b20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b22:	b131      	cbz	r1, 8008b32 <__gxx_personality_v0+0x17a>
 8008b24:	b37c      	cbz	r4, 8008b86 <__gxx_personality_v0+0x1ce>
 8008b26:	ab04      	add	r3, sp, #16
 8008b28:	2200      	movs	r2, #0
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f7ff fdc8 	bl	80086c0 <__cxa_type_match>
 8008b30:	b348      	cbz	r0, 8008b86 <__gxx_personality_v0+0x1ce>
 8008b32:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8008b36:	f04f 0a03 	mov.w	sl, #3
 8008b3a:	e038      	b.n	8008bae <__gxx_personality_v0+0x1f6>
 8008b3c:	f04f 0c08 	mov.w	ip, #8
 8008b40:	e7e7      	b.n	8008b12 <__gxx_personality_v0+0x15a>
 8008b42:	f04f 0c00 	mov.w	ip, #0
 8008b46:	e7e4      	b.n	8008b12 <__gxx_personality_v0+0x15a>
 8008b48:	f04f 0c02 	mov.w	ip, #2
 8008b4c:	e7e1      	b.n	8008b12 <__gxx_personality_v0+0x15a>
 8008b4e:	fb01 b10b 	mla	r1, r1, fp, fp
 8008b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b54:	eb03 0901 	add.w	r9, r3, r1
 8008b58:	b1e4      	cbz	r4, 8008b94 <__gxx_personality_v0+0x1dc>
 8008b5a:	9a02      	ldr	r2, [sp, #8]
 8008b5c:	b9d2      	cbnz	r2, 8008b94 <__gxx_personality_v0+0x1dc>
 8008b5e:	9b04      	ldr	r3, [sp, #16]
 8008b60:	f1a9 0904 	sub.w	r9, r9, #4
 8008b64:	9306      	str	r3, [sp, #24]
 8008b66:	f859 1f04 	ldr.w	r1, [r9, #4]!
 8008b6a:	b141      	cbz	r1, 8008b7e <__gxx_personality_v0+0x1c6>
 8008b6c:	ab06      	add	r3, sp, #24
 8008b6e:	2200      	movs	r2, #0
 8008b70:	4449      	add	r1, r9
 8008b72:	4620      	mov	r0, r4
 8008b74:	f7ff fda4 	bl	80086c0 <__cxa_type_match>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d0f4      	beq.n	8008b66 <__gxx_personality_v0+0x1ae>
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	f081 0101 	eor.w	r1, r1, #1
 8008b82:	2900      	cmp	r1, #0
 8008b84:	d1d5      	bne.n	8008b32 <__gxx_personality_v0+0x17a>
 8008b86:	9808      	ldr	r0, [sp, #32]
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d07e      	beq.n	8008c8a <__gxx_personality_v0+0x2d2>
 8008b8c:	9b03      	ldr	r3, [sp, #12]
 8008b8e:	4403      	add	r3, r0
 8008b90:	4618      	mov	r0, r3
 8008b92:	e792      	b.n	8008aba <__gxx_personality_v0+0x102>
 8008b94:	5859      	ldr	r1, [r3, r1]
 8008b96:	fab1 f181 	clz	r1, r1
 8008b9a:	0949      	lsrs	r1, r1, #5
 8008b9c:	e7f1      	b.n	8008b82 <__gxx_personality_v0+0x1ca>
 8008b9e:	f04f 0a01 	mov.w	sl, #1
 8008ba2:	e7f0      	b.n	8008b86 <__gxx_personality_v0+0x1ce>
 8008ba4:	f04f 0900 	mov.w	r9, #0
 8008ba8:	f04f 0a01 	mov.w	sl, #1
 8008bac:	464f      	mov	r7, r9
 8008bae:	07eb      	lsls	r3, r5, #31
 8008bb0:	f57f af4a 	bpl.w	8008a48 <__gxx_personality_v0+0x90>
 8008bb4:	f1ba 0f02 	cmp.w	sl, #2
 8008bb8:	f43f af11 	beq.w	80089de <__gxx_personality_v0+0x26>
 8008bbc:	210d      	movs	r1, #13
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	9d04      	ldr	r5, [sp, #16]
 8008bc2:	f7ff fe8a 	bl	80088da <_Unwind_GetGR>
 8008bc6:	e9c4 980a 	strd	r9, r8, [r4, #40]	; 0x28
 8008bca:	e9c4 0508 	strd	r0, r5, [r4, #32]
 8008bce:	6327      	str	r7, [r4, #48]	; 0x30
 8008bd0:	2006      	movs	r0, #6
 8008bd2:	e70a      	b.n	80089ea <__gxx_personality_v0+0x32>
 8008bd4:	f1b9 0f00 	cmp.w	r9, #0
 8008bd8:	da2a      	bge.n	8008c30 <__gxx_personality_v0+0x278>
 8008bda:	f000 f8e7 	bl	8008dac <_ZSt10unexpectedv>
 8008bde:	f1ba 0f01 	cmp.w	sl, #1
 8008be2:	d102      	bne.n	8008bea <__gxx_personality_v0+0x232>
 8008be4:	4620      	mov	r0, r4
 8008be6:	f000 fc38 	bl	800945a <__cxa_call_terminate>
 8008bea:	f1b9 0f00 	cmp.w	r9, #0
 8008bee:	da1f      	bge.n	8008c30 <__gxx_personality_v0+0x278>
 8008bf0:	aa0a      	add	r2, sp, #40	; 0x28
 8008bf2:	4641      	mov	r1, r8
 8008bf4:	4630      	mov	r0, r6
 8008bf6:	f7ff feb2 	bl	800895e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8008bfa:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8008bfe:	28ff      	cmp	r0, #255	; 0xff
 8008c00:	d00f      	beq.n	8008c22 <__gxx_personality_v0+0x26a>
 8008c02:	4631      	mov	r1, r6
 8008c04:	f7ff fe75 	bl	80088f2 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8008c08:	f06f 0303 	mvn.w	r3, #3
 8008c0c:	fb09 3203 	mla	r2, r9, r3, r3
 8008c10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c12:	900c      	str	r0, [sp, #48]	; 0x30
 8008c14:	4413      	add	r3, r2
 8008c16:	2200      	movs	r2, #0
 8008c18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c1c:	b119      	cbz	r1, 8008c26 <__gxx_personality_v0+0x26e>
 8008c1e:	3201      	adds	r2, #1
 8008c20:	e7fa      	b.n	8008c18 <__gxx_personality_v0+0x260>
 8008c22:	4628      	mov	r0, r5
 8008c24:	e7f0      	b.n	8008c08 <__gxx_personality_v0+0x250>
 8008c26:	e9c4 200a 	strd	r2, r0, [r4, #40]	; 0x28
 8008c2a:	2204      	movs	r2, #4
 8008c2c:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 8008c30:	ab10      	add	r3, sp, #64	; 0x40
 8008c32:	f843 4d1c 	str.w	r4, [r3, #-28]!
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	2300      	movs	r3, #0
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	4619      	mov	r1, r3
 8008c40:	f7f8 f91c 	bl	8000e7c <_Unwind_VRS_Set>
 8008c44:	ab10      	add	r3, sp, #64	; 0x40
 8008c46:	f843 9d20 	str.w	r9, [r3, #-32]!
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	2201      	movs	r2, #1
 8008c50:	4619      	mov	r1, r3
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7f8 f912 	bl	8000e7c <_Unwind_VRS_Set>
 8008c58:	210f      	movs	r1, #15
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	f7ff fe3d 	bl	80088da <_Unwind_GetGR>
 8008c60:	f000 0001 	and.w	r0, r0, #1
 8008c64:	ab10      	add	r3, sp, #64	; 0x40
 8008c66:	4307      	orrs	r7, r0
 8008c68:	f843 7d24 	str.w	r7, [r3, #-36]!
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	2300      	movs	r3, #0
 8008c70:	220f      	movs	r2, #15
 8008c72:	4619      	mov	r1, r3
 8008c74:	4630      	mov	r0, r6
 8008c76:	f7f8 f901 	bl	8000e7c <_Unwind_VRS_Set>
 8008c7a:	f1ba 0f02 	cmp.w	sl, #2
 8008c7e:	d102      	bne.n	8008c86 <__gxx_personality_v0+0x2ce>
 8008c80:	4620      	mov	r0, r4
 8008c82:	f7ff fd7b 	bl	800877c <__cxa_begin_cleanup>
 8008c86:	2007      	movs	r0, #7
 8008c88:	e6af      	b.n	80089ea <__gxx_personality_v0+0x32>
 8008c8a:	f1ba 0f00 	cmp.w	sl, #0
 8008c8e:	f43f aea6 	beq.w	80089de <__gxx_personality_v0+0x26>
 8008c92:	4681      	mov	r9, r0
 8008c94:	f04f 0a02 	mov.w	sl, #2
 8008c98:	e789      	b.n	8008bae <__gxx_personality_v0+0x1f6>
 8008c9a:	aa10      	add	r2, sp, #64	; 0x40
 8008c9c:	f842 4d2c 	str.w	r4, [r2, #-44]!
 8008ca0:	9200      	str	r2, [sp, #0]
 8008ca2:	4643      	mov	r3, r8
 8008ca4:	220c      	movs	r2, #12
 8008ca6:	4641      	mov	r1, r8
 8008ca8:	4630      	mov	r0, r6
 8008caa:	f045 0502 	orr.w	r5, r5, #2
 8008cae:	f7f8 f8e5 	bl	8000e7c <_Unwind_VRS_Set>
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	f7f8 fe72 	bl	800199c <_Unwind_GetLanguageSpecificData>
 8008cb8:	4680      	mov	r8, r0
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	f43f ae8f 	beq.w	80089de <__gxx_personality_v0+0x26>
 8008cc0:	4601      	mov	r1, r0
 8008cc2:	aa0a      	add	r2, sp, #40	; 0x28
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	f7ff fe4a 	bl	800895e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8008cca:	4681      	mov	r9, r0
 8008ccc:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8008cd0:	28ff      	cmp	r0, #255	; 0xff
 8008cd2:	f43f aec5 	beq.w	8008a60 <__gxx_personality_v0+0xa8>
 8008cd6:	4631      	mov	r1, r6
 8008cd8:	f7ff fe0b 	bl	80088f2 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8008cdc:	900c      	str	r0, [sp, #48]	; 0x30
 8008cde:	210f      	movs	r1, #15
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	f7ff fdfa 	bl	80088da <_Unwind_GetGR>
 8008ce6:	f020 0001 	bic.w	r0, r0, #1
 8008cea:	1e47      	subs	r7, r0, #1
 8008cec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cee:	454b      	cmp	r3, r9
 8008cf0:	f67f af58 	bls.w	8008ba4 <__gxx_personality_v0+0x1ec>
 8008cf4:	464a      	mov	r2, r9
 8008cf6:	ab06      	add	r3, sp, #24
 8008cf8:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	f7ff fe1a 	bl	8008936 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8008d02:	ab07      	add	r3, sp, #28
 8008d04:	4602      	mov	r2, r0
 8008d06:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	f7ff fe13 	bl	8008936 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8008d10:	ab08      	add	r3, sp, #32
 8008d12:	4602      	mov	r2, r0
 8008d14:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8008d18:	2000      	movs	r0, #0
 8008d1a:	f7ff fe0c 	bl	8008936 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8008d1e:	a909      	add	r1, sp, #36	; 0x24
 8008d20:	f7ff fd6e 	bl	8008800 <_ZL12read_uleb128PKhPm>
 8008d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d26:	9a06      	ldr	r2, [sp, #24]
 8008d28:	4681      	mov	r9, r0
 8008d2a:	4413      	add	r3, r2
 8008d2c:	42bb      	cmp	r3, r7
 8008d2e:	f67f ae99 	bls.w	8008a64 <__gxx_personality_v0+0xac>
 8008d32:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008d36:	e7d9      	b.n	8008cec <__gxx_personality_v0+0x334>

08008d38 <_Znwj>:
 8008d38:	b510      	push	{r4, lr}
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	bf14      	ite	ne
 8008d3e:	4604      	movne	r4, r0
 8008d40:	2401      	moveq	r4, #1
 8008d42:	4620      	mov	r0, r4
 8008d44:	f000 fdc0 	bl	80098c8 <malloc>
 8008d48:	b930      	cbnz	r0, 8008d58 <_Znwj+0x20>
 8008d4a:	f000 f807 	bl	8008d5c <_ZSt15get_new_handlerv>
 8008d4e:	b908      	cbnz	r0, 8008d54 <_Znwj+0x1c>
 8008d50:	f000 fd88 	bl	8009864 <abort>
 8008d54:	4780      	blx	r0
 8008d56:	e7f4      	b.n	8008d42 <_Znwj+0xa>
 8008d58:	bd10      	pop	{r4, pc}
	...

08008d5c <_ZSt15get_new_handlerv>:
 8008d5c:	4b02      	ldr	r3, [pc, #8]	; (8008d68 <_ZSt15get_new_handlerv+0xc>)
 8008d5e:	6818      	ldr	r0, [r3, #0]
 8008d60:	f3bf 8f5b 	dmb	ish
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	200010c0 	.word	0x200010c0

08008d6c <_ZdlPv>:
 8008d6c:	f000 bdb4 	b.w	80098d8 <free>

08008d70 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008d70:	b508      	push	{r3, lr}
 8008d72:	4780      	blx	r0
 8008d74:	f000 fd76 	bl	8009864 <abort>

08008d78 <_ZSt13get_terminatev>:
 8008d78:	4b02      	ldr	r3, [pc, #8]	; (8008d84 <_ZSt13get_terminatev+0xc>)
 8008d7a:	6818      	ldr	r0, [r3, #0]
 8008d7c:	f3bf 8f5b 	dmb	ish
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	20000014 	.word	0x20000014

08008d88 <_ZSt9terminatev>:
 8008d88:	b508      	push	{r3, lr}
 8008d8a:	f7ff fff5 	bl	8008d78 <_ZSt13get_terminatev>
 8008d8e:	f7ff ffef 	bl	8008d70 <_ZN10__cxxabiv111__terminateEPFvvE>

08008d92 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8008d92:	b508      	push	{r3, lr}
 8008d94:	4780      	blx	r0
 8008d96:	f7ff fff7 	bl	8008d88 <_ZSt9terminatev>
	...

08008d9c <_ZSt14get_unexpectedv>:
 8008d9c:	4b02      	ldr	r3, [pc, #8]	; (8008da8 <_ZSt14get_unexpectedv+0xc>)
 8008d9e:	6818      	ldr	r0, [r3, #0]
 8008da0:	f3bf 8f5b 	dmb	ish
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	20000010 	.word	0x20000010

08008dac <_ZSt10unexpectedv>:
 8008dac:	b508      	push	{r3, lr}
 8008dae:	f7ff fff5 	bl	8008d9c <_ZSt14get_unexpectedv>
 8008db2:	f7ff ffee 	bl	8008d92 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08008db6 <_ZNSaIcEC1Ev>:
 8008db6:	4770      	bx	lr

08008db8 <_ZNSaIcED1Ev>:
 8008db8:	4770      	bx	lr

08008dba <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 8008dba:	684b      	ldr	r3, [r1, #4]
 8008dbc:	6001      	str	r1, [r0, #0]
 8008dbe:	6043      	str	r3, [r0, #4]
 8008dc0:	684b      	ldr	r3, [r1, #4]
 8008dc2:	6018      	str	r0, [r3, #0]
 8008dc4:	6048      	str	r0, [r1, #4]
 8008dc6:	4770      	bx	lr

08008dc8 <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 8008dc8:	e9d0 3200 	ldrd	r3, r2, [r0]
 8008dcc:	6013      	str	r3, [r2, #0]
 8008dce:	605a      	str	r2, [r3, #4]
 8008dd0:	4770      	bx	lr

08008dd2 <_ZSt17__throw_bad_allocv>:
 8008dd2:	b508      	push	{r3, lr}
 8008dd4:	f000 fd46 	bl	8009864 <abort>

08008dd8 <_ZSt19__throw_logic_errorPKc>:
 8008dd8:	b508      	push	{r3, lr}
 8008dda:	f000 fd43 	bl	8009864 <abort>

08008dde <_ZSt20__throw_length_errorPKc>:
 8008dde:	b508      	push	{r3, lr}
 8008de0:	f000 fd40 	bl	8009864 <abort>

08008de4 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8008de4:	b40f      	push	{r0, r1, r2, r3}
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b082      	sub	sp, #8
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	f107 0410 	add.w	r4, r7, #16
 8008df0:	f854 5b04 	ldr.w	r5, [r4], #4
 8008df4:	4628      	mov	r0, r5
 8008df6:	f7f7 f9b5 	bl	8000164 <strlen>
 8008dfa:	f200 230e 	addw	r3, r0, #526	; 0x20e
 8008dfe:	f023 0307 	bic.w	r3, r3, #7
 8008e02:	ebad 0d03 	sub.w	sp, sp, r3
 8008e06:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8008e0a:	4623      	mov	r3, r4
 8008e0c:	462a      	mov	r2, r5
 8008e0e:	4668      	mov	r0, sp
 8008e10:	607c      	str	r4, [r7, #4]
 8008e12:	f000 fccd 	bl	80097b0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8008e16:	f000 fd25 	bl	8009864 <abort>

08008e1a <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8008e1a:	b10a      	cbz	r2, 8008e20 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8008e1c:	f000 bd72 	b.w	8009904 <memcmp>
 8008e20:	4610      	mov	r0, r2
 8008e22:	4770      	bx	lr

08008e24 <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
 8008e24:	4613      	mov	r3, r2
 8008e26:	460a      	mov	r2, r1
 8008e28:	b111      	cbz	r1, 8008e30 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
 8008e2a:	7819      	ldrb	r1, [r3, #0]
 8008e2c:	f000 bd5c 	b.w	80098e8 <memchr>
 8008e30:	4608      	mov	r0, r1
 8008e32:	4770      	bx	lr

08008e34 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8008e34:	b10a      	cbz	r2, 8008e3a <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8008e36:	f000 bd74 	b.w	8009922 <memcpy>
 8008e3a:	4770      	bx	lr

08008e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8008e3c:	b508      	push	{r3, lr}
 8008e3e:	680b      	ldr	r3, [r1, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	da02      	bge.n	8008e4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8008e44:	4809      	ldr	r0, [pc, #36]	; (8008e6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8008e46:	f7ff ffca 	bl	8008dde <_ZSt20__throw_length_errorPKc>
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d908      	bls.n	8008e60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8008e4e:	0052      	lsls	r2, r2, #1
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d205      	bcs.n	8008e60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8008e54:	2a00      	cmp	r2, #0
 8008e56:	bfb6      	itet	lt
 8008e58:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8008e5c:	600a      	strge	r2, [r1, #0]
 8008e5e:	600b      	strlt	r3, [r1, #0]
 8008e60:	6808      	ldr	r0, [r1, #0]
 8008e62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008e66:	3001      	adds	r0, #1
 8008e68:	f7ff bf66 	b.w	8008d38 <_Znwj>
 8008e6c:	0800b6b5 	.word	0x0800b6b5

08008e70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8008e70:	4603      	mov	r3, r0
 8008e72:	f853 0b08 	ldr.w	r0, [r3], #8
 8008e76:	4298      	cmp	r0, r3
 8008e78:	d001      	beq.n	8008e7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8008e7a:	f7ff bf77 	b.w	8008d6c <_ZdlPv>
 8008e7e:	4770      	bx	lr

08008e80 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8008e80:	b510      	push	{r4, lr}
 8008e82:	6843      	ldr	r3, [r0, #4]
 8008e84:	4614      	mov	r4, r2
 8008e86:	4299      	cmp	r1, r3
 8008e88:	d904      	bls.n	8008e94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 8008e8a:	460a      	mov	r2, r1
 8008e8c:	4802      	ldr	r0, [pc, #8]	; (8008e98 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8008e8e:	4621      	mov	r1, r4
 8008e90:	f7ff ffa8 	bl	8008de4 <_ZSt24__throw_out_of_range_fmtPKcz>
 8008e94:	4608      	mov	r0, r1
 8008e96:	bd10      	pop	{r4, pc}
 8008e98:	0800b625 	.word	0x0800b625

08008e9c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8008e9c:	b508      	push	{r3, lr}
 8008e9e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008ea2:	6840      	ldr	r0, [r0, #4]
 8008ea4:	3901      	subs	r1, #1
 8008ea6:	1a09      	subs	r1, r1, r0
 8008ea8:	4291      	cmp	r1, r2
 8008eaa:	d202      	bcs.n	8008eb2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7ff ff96 	bl	8008dde <_ZSt20__throw_length_errorPKc>
 8008eb2:	bd08      	pop	{r3, pc}

08008eb4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8008eb4:	6803      	ldr	r3, [r0, #0]
 8008eb6:	428b      	cmp	r3, r1
 8008eb8:	d806      	bhi.n	8008ec8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8008eba:	6840      	ldr	r0, [r0, #4]
 8008ebc:	4418      	add	r0, r3
 8008ebe:	4281      	cmp	r1, r0
 8008ec0:	bf94      	ite	ls
 8008ec2:	2000      	movls	r0, #0
 8008ec4:	2001      	movhi	r0, #1
 8008ec6:	4770      	bx	lr
 8008ec8:	2001      	movs	r0, #1
 8008eca:	4770      	bx	lr

08008ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8008ecc:	2a01      	cmp	r2, #1
 8008ece:	b510      	push	{r4, lr}
 8008ed0:	d102      	bne.n	8008ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8008ed2:	780a      	ldrb	r2, [r1, #0]
 8008ed4:	7002      	strb	r2, [r0, #0]
 8008ed6:	bd10      	pop	{r4, pc}
 8008ed8:	f7ff ffac 	bl	8008e34 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8008edc:	e7fb      	b.n	8008ed6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08008ede <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8008ede:	2a01      	cmp	r2, #1
 8008ee0:	b430      	push	{r4, r5}
 8008ee2:	d103      	bne.n	8008eec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8008ee4:	780b      	ldrb	r3, [r1, #0]
 8008ee6:	7003      	strb	r3, [r0, #0]
 8008ee8:	bc30      	pop	{r4, r5}
 8008eea:	4770      	bx	lr
 8008eec:	2a00      	cmp	r2, #0
 8008eee:	d0fb      	beq.n	8008ee8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8008ef0:	bc30      	pop	{r4, r5}
 8008ef2:	f000 bd21 	b.w	8009938 <memmove>

08008ef6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8008ef6:	b508      	push	{r3, lr}
 8008ef8:	1a52      	subs	r2, r2, r1
 8008efa:	f7ff ffe7 	bl	8008ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008efe:	bd08      	pop	{r3, pc}

08008f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8008f00:	b508      	push	{r3, lr}
 8008f02:	1a52      	subs	r2, r2, r1
 8008f04:	f7ff ffe2 	bl	8008ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008f08:	bd08      	pop	{r3, pc}

08008f0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8008f0a:	4288      	cmp	r0, r1
 8008f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f0e:	4604      	mov	r4, r0
 8008f10:	460e      	mov	r6, r1
 8008f12:	d020      	beq.n	8008f56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 8008f14:	6802      	ldr	r2, [r0, #0]
 8008f16:	f100 0308 	add.w	r3, r0, #8
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	bf08      	it	eq
 8008f1e:	220f      	moveq	r2, #15
 8008f20:	684d      	ldr	r5, [r1, #4]
 8008f22:	bf18      	it	ne
 8008f24:	6882      	ldrne	r2, [r0, #8]
 8008f26:	42aa      	cmp	r2, r5
 8008f28:	d20b      	bcs.n	8008f42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 8008f2a:	a902      	add	r1, sp, #8
 8008f2c:	f841 5d04 	str.w	r5, [r1, #-4]!
 8008f30:	f7ff ff84 	bl	8008e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008f34:	4607      	mov	r7, r0
 8008f36:	4620      	mov	r0, r4
 8008f38:	f7ff ff9a 	bl	8008e70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8008f3c:	9b01      	ldr	r3, [sp, #4]
 8008f3e:	6027      	str	r7, [r4, #0]
 8008f40:	60a3      	str	r3, [r4, #8]
 8008f42:	b125      	cbz	r5, 8008f4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 8008f44:	462a      	mov	r2, r5
 8008f46:	6831      	ldr	r1, [r6, #0]
 8008f48:	6820      	ldr	r0, [r4, #0]
 8008f4a:	f7ff ffbf 	bl	8008ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008f4e:	2200      	movs	r2, #0
 8008f50:	6823      	ldr	r3, [r4, #0]
 8008f52:	6065      	str	r5, [r4, #4]
 8008f54:	555a      	strb	r2, [r3, r5]
 8008f56:	b003      	add	sp, #12
 8008f58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8008f5a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f5e:	4616      	mov	r6, r2
 8008f60:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8008f64:	6842      	ldr	r2, [r0, #4]
 8008f66:	469a      	mov	sl, r3
 8008f68:	eba8 0306 	sub.w	r3, r8, r6
 8008f6c:	1a57      	subs	r7, r2, r1
 8008f6e:	4413      	add	r3, r2
 8008f70:	6802      	ldr	r2, [r0, #0]
 8008f72:	9301      	str	r3, [sp, #4]
 8008f74:	f100 0308 	add.w	r3, r0, #8
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	460d      	mov	r5, r1
 8008f7c:	bf14      	ite	ne
 8008f7e:	6882      	ldrne	r2, [r0, #8]
 8008f80:	220f      	moveq	r2, #15
 8008f82:	a901      	add	r1, sp, #4
 8008f84:	4604      	mov	r4, r0
 8008f86:	f7ff ff59 	bl	8008e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008f8a:	1bbf      	subs	r7, r7, r6
 8008f8c:	4681      	mov	r9, r0
 8008f8e:	b11d      	cbz	r5, 8008f98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8008f90:	462a      	mov	r2, r5
 8008f92:	6821      	ldr	r1, [r4, #0]
 8008f94:	f7ff ff9a 	bl	8008ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008f98:	f1ba 0f00 	cmp.w	sl, #0
 8008f9c:	d008      	beq.n	8008fb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8008f9e:	f1b8 0f00 	cmp.w	r8, #0
 8008fa2:	d005      	beq.n	8008fb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8008fa4:	4642      	mov	r2, r8
 8008fa6:	4651      	mov	r1, sl
 8008fa8:	eb09 0005 	add.w	r0, r9, r5
 8008fac:	f7ff ff8e 	bl	8008ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008fb0:	b147      	cbz	r7, 8008fc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 8008fb2:	6821      	ldr	r1, [r4, #0]
 8008fb4:	442e      	add	r6, r5
 8008fb6:	eb05 0008 	add.w	r0, r5, r8
 8008fba:	463a      	mov	r2, r7
 8008fbc:	4431      	add	r1, r6
 8008fbe:	4448      	add	r0, r9
 8008fc0:	f7ff ff84 	bl	8008ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	f7ff ff53 	bl	8008e70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8008fca:	9b01      	ldr	r3, [sp, #4]
 8008fcc:	f8c4 9000 	str.w	r9, [r4]
 8008fd0:	60a3      	str	r3, [r4, #8]
 8008fd2:	b002      	add	sp, #8
 8008fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8008fd8:	f100 0208 	add.w	r2, r0, #8
 8008fdc:	6002      	str	r2, [r0, #0]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	6042      	str	r2, [r0, #4]
 8008fe2:	7202      	strb	r2, [r0, #8]
 8008fe4:	4770      	bx	lr

08008fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8008fe6:	b510      	push	{r4, lr}
 8008fe8:	4604      	mov	r4, r0
 8008fea:	f7ff ff41 	bl	8008e70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8008fee:	4620      	mov	r0, r4
 8008ff0:	bd10      	pop	{r4, pc}

08008ff2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8008ff2:	b510      	push	{r4, lr}
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	f7ff ff88 	bl	8008f0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	bd10      	pop	{r4, pc}

08008ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8008ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009000:	460b      	mov	r3, r1
 8009002:	4606      	mov	r6, r0
 8009004:	f853 7b08 	ldr.w	r7, [r3], #8
 8009008:	4605      	mov	r5, r0
 800900a:	42bb      	cmp	r3, r7
 800900c:	460c      	mov	r4, r1
 800900e:	f856 2b08 	ldr.w	r2, [r6], #8
 8009012:	d016      	beq.n	8009042 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 8009014:	4296      	cmp	r6, r2
 8009016:	bf08      	it	eq
 8009018:	2200      	moveq	r2, #0
 800901a:	6007      	str	r7, [r0, #0]
 800901c:	6849      	ldr	r1, [r1, #4]
 800901e:	bf18      	it	ne
 8009020:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 8009024:	6041      	str	r1, [r0, #4]
 8009026:	68a1      	ldr	r1, [r4, #8]
 8009028:	6081      	str	r1, [r0, #8]
 800902a:	b142      	cbz	r2, 800903e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 800902c:	6022      	str	r2, [r4, #0]
 800902e:	f8c4 c008 	str.w	ip, [r4, #8]
 8009032:	2300      	movs	r3, #0
 8009034:	6822      	ldr	r2, [r4, #0]
 8009036:	6063      	str	r3, [r4, #4]
 8009038:	7013      	strb	r3, [r2, #0]
 800903a:	4628      	mov	r0, r5
 800903c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800903e:	6023      	str	r3, [r4, #0]
 8009040:	e7f7      	b.n	8009032 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 8009042:	f7ff ff62 	bl	8008f0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8009046:	e7f4      	b.n	8009032 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

08009048 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8009048:	6840      	ldr	r0, [r0, #4]
 800904a:	4770      	bx	lr

0800904c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 800904c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800904e:	4605      	mov	r5, r0
 8009050:	6843      	ldr	r3, [r0, #4]
 8009052:	9101      	str	r1, [sp, #4]
 8009054:	4299      	cmp	r1, r3
 8009056:	f855 1b08 	ldr.w	r1, [r5], #8
 800905a:	bf38      	it	cc
 800905c:	9301      	strcc	r3, [sp, #4]
 800905e:	428d      	cmp	r5, r1
 8009060:	bf0c      	ite	eq
 8009062:	220f      	moveq	r2, #15
 8009064:	6882      	ldrne	r2, [r0, #8]
 8009066:	4604      	mov	r4, r0
 8009068:	9801      	ldr	r0, [sp, #4]
 800906a:	4290      	cmp	r0, r2
 800906c:	d012      	beq.n	8009094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x48>
 800906e:	d801      	bhi.n	8009074 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x28>
 8009070:	280f      	cmp	r0, #15
 8009072:	d911      	bls.n	8009098 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4c>
 8009074:	a901      	add	r1, sp, #4
 8009076:	4620      	mov	r0, r4
 8009078:	f7ff fee0 	bl	8008e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800907c:	4605      	mov	r5, r0
 800907e:	6862      	ldr	r2, [r4, #4]
 8009080:	6821      	ldr	r1, [r4, #0]
 8009082:	3201      	adds	r2, #1
 8009084:	f7ff ff22 	bl	8008ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009088:	4620      	mov	r0, r4
 800908a:	f7ff fef1 	bl	8008e70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800908e:	9b01      	ldr	r3, [sp, #4]
 8009090:	6025      	str	r5, [r4, #0]
 8009092:	60a3      	str	r3, [r4, #8]
 8009094:	b003      	add	sp, #12
 8009096:	bd30      	pop	{r4, r5, pc}
 8009098:	428d      	cmp	r5, r1
 800909a:	d0fb      	beq.n	8009094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x48>
 800909c:	1c5a      	adds	r2, r3, #1
 800909e:	4628      	mov	r0, r5
 80090a0:	f7ff ff14 	bl	8008ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80090a4:	6820      	ldr	r0, [r4, #0]
 80090a6:	f7ff fe61 	bl	8008d6c <_ZdlPv>
 80090aa:	6025      	str	r5, [r4, #0]
 80090ac:	e7f2      	b.n	8009094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x48>

080090ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 80090ae:	2300      	movs	r3, #0
 80090b0:	6802      	ldr	r2, [r0, #0]
 80090b2:	6043      	str	r3, [r0, #4]
 80090b4:	7013      	strb	r3, [r2, #0]
 80090b6:	4770      	bx	lr

080090b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 80090b8:	6840      	ldr	r0, [r0, #4]
 80090ba:	fab0 f080 	clz	r0, r0
 80090be:	0940      	lsrs	r0, r0, #5
 80090c0:	4770      	bx	lr
	...

080090c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80090c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c8:	4614      	mov	r4, r2
 80090ca:	4681      	mov	r9, r0
 80090cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090ce:	460f      	mov	r7, r1
 80090d0:	462a      	mov	r2, r5
 80090d2:	4698      	mov	r8, r3
 80090d4:	4621      	mov	r1, r4
 80090d6:	4b37      	ldr	r3, [pc, #220]	; (80091b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 80090d8:	f7ff fee0 	bl	8008e9c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80090dc:	464a      	mov	r2, r9
 80090de:	f852 6b08 	ldr.w	r6, [r2], #8
 80090e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80090e6:	4296      	cmp	r6, r2
 80090e8:	bf08      	it	eq
 80090ea:	220f      	moveq	r2, #15
 80090ec:	eba5 0b04 	sub.w	fp, r5, r4
 80090f0:	bf18      	it	ne
 80090f2:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 80090f6:	eb03 0a0b 	add.w	sl, r3, fp
 80090fa:	4552      	cmp	r2, sl
 80090fc:	d34e      	bcc.n	800919c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 80090fe:	443e      	add	r6, r7
 8009100:	4641      	mov	r1, r8
 8009102:	1bdf      	subs	r7, r3, r7
 8009104:	4648      	mov	r0, r9
 8009106:	1b3f      	subs	r7, r7, r4
 8009108:	f7ff fed4 	bl	8008eb4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 800910c:	b170      	cbz	r0, 800912c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800910e:	b137      	cbz	r7, 800911e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 8009110:	42ac      	cmp	r4, r5
 8009112:	d004      	beq.n	800911e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 8009114:	463a      	mov	r2, r7
 8009116:	1931      	adds	r1, r6, r4
 8009118:	1970      	adds	r0, r6, r5
 800911a:	f7ff fee0 	bl	8008ede <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800911e:	b30d      	cbz	r5, 8009164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8009120:	462a      	mov	r2, r5
 8009122:	4641      	mov	r1, r8
 8009124:	4630      	mov	r0, r6
 8009126:	f7ff fed1 	bl	8008ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800912a:	e01b      	b.n	8009164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800912c:	b135      	cbz	r5, 800913c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 800912e:	42ac      	cmp	r4, r5
 8009130:	d33c      	bcc.n	80091ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 8009132:	462a      	mov	r2, r5
 8009134:	4641      	mov	r1, r8
 8009136:	4630      	mov	r0, r6
 8009138:	f7ff fed1 	bl	8008ede <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800913c:	b197      	cbz	r7, 8009164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800913e:	42ac      	cmp	r4, r5
 8009140:	d010      	beq.n	8009164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8009142:	463a      	mov	r2, r7
 8009144:	1931      	adds	r1, r6, r4
 8009146:	1970      	adds	r0, r6, r5
 8009148:	f7ff fec9 	bl	8008ede <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800914c:	42ac      	cmp	r4, r5
 800914e:	d209      	bcs.n	8009164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8009150:	4434      	add	r4, r6
 8009152:	eb08 0305 	add.w	r3, r8, r5
 8009156:	429c      	cmp	r4, r3
 8009158:	d30f      	bcc.n	800917a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 800915a:	462a      	mov	r2, r5
 800915c:	4641      	mov	r1, r8
 800915e:	4630      	mov	r0, r6
 8009160:	f7ff febd 	bl	8008ede <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009164:	2200      	movs	r2, #0
 8009166:	4648      	mov	r0, r9
 8009168:	f8d9 3000 	ldr.w	r3, [r9]
 800916c:	f8c9 a004 	str.w	sl, [r9, #4]
 8009170:	f803 200a 	strb.w	r2, [r3, sl]
 8009174:	b003      	add	sp, #12
 8009176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800917a:	4544      	cmp	r4, r8
 800917c:	d803      	bhi.n	8009186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 800917e:	462a      	mov	r2, r5
 8009180:	eb08 010b 	add.w	r1, r8, fp
 8009184:	e7ce      	b.n	8009124 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8009186:	eba4 0408 	sub.w	r4, r4, r8
 800918a:	4622      	mov	r2, r4
 800918c:	4641      	mov	r1, r8
 800918e:	4630      	mov	r0, r6
 8009190:	f7ff fea5 	bl	8008ede <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009194:	1b2a      	subs	r2, r5, r4
 8009196:	1971      	adds	r1, r6, r5
 8009198:	1930      	adds	r0, r6, r4
 800919a:	e7c4      	b.n	8009126 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 800919c:	9500      	str	r5, [sp, #0]
 800919e:	4643      	mov	r3, r8
 80091a0:	4622      	mov	r2, r4
 80091a2:	4639      	mov	r1, r7
 80091a4:	4648      	mov	r0, r9
 80091a6:	f7ff fed8 	bl	8008f5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80091aa:	e7db      	b.n	8009164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80091ac:	2f00      	cmp	r7, #0
 80091ae:	d0cf      	beq.n	8009150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 80091b0:	e7c7      	b.n	8009142 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 80091b2:	bf00      	nop
 80091b4:	0800b65c 	.word	0x0800b65c

080091b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKcj>:
 80091b8:	b507      	push	{r0, r1, r2, lr}
 80091ba:	9200      	str	r2, [sp, #0]
 80091bc:	460b      	mov	r3, r1
 80091be:	6842      	ldr	r2, [r0, #4]
 80091c0:	2100      	movs	r1, #0
 80091c2:	f7ff ff7f 	bl	80090c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80091c6:	b003      	add	sp, #12
 80091c8:	f85d fb04 	ldr.w	pc, [sp], #4

080091cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 80091cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091ce:	4604      	mov	r4, r0
 80091d0:	4608      	mov	r0, r1
 80091d2:	460d      	mov	r5, r1
 80091d4:	f7f6 ffc6 	bl	8000164 <strlen>
 80091d8:	462b      	mov	r3, r5
 80091da:	9000      	str	r0, [sp, #0]
 80091dc:	6862      	ldr	r2, [r4, #4]
 80091de:	2100      	movs	r1, #0
 80091e0:	4620      	mov	r0, r4
 80091e2:	f7ff ff6f 	bl	80090c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80091e6:	b003      	add	sp, #12
 80091e8:	bd30      	pop	{r4, r5, pc}

080091ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 80091ea:	b508      	push	{r3, lr}
 80091ec:	f7ff ffee 	bl	80091cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 80091f0:	bd08      	pop	{r3, pc}
	...

080091f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 80091f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091f6:	4604      	mov	r4, r0
 80091f8:	460f      	mov	r7, r1
 80091fa:	4615      	mov	r5, r2
 80091fc:	4a08      	ldr	r2, [pc, #32]	; (8009220 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 80091fe:	461e      	mov	r6, r3
 8009200:	f7ff fe3e 	bl	8008e80 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8009204:	6862      	ldr	r2, [r4, #4]
 8009206:	9b08      	ldr	r3, [sp, #32]
 8009208:	1bd2      	subs	r2, r2, r7
 800920a:	42aa      	cmp	r2, r5
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	4601      	mov	r1, r0
 8009210:	4633      	mov	r3, r6
 8009212:	bf28      	it	cs
 8009214:	462a      	movcs	r2, r5
 8009216:	4620      	mov	r0, r4
 8009218:	f7ff ff54 	bl	80090c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800921c:	b003      	add	sp, #12
 800921e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009220:	0800b69f 	.word	0x0800b69f

08009224 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>:
 8009224:	b507      	push	{r0, r1, r2, lr}
 8009226:	6853      	ldr	r3, [r2, #4]
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	6813      	ldr	r3, [r2, #0]
 800922c:	2200      	movs	r2, #0
 800922e:	f7ff ffe1 	bl	80091f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8009232:	b003      	add	sp, #12
 8009234:	f85d fb04 	ldr.w	pc, [sp], #4

08009238 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
 8009238:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800923c:	460e      	mov	r6, r1
 800923e:	461c      	mov	r4, r3
 8009240:	6841      	ldr	r1, [r0, #4]
 8009242:	b923      	cbnz	r3, 800924e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x16>
 8009244:	4291      	cmp	r1, r2
 8009246:	d21f      	bcs.n	8009288 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x50>
 8009248:	f04f 32ff 	mov.w	r2, #4294967295
 800924c:	e01c      	b.n	8009288 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x50>
 800924e:	4291      	cmp	r1, r2
 8009250:	d9fa      	bls.n	8009248 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 8009252:	6805      	ldr	r5, [r0, #0]
 8009254:	7833      	ldrb	r3, [r6, #0]
 8009256:	f10d 0808 	add.w	r8, sp, #8
 800925a:	186f      	adds	r7, r5, r1
 800925c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8009260:	18a8      	adds	r0, r5, r2
 8009262:	1a89      	subs	r1, r1, r2
 8009264:	f1c4 0901 	rsb	r9, r4, #1
 8009268:	42a1      	cmp	r1, r4
 800926a:	d3ed      	bcc.n	8009248 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 800926c:	4642      	mov	r2, r8
 800926e:	4449      	add	r1, r9
 8009270:	f7ff fdd8 	bl	8008e24 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 8009274:	4682      	mov	sl, r0
 8009276:	2800      	cmp	r0, #0
 8009278:	d0e6      	beq.n	8009248 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 800927a:	4622      	mov	r2, r4
 800927c:	4631      	mov	r1, r6
 800927e:	f7ff fdcc 	bl	8008e1a <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8009282:	b928      	cbnz	r0, 8009290 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x58>
 8009284:	ebaa 0205 	sub.w	r2, sl, r5
 8009288:	4610      	mov	r0, r2
 800928a:	b002      	add	sp, #8
 800928c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009290:	f10a 0001 	add.w	r0, sl, #1
 8009294:	1a39      	subs	r1, r7, r0
 8009296:	e7e7      	b.n	8009268 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x30>

08009298 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>:
 8009298:	b508      	push	{r3, lr}
 800929a:	e9d1 1300 	ldrd	r1, r3, [r1]
 800929e:	f7ff ffcb 	bl	8009238 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
 80092a2:	bd08      	pop	{r3, pc}

080092a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5rfindEPKcjj>:
 80092a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a6:	6844      	ldr	r4, [r0, #4]
 80092a8:	460f      	mov	r7, r1
 80092aa:	42a3      	cmp	r3, r4
 80092ac:	461d      	mov	r5, r3
 80092ae:	d80c      	bhi.n	80092ca <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5rfindEPKcjj+0x26>
 80092b0:	1ae4      	subs	r4, r4, r3
 80092b2:	4294      	cmp	r4, r2
 80092b4:	bf28      	it	cs
 80092b6:	4614      	movcs	r4, r2
 80092b8:	6806      	ldr	r6, [r0, #0]
 80092ba:	462a      	mov	r2, r5
 80092bc:	4639      	mov	r1, r7
 80092be:	1930      	adds	r0, r6, r4
 80092c0:	f7ff fdab 	bl	8008e1a <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 80092c4:	b118      	cbz	r0, 80092ce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5rfindEPKcjj+0x2a>
 80092c6:	1e63      	subs	r3, r4, #1
 80092c8:	b91c      	cbnz	r4, 80092d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5rfindEPKcjj+0x2e>
 80092ca:	f04f 34ff 	mov.w	r4, #4294967295
 80092ce:	4620      	mov	r0, r4
 80092d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092d2:	461c      	mov	r4, r3
 80092d4:	e7f1      	b.n	80092ba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5rfindEPKcjj+0x16>

080092d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5rfindERKS4_j>:
 80092d6:	b508      	push	{r3, lr}
 80092d8:	e9d1 1300 	ldrd	r1, r3, [r1]
 80092dc:	f7ff ffe2 	bl	80092a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5rfindEPKcjj>
 80092e0:	bd08      	pop	{r3, pc}
	...

080092e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 80092e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092e6:	4604      	mov	r4, r0
 80092e8:	4616      	mov	r6, r2
 80092ea:	460d      	mov	r5, r1
 80092ec:	b919      	cbnz	r1, 80092f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 80092ee:	b112      	cbz	r2, 80092f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 80092f0:	480d      	ldr	r0, [pc, #52]	; (8009328 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 80092f2:	f7ff fd71 	bl	8008dd8 <_ZSt19__throw_logic_errorPKc>
 80092f6:	1b73      	subs	r3, r6, r5
 80092f8:	2b0f      	cmp	r3, #15
 80092fa:	9301      	str	r3, [sp, #4]
 80092fc:	d907      	bls.n	800930e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 80092fe:	2200      	movs	r2, #0
 8009300:	a901      	add	r1, sp, #4
 8009302:	4620      	mov	r0, r4
 8009304:	f7ff fd9a 	bl	8008e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009308:	9b01      	ldr	r3, [sp, #4]
 800930a:	6020      	str	r0, [r4, #0]
 800930c:	60a3      	str	r3, [r4, #8]
 800930e:	4632      	mov	r2, r6
 8009310:	4629      	mov	r1, r5
 8009312:	6820      	ldr	r0, [r4, #0]
 8009314:	f7ff fdef 	bl	8008ef6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8009318:	2100      	movs	r1, #0
 800931a:	9b01      	ldr	r3, [sp, #4]
 800931c:	6822      	ldr	r2, [r4, #0]
 800931e:	6063      	str	r3, [r4, #4]
 8009320:	54d1      	strb	r1, [r2, r3]
 8009322:	b002      	add	sp, #8
 8009324:	bd70      	pop	{r4, r5, r6, pc}
 8009326:	bf00      	nop
 8009328:	0800b675 	.word	0x0800b675

0800932c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800932c:	b510      	push	{r4, lr}
 800932e:	4604      	mov	r4, r0
 8009330:	f100 0208 	add.w	r2, r0, #8
 8009334:	6002      	str	r2, [r0, #0]
 8009336:	e9d1 1200 	ldrd	r1, r2, [r1]
 800933a:	f04f 0300 	mov.w	r3, #0
 800933e:	440a      	add	r2, r1
 8009340:	f7ff ffd0 	bl	80092e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8009344:	4620      	mov	r0, r4
 8009346:	bd10      	pop	{r4, pc}

08009348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8009348:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800934a:	4604      	mov	r4, r0
 800934c:	4616      	mov	r6, r2
 800934e:	460d      	mov	r5, r1
 8009350:	b919      	cbnz	r1, 800935a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8009352:	b112      	cbz	r2, 800935a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8009354:	480d      	ldr	r0, [pc, #52]	; (800938c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8009356:	f7ff fd3f 	bl	8008dd8 <_ZSt19__throw_logic_errorPKc>
 800935a:	1b73      	subs	r3, r6, r5
 800935c:	2b0f      	cmp	r3, #15
 800935e:	9301      	str	r3, [sp, #4]
 8009360:	d907      	bls.n	8009372 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8009362:	2200      	movs	r2, #0
 8009364:	a901      	add	r1, sp, #4
 8009366:	4620      	mov	r0, r4
 8009368:	f7ff fd68 	bl	8008e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800936c:	9b01      	ldr	r3, [sp, #4]
 800936e:	6020      	str	r0, [r4, #0]
 8009370:	60a3      	str	r3, [r4, #8]
 8009372:	4632      	mov	r2, r6
 8009374:	4629      	mov	r1, r5
 8009376:	6820      	ldr	r0, [r4, #0]
 8009378:	f7ff fdc2 	bl	8008f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800937c:	2100      	movs	r1, #0
 800937e:	9b01      	ldr	r3, [sp, #4]
 8009380:	6822      	ldr	r2, [r4, #0]
 8009382:	6063      	str	r3, [r4, #4]
 8009384:	54d1      	strb	r1, [r2, r3]
 8009386:	b002      	add	sp, #8
 8009388:	bd70      	pop	{r4, r5, r6, pc}
 800938a:	bf00      	nop
 800938c:	0800b675 	.word	0x0800b675

08009390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8009390:	b538      	push	{r3, r4, r5, lr}
 8009392:	f100 0308 	add.w	r3, r0, #8
 8009396:	4604      	mov	r4, r0
 8009398:	6003      	str	r3, [r0, #0]
 800939a:	460d      	mov	r5, r1
 800939c:	b159      	cbz	r1, 80093b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800939e:	4608      	mov	r0, r1
 80093a0:	f7f6 fee0 	bl	8000164 <strlen>
 80093a4:	182a      	adds	r2, r5, r0
 80093a6:	4620      	mov	r0, r4
 80093a8:	f04f 0300 	mov.w	r3, #0
 80093ac:	4629      	mov	r1, r5
 80093ae:	f7ff ffcb 	bl	8009348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80093b2:	4620      	mov	r0, r4
 80093b4:	bd38      	pop	{r3, r4, r5, pc}
 80093b6:	f04f 32ff 	mov.w	r2, #4294967295
 80093ba:	e7f4      	b.n	80093a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080093bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 80093bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093be:	460d      	mov	r5, r1
 80093c0:	4616      	mov	r6, r2
 80093c2:	461f      	mov	r7, r3
 80093c4:	f100 0308 	add.w	r3, r0, #8
 80093c8:	4604      	mov	r4, r0
 80093ca:	6003      	str	r3, [r0, #0]
 80093cc:	4631      	mov	r1, r6
 80093ce:	4a09      	ldr	r2, [pc, #36]	; (80093f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x38>)
 80093d0:	4628      	mov	r0, r5
 80093d2:	f7ff fd55 	bl	8008e80 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80093d6:	6829      	ldr	r1, [r5, #0]
 80093d8:	686a      	ldr	r2, [r5, #4]
 80093da:	4401      	add	r1, r0
 80093dc:	1b92      	subs	r2, r2, r6
 80093de:	4620      	mov	r0, r4
 80093e0:	f04f 0300 	mov.w	r3, #0
 80093e4:	42ba      	cmp	r2, r7
 80093e6:	bf94      	ite	ls
 80093e8:	188a      	addls	r2, r1, r2
 80093ea:	19ca      	addhi	r2, r1, r7
 80093ec:	f7ff ffac 	bl	8009348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80093f0:	4620      	mov	r0, r4
 80093f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093f4:	0800b6cd 	.word	0x0800b6cd

080093f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 80093f8:	b570      	push	{r4, r5, r6, lr}
 80093fa:	460d      	mov	r5, r1
 80093fc:	4604      	mov	r4, r0
 80093fe:	4611      	mov	r1, r2
 8009400:	4628      	mov	r0, r5
 8009402:	4a06      	ldr	r2, [pc, #24]	; (800941c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 8009404:	461e      	mov	r6, r3
 8009406:	f7ff fd3b 	bl	8008e80 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 800940a:	4633      	mov	r3, r6
 800940c:	4602      	mov	r2, r0
 800940e:	4629      	mov	r1, r5
 8009410:	4620      	mov	r0, r4
 8009412:	f7ff ffd3 	bl	80093bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 8009416:	4620      	mov	r0, r4
 8009418:	bd70      	pop	{r4, r5, r6, pc}
 800941a:	bf00      	nop
 800941c:	0800b610 	.word	0x0800b610

08009420 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8009420:	7803      	ldrb	r3, [r0, #0]
 8009422:	2b47      	cmp	r3, #71	; 0x47
 8009424:	d117      	bne.n	8009456 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009426:	7843      	ldrb	r3, [r0, #1]
 8009428:	2b4e      	cmp	r3, #78	; 0x4e
 800942a:	d114      	bne.n	8009456 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800942c:	7883      	ldrb	r3, [r0, #2]
 800942e:	2b55      	cmp	r3, #85	; 0x55
 8009430:	d111      	bne.n	8009456 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009432:	78c3      	ldrb	r3, [r0, #3]
 8009434:	2b43      	cmp	r3, #67	; 0x43
 8009436:	d10e      	bne.n	8009456 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009438:	7903      	ldrb	r3, [r0, #4]
 800943a:	2b43      	cmp	r3, #67	; 0x43
 800943c:	d10b      	bne.n	8009456 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800943e:	7943      	ldrb	r3, [r0, #5]
 8009440:	2b2b      	cmp	r3, #43	; 0x2b
 8009442:	d108      	bne.n	8009456 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009444:	7983      	ldrb	r3, [r0, #6]
 8009446:	2b2b      	cmp	r3, #43	; 0x2b
 8009448:	d105      	bne.n	8009456 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800944a:	79c0      	ldrb	r0, [r0, #7]
 800944c:	2801      	cmp	r0, #1
 800944e:	bf8c      	ite	hi
 8009450:	2000      	movhi	r0, #0
 8009452:	2001      	movls	r0, #1
 8009454:	4770      	bx	lr
 8009456:	2000      	movs	r0, #0
 8009458:	4770      	bx	lr

0800945a <__cxa_call_terminate>:
 800945a:	b510      	push	{r4, lr}
 800945c:	4604      	mov	r4, r0
 800945e:	b148      	cbz	r0, 8009474 <__cxa_call_terminate+0x1a>
 8009460:	f000 f83b 	bl	80094da <__cxa_begin_catch>
 8009464:	4620      	mov	r0, r4
 8009466:	f7ff ffdb 	bl	8009420 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800946a:	b118      	cbz	r0, 8009474 <__cxa_call_terminate+0x1a>
 800946c:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8009470:	f7ff fc7e 	bl	8008d70 <_ZN10__cxxabiv111__terminateEPFvvE>
 8009474:	f7ff fc88 	bl	8008d88 <_ZSt9terminatev>

08009478 <__cxa_call_unexpected>:
 8009478:	b538      	push	{r3, r4, r5, lr}
 800947a:	4602      	mov	r2, r0
 800947c:	f7ff ffd0 	bl	8009420 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8009480:	b140      	cbz	r0, 8009494 <__cxa_call_unexpected+0x1c>
 8009482:	2500      	movs	r5, #0
 8009484:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8009488:	4610      	mov	r0, r2
 800948a:	f000 f826 	bl	80094da <__cxa_begin_catch>
 800948e:	b125      	cbz	r5, 800949a <__cxa_call_unexpected+0x22>
 8009490:	f7ff fc8c 	bl	8008dac <_ZSt10unexpectedv>
 8009494:	4604      	mov	r4, r0
 8009496:	2501      	movs	r5, #1
 8009498:	e7f6      	b.n	8009488 <__cxa_call_unexpected+0x10>
 800949a:	4620      	mov	r0, r4
 800949c:	f7ff fc79 	bl	8008d92 <_ZN10__cxxabiv112__unexpectedEPFvvE>

080094a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80094a0:	7803      	ldrb	r3, [r0, #0]
 80094a2:	2b47      	cmp	r3, #71	; 0x47
 80094a4:	d117      	bne.n	80094d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80094a6:	7843      	ldrb	r3, [r0, #1]
 80094a8:	2b4e      	cmp	r3, #78	; 0x4e
 80094aa:	d114      	bne.n	80094d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80094ac:	7883      	ldrb	r3, [r0, #2]
 80094ae:	2b55      	cmp	r3, #85	; 0x55
 80094b0:	d111      	bne.n	80094d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80094b2:	78c3      	ldrb	r3, [r0, #3]
 80094b4:	2b43      	cmp	r3, #67	; 0x43
 80094b6:	d10e      	bne.n	80094d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80094b8:	7903      	ldrb	r3, [r0, #4]
 80094ba:	2b43      	cmp	r3, #67	; 0x43
 80094bc:	d10b      	bne.n	80094d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80094be:	7943      	ldrb	r3, [r0, #5]
 80094c0:	2b2b      	cmp	r3, #43	; 0x2b
 80094c2:	d108      	bne.n	80094d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80094c4:	7983      	ldrb	r3, [r0, #6]
 80094c6:	2b2b      	cmp	r3, #43	; 0x2b
 80094c8:	d105      	bne.n	80094d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80094ca:	79c0      	ldrb	r0, [r0, #7]
 80094cc:	2801      	cmp	r0, #1
 80094ce:	bf8c      	ite	hi
 80094d0:	2000      	movhi	r0, #0
 80094d2:	2001      	movls	r0, #1
 80094d4:	4770      	bx	lr
 80094d6:	2000      	movs	r0, #0
 80094d8:	4770      	bx	lr

080094da <__cxa_begin_catch>:
 80094da:	b538      	push	{r3, r4, r5, lr}
 80094dc:	4605      	mov	r5, r0
 80094de:	f7ff f987 	bl	80087f0 <__cxa_get_globals>
 80094e2:	4601      	mov	r1, r0
 80094e4:	6802      	ldr	r2, [r0, #0]
 80094e6:	4628      	mov	r0, r5
 80094e8:	f1a5 0420 	sub.w	r4, r5, #32
 80094ec:	f7ff ffd8 	bl	80094a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80094f0:	b930      	cbnz	r0, 8009500 <__cxa_begin_catch+0x26>
 80094f2:	b10a      	cbz	r2, 80094f8 <__cxa_begin_catch+0x1e>
 80094f4:	f7ff fc48 	bl	8008d88 <_ZSt9terminatev>
 80094f8:	600c      	str	r4, [r1, #0]
 80094fa:	4614      	mov	r4, r2
 80094fc:	4620      	mov	r0, r4
 80094fe:	bd38      	pop	{r3, r4, r5, pc}
 8009500:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 8009504:	4628      	mov	r0, r5
 8009506:	2b00      	cmp	r3, #0
 8009508:	bfb4      	ite	lt
 800950a:	f1c3 0301 	rsblt	r3, r3, #1
 800950e:	3301      	addge	r3, #1
 8009510:	f845 3c0c 	str.w	r3, [r5, #-12]
 8009514:	684b      	ldr	r3, [r1, #4]
 8009516:	42a2      	cmp	r2, r4
 8009518:	f103 33ff 	add.w	r3, r3, #4294967295
 800951c:	604b      	str	r3, [r1, #4]
 800951e:	bf1c      	itt	ne
 8009520:	f845 2c10 	strne.w	r2, [r5, #-16]
 8009524:	600c      	strne	r4, [r1, #0]
 8009526:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8009528:	f7f7 fc7e 	bl	8000e28 <_Unwind_Complete>
 800952c:	e7e6      	b.n	80094fc <__cxa_begin_catch+0x22>

0800952e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800952e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009530:	2400      	movs	r4, #0
 8009532:	2310      	movs	r3, #16
 8009534:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009538:	6803      	ldr	r3, [r0, #0]
 800953a:	4615      	mov	r5, r2
 800953c:	699e      	ldr	r6, [r3, #24]
 800953e:	9400      	str	r4, [sp, #0]
 8009540:	466b      	mov	r3, sp
 8009542:	f88d 4004 	strb.w	r4, [sp, #4]
 8009546:	6812      	ldr	r2, [r2, #0]
 8009548:	47b0      	blx	r6
 800954a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800954e:	f003 0306 	and.w	r3, r3, #6
 8009552:	2b06      	cmp	r3, #6
 8009554:	bf09      	itett	eq
 8009556:	2001      	moveq	r0, #1
 8009558:	4620      	movne	r0, r4
 800955a:	9b00      	ldreq	r3, [sp, #0]
 800955c:	602b      	streq	r3, [r5, #0]
 800955e:	b004      	add	sp, #16
 8009560:	bd70      	pop	{r4, r5, r6, pc}

08009562 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8009562:	9800      	ldr	r0, [sp, #0]
 8009564:	4290      	cmp	r0, r2
 8009566:	bf0c      	ite	eq
 8009568:	2006      	moveq	r0, #6
 800956a:	2001      	movne	r0, #1
 800956c:	4770      	bx	lr
	...

08009570 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8009570:	b510      	push	{r4, lr}
 8009572:	4604      	mov	r4, r0
 8009574:	4b02      	ldr	r3, [pc, #8]	; (8009580 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8009576:	6003      	str	r3, [r0, #0]
 8009578:	f000 f95b 	bl	8009832 <_ZNSt9type_infoD1Ev>
 800957c:	4620      	mov	r0, r4
 800957e:	bd10      	pop	{r4, pc}
 8009580:	0800b774 	.word	0x0800b774

08009584 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8009584:	b510      	push	{r4, lr}
 8009586:	4604      	mov	r4, r0
 8009588:	f7ff fff2 	bl	8009570 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800958c:	4620      	mov	r0, r4
 800958e:	2108      	movs	r1, #8
 8009590:	f7ff f934 	bl	80087fc <_ZdlPvj>
 8009594:	4620      	mov	r0, r4
 8009596:	bd10      	pop	{r4, pc}

08009598 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8009598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800959c:	9e06      	ldr	r6, [sp, #24]
 800959e:	4698      	mov	r8, r3
 80095a0:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80095a4:	429e      	cmp	r6, r3
 80095a6:	4607      	mov	r7, r0
 80095a8:	4615      	mov	r5, r2
 80095aa:	d107      	bne.n	80095bc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 80095ac:	9907      	ldr	r1, [sp, #28]
 80095ae:	f000 f943 	bl	8009838 <_ZNKSt9type_infoeqERKS_>
 80095b2:	b118      	cbz	r0, 80095bc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 80095b4:	7165      	strb	r5, [r4, #5]
 80095b6:	2000      	movs	r0, #0
 80095b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095bc:	4641      	mov	r1, r8
 80095be:	4638      	mov	r0, r7
 80095c0:	f000 f93a 	bl	8009838 <_ZNKSt9type_infoeqERKS_>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d0f6      	beq.n	80095b6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>
 80095c8:	2301      	movs	r3, #1
 80095ca:	6026      	str	r6, [r4, #0]
 80095cc:	7125      	strb	r5, [r4, #4]
 80095ce:	71a3      	strb	r3, [r4, #6]
 80095d0:	e7f1      	b.n	80095b6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>

080095d2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80095d2:	b538      	push	{r3, r4, r5, lr}
 80095d4:	4615      	mov	r5, r2
 80095d6:	461c      	mov	r4, r3
 80095d8:	f000 f92e 	bl	8009838 <_ZNKSt9type_infoeqERKS_>
 80095dc:	b120      	cbz	r0, 80095e8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80095de:	2308      	movs	r3, #8
 80095e0:	60e3      	str	r3, [r4, #12]
 80095e2:	2306      	movs	r3, #6
 80095e4:	6025      	str	r5, [r4, #0]
 80095e6:	7123      	strb	r3, [r4, #4]
 80095e8:	bd38      	pop	{r3, r4, r5, pc}

080095ea <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80095ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ee:	4605      	mov	r5, r0
 80095f0:	460c      	mov	r4, r1
 80095f2:	4616      	mov	r6, r2
 80095f4:	461f      	mov	r7, r3
 80095f6:	f000 f91f 	bl	8009838 <_ZNKSt9type_infoeqERKS_>
 80095fa:	b948      	cbnz	r0, 8009610 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80095fc:	2f03      	cmp	r7, #3
 80095fe:	d807      	bhi.n	8009610 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8009600:	6823      	ldr	r3, [r4, #0]
 8009602:	4632      	mov	r2, r6
 8009604:	4629      	mov	r1, r5
 8009606:	4620      	mov	r0, r4
 8009608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800960c:	695b      	ldr	r3, [r3, #20]
 800960e:	4718      	bx	r3
 8009610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009614 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8009614:	b510      	push	{r4, lr}
 8009616:	4604      	mov	r4, r0
 8009618:	4b02      	ldr	r3, [pc, #8]	; (8009624 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800961a:	6003      	str	r3, [r0, #0]
 800961c:	f7ff ffa8 	bl	8009570 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8009620:	4620      	mov	r0, r4
 8009622:	bd10      	pop	{r4, pc}
 8009624:	0800b7d4 	.word	0x0800b7d4

08009628 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8009628:	b510      	push	{r4, lr}
 800962a:	4604      	mov	r4, r0
 800962c:	f7ff fff2 	bl	8009614 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8009630:	4620      	mov	r0, r4
 8009632:	210c      	movs	r1, #12
 8009634:	f7ff f8e2 	bl	80087fc <_ZdlPvj>
 8009638:	4620      	mov	r0, r4
 800963a:	bd10      	pop	{r4, pc}

0800963c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800963c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009640:	9e06      	ldr	r6, [sp, #24]
 8009642:	4607      	mov	r7, r0
 8009644:	4296      	cmp	r6, r2
 8009646:	4688      	mov	r8, r1
 8009648:	4615      	mov	r5, r2
 800964a:	461c      	mov	r4, r3
 800964c:	d00a      	beq.n	8009664 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x28>
 800964e:	68b8      	ldr	r0, [r7, #8]
 8009650:	462a      	mov	r2, r5
 8009652:	6803      	ldr	r3, [r0, #0]
 8009654:	9606      	str	r6, [sp, #24]
 8009656:	6a1e      	ldr	r6, [r3, #32]
 8009658:	4641      	mov	r1, r8
 800965a:	4623      	mov	r3, r4
 800965c:	46b4      	mov	ip, r6
 800965e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009662:	4760      	bx	ip
 8009664:	4619      	mov	r1, r3
 8009666:	f000 f8e7 	bl	8009838 <_ZNKSt9type_infoeqERKS_>
 800966a:	2800      	cmp	r0, #0
 800966c:	d0ef      	beq.n	800964e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x12>
 800966e:	2006      	movs	r0, #6
 8009670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009674 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8009674:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009678:	460e      	mov	r6, r1
 800967a:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 800967e:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 8009682:	4619      	mov	r1, r3
 8009684:	4683      	mov	fp, r0
 8009686:	4617      	mov	r7, r2
 8009688:	4699      	mov	r9, r3
 800968a:	f000 f8d5 	bl	8009838 <_ZNKSt9type_infoeqERKS_>
 800968e:	b190      	cbz	r0, 80096b6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8009690:	2e00      	cmp	r6, #0
 8009692:	602c      	str	r4, [r5, #0]
 8009694:	712f      	strb	r7, [r5, #4]
 8009696:	db09      	blt.n	80096ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8009698:	4434      	add	r4, r6
 800969a:	45a0      	cmp	r8, r4
 800969c:	bf0c      	ite	eq
 800969e:	2406      	moveq	r4, #6
 80096a0:	2401      	movne	r4, #1
 80096a2:	71ac      	strb	r4, [r5, #6]
 80096a4:	2000      	movs	r0, #0
 80096a6:	b001      	add	sp, #4
 80096a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ac:	3602      	adds	r6, #2
 80096ae:	d1f9      	bne.n	80096a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80096b0:	2301      	movs	r3, #1
 80096b2:	71ab      	strb	r3, [r5, #6]
 80096b4:	e7f6      	b.n	80096a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80096b6:	4544      	cmp	r4, r8
 80096b8:	d106      	bne.n	80096c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80096ba:	4651      	mov	r1, sl
 80096bc:	4658      	mov	r0, fp
 80096be:	f000 f8bb 	bl	8009838 <_ZNKSt9type_infoeqERKS_>
 80096c2:	b108      	cbz	r0, 80096c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80096c4:	716f      	strb	r7, [r5, #5]
 80096c6:	e7ed      	b.n	80096a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80096c8:	f8db 0008 	ldr.w	r0, [fp, #8]
 80096cc:	463a      	mov	r2, r7
 80096ce:	6803      	ldr	r3, [r0, #0]
 80096d0:	e9cd 850c 	strd	r8, r5, [sp, #48]	; 0x30
 80096d4:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 80096d8:	69dc      	ldr	r4, [r3, #28]
 80096da:	4631      	mov	r1, r6
 80096dc:	464b      	mov	r3, r9
 80096de:	46a4      	mov	ip, r4
 80096e0:	b001      	add	sp, #4
 80096e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e6:	4760      	bx	ip

080096e8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80096e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ec:	4604      	mov	r4, r0
 80096ee:	460d      	mov	r5, r1
 80096f0:	4616      	mov	r6, r2
 80096f2:	461f      	mov	r7, r3
 80096f4:	f7ff ff6d 	bl	80095d2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80096f8:	b948      	cbnz	r0, 800970e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80096fa:	68a0      	ldr	r0, [r4, #8]
 80096fc:	4632      	mov	r2, r6
 80096fe:	6803      	ldr	r3, [r0, #0]
 8009700:	4629      	mov	r1, r5
 8009702:	699c      	ldr	r4, [r3, #24]
 8009704:	463b      	mov	r3, r7
 8009706:	46a4      	mov	ip, r4
 8009708:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800970c:	4760      	bx	ip
 800970e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009714 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8009714:	b580      	push	{r7, lr}
 8009716:	b09c      	sub	sp, #112	; 0x70
 8009718:	af00      	add	r7, sp, #0
 800971a:	1a0e      	subs	r6, r1, r0
 800971c:	4680      	mov	r8, r0
 800971e:	2269      	movs	r2, #105	; 0x69
 8009720:	490e      	ldr	r1, [pc, #56]	; (800975c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8009722:	1d38      	adds	r0, r7, #4
 8009724:	f000 f8fd 	bl	8009922 <memcpy>
 8009728:	f106 0377 	add.w	r3, r6, #119	; 0x77
 800972c:	f023 0307 	bic.w	r3, r3, #7
 8009730:	ebad 0d03 	sub.w	sp, sp, r3
 8009734:	466c      	mov	r4, sp
 8009736:	2268      	movs	r2, #104	; 0x68
 8009738:	1d39      	adds	r1, r7, #4
 800973a:	4620      	mov	r0, r4
 800973c:	f000 f8f1 	bl	8009922 <memcpy>
 8009740:	4632      	mov	r2, r6
 8009742:	4641      	mov	r1, r8
 8009744:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009748:	f000 f8eb 	bl	8009922 <memcpy>
 800974c:	2300      	movs	r3, #0
 800974e:	1c75      	adds	r5, r6, #1
 8009750:	4425      	add	r5, r4
 8009752:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 8009756:	4620      	mov	r0, r4
 8009758:	f7ff fb3e 	bl	8008dd8 <_ZSt19__throw_logic_errorPKc>
 800975c:	0800b803 	.word	0x0800b803

08009760 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8009760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009762:	af00      	add	r7, sp, #0
 8009764:	b086      	sub	sp, #24
 8009766:	466d      	mov	r5, sp
 8009768:	f105 040c 	add.w	r4, r5, #12
 800976c:	4623      	mov	r3, r4
 800976e:	f04f 0c0a 	mov.w	ip, #10
 8009772:	f8df e038 	ldr.w	lr, [pc, #56]	; 80097ac <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8009776:	fbb2 f6fc 	udiv	r6, r2, ip
 800977a:	fb0c 2216 	mls	r2, ip, r6, r2
 800977e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8009782:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8009786:	4632      	mov	r2, r6
 8009788:	2e00      	cmp	r6, #0
 800978a:	d1f4      	bne.n	8009776 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 800978c:	1ae4      	subs	r4, r4, r3
 800978e:	428c      	cmp	r4, r1
 8009790:	d808      	bhi.n	80097a4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8009792:	f1c4 010c 	rsb	r1, r4, #12
 8009796:	4622      	mov	r2, r4
 8009798:	4429      	add	r1, r5
 800979a:	f000 f8c2 	bl	8009922 <memcpy>
 800979e:	4620      	mov	r0, r4
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097a4:	f04f 34ff 	mov.w	r4, #4294967295
 80097a8:	e7f9      	b.n	800979e <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 80097aa:	bf00      	nop
 80097ac:	0800b7f8 	.word	0x0800b7f8

080097b0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80097b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097b4:	4606      	mov	r6, r0
 80097b6:	4615      	mov	r5, r2
 80097b8:	4604      	mov	r4, r0
 80097ba:	3901      	subs	r1, #1
 80097bc:	1847      	adds	r7, r0, r1
 80097be:	782a      	ldrb	r2, [r5, #0]
 80097c0:	b39a      	cbz	r2, 800982a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 80097c2:	42bc      	cmp	r4, r7
 80097c4:	d22d      	bcs.n	8009822 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 80097c6:	2a25      	cmp	r2, #37	; 0x25
 80097c8:	d107      	bne.n	80097da <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80097ca:	786a      	ldrb	r2, [r5, #1]
 80097cc:	2a73      	cmp	r2, #115	; 0x73
 80097ce:	d00a      	beq.n	80097e6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 80097d0:	2a7a      	cmp	r2, #122	; 0x7a
 80097d2:	d013      	beq.n	80097fc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 80097d4:	2a25      	cmp	r2, #37	; 0x25
 80097d6:	d100      	bne.n	80097da <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80097d8:	3501      	adds	r5, #1
 80097da:	782a      	ldrb	r2, [r5, #0]
 80097dc:	3401      	adds	r4, #1
 80097de:	f804 2c01 	strb.w	r2, [r4, #-1]
 80097e2:	3501      	adds	r5, #1
 80097e4:	e7eb      	b.n	80097be <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80097e6:	1d19      	adds	r1, r3, #4
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80097f0:	b1a2      	cbz	r2, 800981c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
 80097f2:	42bc      	cmp	r4, r7
 80097f4:	d015      	beq.n	8009822 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 80097f6:	f804 2b01 	strb.w	r2, [r4], #1
 80097fa:	e7f7      	b.n	80097ec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 80097fc:	78aa      	ldrb	r2, [r5, #2]
 80097fe:	2a75      	cmp	r2, #117	; 0x75
 8009800:	d1eb      	bne.n	80097da <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	1b39      	subs	r1, r7, r4
 8009806:	4620      	mov	r0, r4
 8009808:	f103 0804 	add.w	r8, r3, #4
 800980c:	f7ff ffa8 	bl	8009760 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8009810:	2800      	cmp	r0, #0
 8009812:	dd06      	ble.n	8009822 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8009814:	4404      	add	r4, r0
 8009816:	3503      	adds	r5, #3
 8009818:	4643      	mov	r3, r8
 800981a:	e7d0      	b.n	80097be <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800981c:	3502      	adds	r5, #2
 800981e:	460b      	mov	r3, r1
 8009820:	e7cd      	b.n	80097be <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8009822:	4621      	mov	r1, r4
 8009824:	4630      	mov	r0, r6
 8009826:	f7ff ff75 	bl	8009714 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800982a:	7022      	strb	r2, [r4, #0]
 800982c:	1ba0      	subs	r0, r4, r6
 800982e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009832 <_ZNSt9type_infoD1Ev>:
 8009832:	4770      	bx	lr

08009834 <_ZNKSt9type_info14__is_pointer_pEv>:
 8009834:	2000      	movs	r0, #0
 8009836:	4770      	bx	lr

08009838 <_ZNKSt9type_infoeqERKS_>:
 8009838:	4281      	cmp	r1, r0
 800983a:	b508      	push	{r3, lr}
 800983c:	d00e      	beq.n	800985c <_ZNKSt9type_infoeqERKS_+0x24>
 800983e:	6840      	ldr	r0, [r0, #4]
 8009840:	7803      	ldrb	r3, [r0, #0]
 8009842:	2b2a      	cmp	r3, #42	; 0x2a
 8009844:	d00c      	beq.n	8009860 <_ZNKSt9type_infoeqERKS_+0x28>
 8009846:	6849      	ldr	r1, [r1, #4]
 8009848:	780b      	ldrb	r3, [r1, #0]
 800984a:	2b2a      	cmp	r3, #42	; 0x2a
 800984c:	bf08      	it	eq
 800984e:	3101      	addeq	r1, #1
 8009850:	f7f6 fc7e 	bl	8000150 <strcmp>
 8009854:	fab0 f080 	clz	r0, r0
 8009858:	0940      	lsrs	r0, r0, #5
 800985a:	bd08      	pop	{r3, pc}
 800985c:	2001      	movs	r0, #1
 800985e:	e7fc      	b.n	800985a <_ZNKSt9type_infoeqERKS_+0x22>
 8009860:	2000      	movs	r0, #0
 8009862:	e7fa      	b.n	800985a <_ZNKSt9type_infoeqERKS_+0x22>

08009864 <abort>:
 8009864:	b508      	push	{r3, lr}
 8009866:	2006      	movs	r0, #6
 8009868:	f000 fca4 	bl	800a1b4 <raise>
 800986c:	2001      	movs	r0, #1
 800986e:	f7fe fe74 	bl	800855a <_exit>
	...

08009874 <__errno>:
 8009874:	4b01      	ldr	r3, [pc, #4]	; (800987c <__errno+0x8>)
 8009876:	6818      	ldr	r0, [r3, #0]
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	20000018 	.word	0x20000018

08009880 <__libc_init_array>:
 8009880:	b570      	push	{r4, r5, r6, lr}
 8009882:	2500      	movs	r5, #0
 8009884:	4e0c      	ldr	r6, [pc, #48]	; (80098b8 <__libc_init_array+0x38>)
 8009886:	4c0d      	ldr	r4, [pc, #52]	; (80098bc <__libc_init_array+0x3c>)
 8009888:	1ba4      	subs	r4, r4, r6
 800988a:	10a4      	asrs	r4, r4, #2
 800988c:	42a5      	cmp	r5, r4
 800988e:	d109      	bne.n	80098a4 <__libc_init_array+0x24>
 8009890:	f001 fe06 	bl	800b4a0 <_init>
 8009894:	2500      	movs	r5, #0
 8009896:	4e0a      	ldr	r6, [pc, #40]	; (80098c0 <__libc_init_array+0x40>)
 8009898:	4c0a      	ldr	r4, [pc, #40]	; (80098c4 <__libc_init_array+0x44>)
 800989a:	1ba4      	subs	r4, r4, r6
 800989c:	10a4      	asrs	r4, r4, #2
 800989e:	42a5      	cmp	r5, r4
 80098a0:	d105      	bne.n	80098ae <__libc_init_array+0x2e>
 80098a2:	bd70      	pop	{r4, r5, r6, pc}
 80098a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80098a8:	4798      	blx	r3
 80098aa:	3501      	adds	r5, #1
 80098ac:	e7ee      	b.n	800988c <__libc_init_array+0xc>
 80098ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80098b2:	4798      	blx	r3
 80098b4:	3501      	adds	r5, #1
 80098b6:	e7f2      	b.n	800989e <__libc_init_array+0x1e>
 80098b8:	0800c144 	.word	0x0800c144
 80098bc:	0800c144 	.word	0x0800c144
 80098c0:	0800c144 	.word	0x0800c144
 80098c4:	0800c150 	.word	0x0800c150

080098c8 <malloc>:
 80098c8:	4b02      	ldr	r3, [pc, #8]	; (80098d4 <malloc+0xc>)
 80098ca:	4601      	mov	r1, r0
 80098cc:	6818      	ldr	r0, [r3, #0]
 80098ce:	f000 b8a1 	b.w	8009a14 <_malloc_r>
 80098d2:	bf00      	nop
 80098d4:	20000018 	.word	0x20000018

080098d8 <free>:
 80098d8:	4b02      	ldr	r3, [pc, #8]	; (80098e4 <free+0xc>)
 80098da:	4601      	mov	r1, r0
 80098dc:	6818      	ldr	r0, [r3, #0]
 80098de:	f000 b84d 	b.w	800997c <_free_r>
 80098e2:	bf00      	nop
 80098e4:	20000018 	.word	0x20000018

080098e8 <memchr>:
 80098e8:	b510      	push	{r4, lr}
 80098ea:	b2c9      	uxtb	r1, r1
 80098ec:	4402      	add	r2, r0
 80098ee:	4290      	cmp	r0, r2
 80098f0:	4603      	mov	r3, r0
 80098f2:	d101      	bne.n	80098f8 <memchr+0x10>
 80098f4:	2300      	movs	r3, #0
 80098f6:	e003      	b.n	8009900 <memchr+0x18>
 80098f8:	781c      	ldrb	r4, [r3, #0]
 80098fa:	3001      	adds	r0, #1
 80098fc:	428c      	cmp	r4, r1
 80098fe:	d1f6      	bne.n	80098ee <memchr+0x6>
 8009900:	4618      	mov	r0, r3
 8009902:	bd10      	pop	{r4, pc}

08009904 <memcmp>:
 8009904:	b530      	push	{r4, r5, lr}
 8009906:	2400      	movs	r4, #0
 8009908:	42a2      	cmp	r2, r4
 800990a:	d101      	bne.n	8009910 <memcmp+0xc>
 800990c:	2000      	movs	r0, #0
 800990e:	e007      	b.n	8009920 <memcmp+0x1c>
 8009910:	5d03      	ldrb	r3, [r0, r4]
 8009912:	3401      	adds	r4, #1
 8009914:	190d      	adds	r5, r1, r4
 8009916:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800991a:	42ab      	cmp	r3, r5
 800991c:	d0f4      	beq.n	8009908 <memcmp+0x4>
 800991e:	1b58      	subs	r0, r3, r5
 8009920:	bd30      	pop	{r4, r5, pc}

08009922 <memcpy>:
 8009922:	b510      	push	{r4, lr}
 8009924:	1e43      	subs	r3, r0, #1
 8009926:	440a      	add	r2, r1
 8009928:	4291      	cmp	r1, r2
 800992a:	d100      	bne.n	800992e <memcpy+0xc>
 800992c:	bd10      	pop	{r4, pc}
 800992e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009932:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009936:	e7f7      	b.n	8009928 <memcpy+0x6>

08009938 <memmove>:
 8009938:	4288      	cmp	r0, r1
 800993a:	b510      	push	{r4, lr}
 800993c:	eb01 0302 	add.w	r3, r1, r2
 8009940:	d807      	bhi.n	8009952 <memmove+0x1a>
 8009942:	1e42      	subs	r2, r0, #1
 8009944:	4299      	cmp	r1, r3
 8009946:	d00a      	beq.n	800995e <memmove+0x26>
 8009948:	f811 4b01 	ldrb.w	r4, [r1], #1
 800994c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009950:	e7f8      	b.n	8009944 <memmove+0xc>
 8009952:	4283      	cmp	r3, r0
 8009954:	d9f5      	bls.n	8009942 <memmove+0xa>
 8009956:	1881      	adds	r1, r0, r2
 8009958:	1ad2      	subs	r2, r2, r3
 800995a:	42d3      	cmn	r3, r2
 800995c:	d100      	bne.n	8009960 <memmove+0x28>
 800995e:	bd10      	pop	{r4, pc}
 8009960:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009964:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009968:	e7f7      	b.n	800995a <memmove+0x22>

0800996a <memset>:
 800996a:	4603      	mov	r3, r0
 800996c:	4402      	add	r2, r0
 800996e:	4293      	cmp	r3, r2
 8009970:	d100      	bne.n	8009974 <memset+0xa>
 8009972:	4770      	bx	lr
 8009974:	f803 1b01 	strb.w	r1, [r3], #1
 8009978:	e7f9      	b.n	800996e <memset+0x4>
	...

0800997c <_free_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	4605      	mov	r5, r0
 8009980:	2900      	cmp	r1, #0
 8009982:	d043      	beq.n	8009a0c <_free_r+0x90>
 8009984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009988:	1f0c      	subs	r4, r1, #4
 800998a:	2b00      	cmp	r3, #0
 800998c:	bfb8      	it	lt
 800998e:	18e4      	addlt	r4, r4, r3
 8009990:	f001 fa8e 	bl	800aeb0 <__malloc_lock>
 8009994:	4a1e      	ldr	r2, [pc, #120]	; (8009a10 <_free_r+0x94>)
 8009996:	6813      	ldr	r3, [r2, #0]
 8009998:	4610      	mov	r0, r2
 800999a:	b933      	cbnz	r3, 80099aa <_free_r+0x2e>
 800999c:	6063      	str	r3, [r4, #4]
 800999e:	6014      	str	r4, [r2, #0]
 80099a0:	4628      	mov	r0, r5
 80099a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099a6:	f001 ba84 	b.w	800aeb2 <__malloc_unlock>
 80099aa:	42a3      	cmp	r3, r4
 80099ac:	d90b      	bls.n	80099c6 <_free_r+0x4a>
 80099ae:	6821      	ldr	r1, [r4, #0]
 80099b0:	1862      	adds	r2, r4, r1
 80099b2:	4293      	cmp	r3, r2
 80099b4:	bf01      	itttt	eq
 80099b6:	681a      	ldreq	r2, [r3, #0]
 80099b8:	685b      	ldreq	r3, [r3, #4]
 80099ba:	1852      	addeq	r2, r2, r1
 80099bc:	6022      	streq	r2, [r4, #0]
 80099be:	6063      	str	r3, [r4, #4]
 80099c0:	6004      	str	r4, [r0, #0]
 80099c2:	e7ed      	b.n	80099a0 <_free_r+0x24>
 80099c4:	4613      	mov	r3, r2
 80099c6:	685a      	ldr	r2, [r3, #4]
 80099c8:	b10a      	cbz	r2, 80099ce <_free_r+0x52>
 80099ca:	42a2      	cmp	r2, r4
 80099cc:	d9fa      	bls.n	80099c4 <_free_r+0x48>
 80099ce:	6819      	ldr	r1, [r3, #0]
 80099d0:	1858      	adds	r0, r3, r1
 80099d2:	42a0      	cmp	r0, r4
 80099d4:	d10b      	bne.n	80099ee <_free_r+0x72>
 80099d6:	6820      	ldr	r0, [r4, #0]
 80099d8:	4401      	add	r1, r0
 80099da:	1858      	adds	r0, r3, r1
 80099dc:	4282      	cmp	r2, r0
 80099de:	6019      	str	r1, [r3, #0]
 80099e0:	d1de      	bne.n	80099a0 <_free_r+0x24>
 80099e2:	6810      	ldr	r0, [r2, #0]
 80099e4:	6852      	ldr	r2, [r2, #4]
 80099e6:	4401      	add	r1, r0
 80099e8:	6019      	str	r1, [r3, #0]
 80099ea:	605a      	str	r2, [r3, #4]
 80099ec:	e7d8      	b.n	80099a0 <_free_r+0x24>
 80099ee:	d902      	bls.n	80099f6 <_free_r+0x7a>
 80099f0:	230c      	movs	r3, #12
 80099f2:	602b      	str	r3, [r5, #0]
 80099f4:	e7d4      	b.n	80099a0 <_free_r+0x24>
 80099f6:	6820      	ldr	r0, [r4, #0]
 80099f8:	1821      	adds	r1, r4, r0
 80099fa:	428a      	cmp	r2, r1
 80099fc:	bf01      	itttt	eq
 80099fe:	6811      	ldreq	r1, [r2, #0]
 8009a00:	6852      	ldreq	r2, [r2, #4]
 8009a02:	1809      	addeq	r1, r1, r0
 8009a04:	6021      	streq	r1, [r4, #0]
 8009a06:	6062      	str	r2, [r4, #4]
 8009a08:	605c      	str	r4, [r3, #4]
 8009a0a:	e7c9      	b.n	80099a0 <_free_r+0x24>
 8009a0c:	bd38      	pop	{r3, r4, r5, pc}
 8009a0e:	bf00      	nop
 8009a10:	200010c4 	.word	0x200010c4

08009a14 <_malloc_r>:
 8009a14:	b570      	push	{r4, r5, r6, lr}
 8009a16:	1ccd      	adds	r5, r1, #3
 8009a18:	f025 0503 	bic.w	r5, r5, #3
 8009a1c:	3508      	adds	r5, #8
 8009a1e:	2d0c      	cmp	r5, #12
 8009a20:	bf38      	it	cc
 8009a22:	250c      	movcc	r5, #12
 8009a24:	2d00      	cmp	r5, #0
 8009a26:	4606      	mov	r6, r0
 8009a28:	db01      	blt.n	8009a2e <_malloc_r+0x1a>
 8009a2a:	42a9      	cmp	r1, r5
 8009a2c:	d903      	bls.n	8009a36 <_malloc_r+0x22>
 8009a2e:	230c      	movs	r3, #12
 8009a30:	6033      	str	r3, [r6, #0]
 8009a32:	2000      	movs	r0, #0
 8009a34:	bd70      	pop	{r4, r5, r6, pc}
 8009a36:	f001 fa3b 	bl	800aeb0 <__malloc_lock>
 8009a3a:	4a21      	ldr	r2, [pc, #132]	; (8009ac0 <_malloc_r+0xac>)
 8009a3c:	6814      	ldr	r4, [r2, #0]
 8009a3e:	4621      	mov	r1, r4
 8009a40:	b991      	cbnz	r1, 8009a68 <_malloc_r+0x54>
 8009a42:	4c20      	ldr	r4, [pc, #128]	; (8009ac4 <_malloc_r+0xb0>)
 8009a44:	6823      	ldr	r3, [r4, #0]
 8009a46:	b91b      	cbnz	r3, 8009a50 <_malloc_r+0x3c>
 8009a48:	4630      	mov	r0, r6
 8009a4a:	f000 fb7b 	bl	800a144 <_sbrk_r>
 8009a4e:	6020      	str	r0, [r4, #0]
 8009a50:	4629      	mov	r1, r5
 8009a52:	4630      	mov	r0, r6
 8009a54:	f000 fb76 	bl	800a144 <_sbrk_r>
 8009a58:	1c43      	adds	r3, r0, #1
 8009a5a:	d124      	bne.n	8009aa6 <_malloc_r+0x92>
 8009a5c:	230c      	movs	r3, #12
 8009a5e:	4630      	mov	r0, r6
 8009a60:	6033      	str	r3, [r6, #0]
 8009a62:	f001 fa26 	bl	800aeb2 <__malloc_unlock>
 8009a66:	e7e4      	b.n	8009a32 <_malloc_r+0x1e>
 8009a68:	680b      	ldr	r3, [r1, #0]
 8009a6a:	1b5b      	subs	r3, r3, r5
 8009a6c:	d418      	bmi.n	8009aa0 <_malloc_r+0x8c>
 8009a6e:	2b0b      	cmp	r3, #11
 8009a70:	d90f      	bls.n	8009a92 <_malloc_r+0x7e>
 8009a72:	600b      	str	r3, [r1, #0]
 8009a74:	18cc      	adds	r4, r1, r3
 8009a76:	50cd      	str	r5, [r1, r3]
 8009a78:	4630      	mov	r0, r6
 8009a7a:	f001 fa1a 	bl	800aeb2 <__malloc_unlock>
 8009a7e:	f104 000b 	add.w	r0, r4, #11
 8009a82:	1d23      	adds	r3, r4, #4
 8009a84:	f020 0007 	bic.w	r0, r0, #7
 8009a88:	1ac3      	subs	r3, r0, r3
 8009a8a:	d0d3      	beq.n	8009a34 <_malloc_r+0x20>
 8009a8c:	425a      	negs	r2, r3
 8009a8e:	50e2      	str	r2, [r4, r3]
 8009a90:	e7d0      	b.n	8009a34 <_malloc_r+0x20>
 8009a92:	684b      	ldr	r3, [r1, #4]
 8009a94:	428c      	cmp	r4, r1
 8009a96:	bf16      	itet	ne
 8009a98:	6063      	strne	r3, [r4, #4]
 8009a9a:	6013      	streq	r3, [r2, #0]
 8009a9c:	460c      	movne	r4, r1
 8009a9e:	e7eb      	b.n	8009a78 <_malloc_r+0x64>
 8009aa0:	460c      	mov	r4, r1
 8009aa2:	6849      	ldr	r1, [r1, #4]
 8009aa4:	e7cc      	b.n	8009a40 <_malloc_r+0x2c>
 8009aa6:	1cc4      	adds	r4, r0, #3
 8009aa8:	f024 0403 	bic.w	r4, r4, #3
 8009aac:	42a0      	cmp	r0, r4
 8009aae:	d005      	beq.n	8009abc <_malloc_r+0xa8>
 8009ab0:	1a21      	subs	r1, r4, r0
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f000 fb46 	bl	800a144 <_sbrk_r>
 8009ab8:	3001      	adds	r0, #1
 8009aba:	d0cf      	beq.n	8009a5c <_malloc_r+0x48>
 8009abc:	6025      	str	r5, [r4, #0]
 8009abe:	e7db      	b.n	8009a78 <_malloc_r+0x64>
 8009ac0:	200010c4 	.word	0x200010c4
 8009ac4:	200010c8 	.word	0x200010c8

08009ac8 <__cvt>:
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ace:	461e      	mov	r6, r3
 8009ad0:	bfbb      	ittet	lt
 8009ad2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009ad6:	461e      	movlt	r6, r3
 8009ad8:	2300      	movge	r3, #0
 8009ada:	232d      	movlt	r3, #45	; 0x2d
 8009adc:	b088      	sub	sp, #32
 8009ade:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009ae0:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8009ae4:	f027 0720 	bic.w	r7, r7, #32
 8009ae8:	2f46      	cmp	r7, #70	; 0x46
 8009aea:	4614      	mov	r4, r2
 8009aec:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009aee:	700b      	strb	r3, [r1, #0]
 8009af0:	d004      	beq.n	8009afc <__cvt+0x34>
 8009af2:	2f45      	cmp	r7, #69	; 0x45
 8009af4:	d100      	bne.n	8009af8 <__cvt+0x30>
 8009af6:	3501      	adds	r5, #1
 8009af8:	2302      	movs	r3, #2
 8009afa:	e000      	b.n	8009afe <__cvt+0x36>
 8009afc:	2303      	movs	r3, #3
 8009afe:	aa07      	add	r2, sp, #28
 8009b00:	9204      	str	r2, [sp, #16]
 8009b02:	aa06      	add	r2, sp, #24
 8009b04:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009b08:	e9cd 3500 	strd	r3, r5, [sp]
 8009b0c:	4622      	mov	r2, r4
 8009b0e:	4633      	mov	r3, r6
 8009b10:	f000 fbfa 	bl	800a308 <_dtoa_r>
 8009b14:	2f47      	cmp	r7, #71	; 0x47
 8009b16:	4680      	mov	r8, r0
 8009b18:	d102      	bne.n	8009b20 <__cvt+0x58>
 8009b1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b1c:	07db      	lsls	r3, r3, #31
 8009b1e:	d526      	bpl.n	8009b6e <__cvt+0xa6>
 8009b20:	2f46      	cmp	r7, #70	; 0x46
 8009b22:	eb08 0905 	add.w	r9, r8, r5
 8009b26:	d111      	bne.n	8009b4c <__cvt+0x84>
 8009b28:	f898 3000 	ldrb.w	r3, [r8]
 8009b2c:	2b30      	cmp	r3, #48	; 0x30
 8009b2e:	d10a      	bne.n	8009b46 <__cvt+0x7e>
 8009b30:	2200      	movs	r2, #0
 8009b32:	2300      	movs	r3, #0
 8009b34:	4620      	mov	r0, r4
 8009b36:	4631      	mov	r1, r6
 8009b38:	f7f6 ff40 	bl	80009bc <__aeabi_dcmpeq>
 8009b3c:	b918      	cbnz	r0, 8009b46 <__cvt+0x7e>
 8009b3e:	f1c5 0501 	rsb	r5, r5, #1
 8009b42:	f8ca 5000 	str.w	r5, [sl]
 8009b46:	f8da 3000 	ldr.w	r3, [sl]
 8009b4a:	4499      	add	r9, r3
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	2300      	movs	r3, #0
 8009b50:	4620      	mov	r0, r4
 8009b52:	4631      	mov	r1, r6
 8009b54:	f7f6 ff32 	bl	80009bc <__aeabi_dcmpeq>
 8009b58:	b938      	cbnz	r0, 8009b6a <__cvt+0xa2>
 8009b5a:	2230      	movs	r2, #48	; 0x30
 8009b5c:	9b07      	ldr	r3, [sp, #28]
 8009b5e:	454b      	cmp	r3, r9
 8009b60:	d205      	bcs.n	8009b6e <__cvt+0xa6>
 8009b62:	1c59      	adds	r1, r3, #1
 8009b64:	9107      	str	r1, [sp, #28]
 8009b66:	701a      	strb	r2, [r3, #0]
 8009b68:	e7f8      	b.n	8009b5c <__cvt+0x94>
 8009b6a:	f8cd 901c 	str.w	r9, [sp, #28]
 8009b6e:	4640      	mov	r0, r8
 8009b70:	9b07      	ldr	r3, [sp, #28]
 8009b72:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009b74:	eba3 0308 	sub.w	r3, r3, r8
 8009b78:	6013      	str	r3, [r2, #0]
 8009b7a:	b008      	add	sp, #32
 8009b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009b80 <__exponent>:
 8009b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b82:	2900      	cmp	r1, #0
 8009b84:	bfb4      	ite	lt
 8009b86:	232d      	movlt	r3, #45	; 0x2d
 8009b88:	232b      	movge	r3, #43	; 0x2b
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	bfb8      	it	lt
 8009b8e:	4249      	neglt	r1, r1
 8009b90:	2909      	cmp	r1, #9
 8009b92:	f804 2b02 	strb.w	r2, [r4], #2
 8009b96:	7043      	strb	r3, [r0, #1]
 8009b98:	dd21      	ble.n	8009bde <__exponent+0x5e>
 8009b9a:	f10d 0307 	add.w	r3, sp, #7
 8009b9e:	461f      	mov	r7, r3
 8009ba0:	260a      	movs	r6, #10
 8009ba2:	fb91 f5f6 	sdiv	r5, r1, r6
 8009ba6:	fb06 1115 	mls	r1, r6, r5, r1
 8009baa:	2d09      	cmp	r5, #9
 8009bac:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8009bb0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009bb4:	f103 32ff 	add.w	r2, r3, #4294967295
 8009bb8:	4629      	mov	r1, r5
 8009bba:	dc09      	bgt.n	8009bd0 <__exponent+0x50>
 8009bbc:	3130      	adds	r1, #48	; 0x30
 8009bbe:	3b02      	subs	r3, #2
 8009bc0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009bc4:	42bb      	cmp	r3, r7
 8009bc6:	4622      	mov	r2, r4
 8009bc8:	d304      	bcc.n	8009bd4 <__exponent+0x54>
 8009bca:	1a10      	subs	r0, r2, r0
 8009bcc:	b003      	add	sp, #12
 8009bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	e7e6      	b.n	8009ba2 <__exponent+0x22>
 8009bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bd8:	f804 2b01 	strb.w	r2, [r4], #1
 8009bdc:	e7f2      	b.n	8009bc4 <__exponent+0x44>
 8009bde:	2330      	movs	r3, #48	; 0x30
 8009be0:	4419      	add	r1, r3
 8009be2:	7083      	strb	r3, [r0, #2]
 8009be4:	1d02      	adds	r2, r0, #4
 8009be6:	70c1      	strb	r1, [r0, #3]
 8009be8:	e7ef      	b.n	8009bca <__exponent+0x4a>
	...

08009bec <_printf_float>:
 8009bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf0:	b091      	sub	sp, #68	; 0x44
 8009bf2:	460c      	mov	r4, r1
 8009bf4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009bf6:	4693      	mov	fp, r2
 8009bf8:	461e      	mov	r6, r3
 8009bfa:	4605      	mov	r5, r0
 8009bfc:	f001 f938 	bl	800ae70 <_localeconv_r>
 8009c00:	6803      	ldr	r3, [r0, #0]
 8009c02:	4618      	mov	r0, r3
 8009c04:	9309      	str	r3, [sp, #36]	; 0x24
 8009c06:	f7f6 faad 	bl	8000164 <strlen>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	930e      	str	r3, [sp, #56]	; 0x38
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	900a      	str	r0, [sp, #40]	; 0x28
 8009c12:	3307      	adds	r3, #7
 8009c14:	f023 0307 	bic.w	r3, r3, #7
 8009c18:	f103 0208 	add.w	r2, r3, #8
 8009c1c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8009c20:	f8d4 a000 	ldr.w	sl, [r4]
 8009c24:	603a      	str	r2, [r7, #0]
 8009c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009c2e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8009c32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c36:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c38:	f04f 32ff 	mov.w	r2, #4294967295
 8009c3c:	4ba6      	ldr	r3, [pc, #664]	; (8009ed8 <_printf_float+0x2ec>)
 8009c3e:	4638      	mov	r0, r7
 8009c40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c42:	f7f6 feed 	bl	8000a20 <__aeabi_dcmpun>
 8009c46:	bb68      	cbnz	r0, 8009ca4 <_printf_float+0xb8>
 8009c48:	f04f 32ff 	mov.w	r2, #4294967295
 8009c4c:	4ba2      	ldr	r3, [pc, #648]	; (8009ed8 <_printf_float+0x2ec>)
 8009c4e:	4638      	mov	r0, r7
 8009c50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c52:	f7f6 fec7 	bl	80009e4 <__aeabi_dcmple>
 8009c56:	bb28      	cbnz	r0, 8009ca4 <_printf_float+0xb8>
 8009c58:	2200      	movs	r2, #0
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	4638      	mov	r0, r7
 8009c5e:	4649      	mov	r1, r9
 8009c60:	f7f6 feb6 	bl	80009d0 <__aeabi_dcmplt>
 8009c64:	b110      	cbz	r0, 8009c6c <_printf_float+0x80>
 8009c66:	232d      	movs	r3, #45	; 0x2d
 8009c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c6c:	4f9b      	ldr	r7, [pc, #620]	; (8009edc <_printf_float+0x2f0>)
 8009c6e:	4b9c      	ldr	r3, [pc, #624]	; (8009ee0 <_printf_float+0x2f4>)
 8009c70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009c74:	bf98      	it	ls
 8009c76:	461f      	movls	r7, r3
 8009c78:	2303      	movs	r3, #3
 8009c7a:	f04f 0900 	mov.w	r9, #0
 8009c7e:	6123      	str	r3, [r4, #16]
 8009c80:	f02a 0304 	bic.w	r3, sl, #4
 8009c84:	6023      	str	r3, [r4, #0]
 8009c86:	9600      	str	r6, [sp, #0]
 8009c88:	465b      	mov	r3, fp
 8009c8a:	aa0f      	add	r2, sp, #60	; 0x3c
 8009c8c:	4621      	mov	r1, r4
 8009c8e:	4628      	mov	r0, r5
 8009c90:	f000 f9e2 	bl	800a058 <_printf_common>
 8009c94:	3001      	adds	r0, #1
 8009c96:	f040 8090 	bne.w	8009dba <_printf_float+0x1ce>
 8009c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c9e:	b011      	add	sp, #68	; 0x44
 8009ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ca4:	463a      	mov	r2, r7
 8009ca6:	464b      	mov	r3, r9
 8009ca8:	4638      	mov	r0, r7
 8009caa:	4649      	mov	r1, r9
 8009cac:	f7f6 feb8 	bl	8000a20 <__aeabi_dcmpun>
 8009cb0:	b110      	cbz	r0, 8009cb8 <_printf_float+0xcc>
 8009cb2:	4f8c      	ldr	r7, [pc, #560]	; (8009ee4 <_printf_float+0x2f8>)
 8009cb4:	4b8c      	ldr	r3, [pc, #560]	; (8009ee8 <_printf_float+0x2fc>)
 8009cb6:	e7db      	b.n	8009c70 <_printf_float+0x84>
 8009cb8:	6863      	ldr	r3, [r4, #4]
 8009cba:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8009cbe:	1c59      	adds	r1, r3, #1
 8009cc0:	a80d      	add	r0, sp, #52	; 0x34
 8009cc2:	a90e      	add	r1, sp, #56	; 0x38
 8009cc4:	d140      	bne.n	8009d48 <_printf_float+0x15c>
 8009cc6:	2306      	movs	r3, #6
 8009cc8:	6063      	str	r3, [r4, #4]
 8009cca:	f04f 0c00 	mov.w	ip, #0
 8009cce:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8009cd2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8009cd6:	6863      	ldr	r3, [r4, #4]
 8009cd8:	6022      	str	r2, [r4, #0]
 8009cda:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009cde:	9300      	str	r3, [sp, #0]
 8009ce0:	463a      	mov	r2, r7
 8009ce2:	464b      	mov	r3, r9
 8009ce4:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009ce8:	4628      	mov	r0, r5
 8009cea:	f7ff feed 	bl	8009ac8 <__cvt>
 8009cee:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8009cf2:	2b47      	cmp	r3, #71	; 0x47
 8009cf4:	4607      	mov	r7, r0
 8009cf6:	d109      	bne.n	8009d0c <_printf_float+0x120>
 8009cf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cfa:	1cd8      	adds	r0, r3, #3
 8009cfc:	db02      	blt.n	8009d04 <_printf_float+0x118>
 8009cfe:	6862      	ldr	r2, [r4, #4]
 8009d00:	4293      	cmp	r3, r2
 8009d02:	dd47      	ble.n	8009d94 <_printf_float+0x1a8>
 8009d04:	f1a8 0802 	sub.w	r8, r8, #2
 8009d08:	fa5f f888 	uxtb.w	r8, r8
 8009d0c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009d10:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009d12:	d824      	bhi.n	8009d5e <_printf_float+0x172>
 8009d14:	3901      	subs	r1, #1
 8009d16:	4642      	mov	r2, r8
 8009d18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009d1c:	910d      	str	r1, [sp, #52]	; 0x34
 8009d1e:	f7ff ff2f 	bl	8009b80 <__exponent>
 8009d22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d24:	4681      	mov	r9, r0
 8009d26:	1813      	adds	r3, r2, r0
 8009d28:	2a01      	cmp	r2, #1
 8009d2a:	6123      	str	r3, [r4, #16]
 8009d2c:	dc02      	bgt.n	8009d34 <_printf_float+0x148>
 8009d2e:	6822      	ldr	r2, [r4, #0]
 8009d30:	07d1      	lsls	r1, r2, #31
 8009d32:	d501      	bpl.n	8009d38 <_printf_float+0x14c>
 8009d34:	3301      	adds	r3, #1
 8009d36:	6123      	str	r3, [r4, #16]
 8009d38:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d0a2      	beq.n	8009c86 <_printf_float+0x9a>
 8009d40:	232d      	movs	r3, #45	; 0x2d
 8009d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d46:	e79e      	b.n	8009c86 <_printf_float+0x9a>
 8009d48:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8009d4c:	f000 816e 	beq.w	800a02c <_printf_float+0x440>
 8009d50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009d54:	d1b9      	bne.n	8009cca <_printf_float+0xde>
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d1b7      	bne.n	8009cca <_printf_float+0xde>
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e7b4      	b.n	8009cc8 <_printf_float+0xdc>
 8009d5e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8009d62:	d119      	bne.n	8009d98 <_printf_float+0x1ac>
 8009d64:	2900      	cmp	r1, #0
 8009d66:	6863      	ldr	r3, [r4, #4]
 8009d68:	dd0c      	ble.n	8009d84 <_printf_float+0x198>
 8009d6a:	6121      	str	r1, [r4, #16]
 8009d6c:	b913      	cbnz	r3, 8009d74 <_printf_float+0x188>
 8009d6e:	6822      	ldr	r2, [r4, #0]
 8009d70:	07d2      	lsls	r2, r2, #31
 8009d72:	d502      	bpl.n	8009d7a <_printf_float+0x18e>
 8009d74:	3301      	adds	r3, #1
 8009d76:	440b      	add	r3, r1
 8009d78:	6123      	str	r3, [r4, #16]
 8009d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d7c:	f04f 0900 	mov.w	r9, #0
 8009d80:	65a3      	str	r3, [r4, #88]	; 0x58
 8009d82:	e7d9      	b.n	8009d38 <_printf_float+0x14c>
 8009d84:	b913      	cbnz	r3, 8009d8c <_printf_float+0x1a0>
 8009d86:	6822      	ldr	r2, [r4, #0]
 8009d88:	07d0      	lsls	r0, r2, #31
 8009d8a:	d501      	bpl.n	8009d90 <_printf_float+0x1a4>
 8009d8c:	3302      	adds	r3, #2
 8009d8e:	e7f3      	b.n	8009d78 <_printf_float+0x18c>
 8009d90:	2301      	movs	r3, #1
 8009d92:	e7f1      	b.n	8009d78 <_printf_float+0x18c>
 8009d94:	f04f 0867 	mov.w	r8, #103	; 0x67
 8009d98:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	db05      	blt.n	8009dac <_printf_float+0x1c0>
 8009da0:	6822      	ldr	r2, [r4, #0]
 8009da2:	6123      	str	r3, [r4, #16]
 8009da4:	07d1      	lsls	r1, r2, #31
 8009da6:	d5e8      	bpl.n	8009d7a <_printf_float+0x18e>
 8009da8:	3301      	adds	r3, #1
 8009daa:	e7e5      	b.n	8009d78 <_printf_float+0x18c>
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	bfcc      	ite	gt
 8009db0:	2301      	movgt	r3, #1
 8009db2:	f1c3 0302 	rsble	r3, r3, #2
 8009db6:	4413      	add	r3, r2
 8009db8:	e7de      	b.n	8009d78 <_printf_float+0x18c>
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	055a      	lsls	r2, r3, #21
 8009dbe:	d407      	bmi.n	8009dd0 <_printf_float+0x1e4>
 8009dc0:	6923      	ldr	r3, [r4, #16]
 8009dc2:	463a      	mov	r2, r7
 8009dc4:	4659      	mov	r1, fp
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	47b0      	blx	r6
 8009dca:	3001      	adds	r0, #1
 8009dcc:	d129      	bne.n	8009e22 <_printf_float+0x236>
 8009dce:	e764      	b.n	8009c9a <_printf_float+0xae>
 8009dd0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009dd4:	f240 80d7 	bls.w	8009f86 <_printf_float+0x39a>
 8009dd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ddc:	2200      	movs	r2, #0
 8009dde:	2300      	movs	r3, #0
 8009de0:	f7f6 fdec 	bl	80009bc <__aeabi_dcmpeq>
 8009de4:	b388      	cbz	r0, 8009e4a <_printf_float+0x25e>
 8009de6:	2301      	movs	r3, #1
 8009de8:	4a40      	ldr	r2, [pc, #256]	; (8009eec <_printf_float+0x300>)
 8009dea:	4659      	mov	r1, fp
 8009dec:	4628      	mov	r0, r5
 8009dee:	47b0      	blx	r6
 8009df0:	3001      	adds	r0, #1
 8009df2:	f43f af52 	beq.w	8009c9a <_printf_float+0xae>
 8009df6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	db02      	blt.n	8009e04 <_printf_float+0x218>
 8009dfe:	6823      	ldr	r3, [r4, #0]
 8009e00:	07d8      	lsls	r0, r3, #31
 8009e02:	d50e      	bpl.n	8009e22 <_printf_float+0x236>
 8009e04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e08:	4659      	mov	r1, fp
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	47b0      	blx	r6
 8009e0e:	3001      	adds	r0, #1
 8009e10:	f43f af43 	beq.w	8009c9a <_printf_float+0xae>
 8009e14:	2700      	movs	r7, #0
 8009e16:	f104 081a 	add.w	r8, r4, #26
 8009e1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e1c:	3b01      	subs	r3, #1
 8009e1e:	42bb      	cmp	r3, r7
 8009e20:	dc09      	bgt.n	8009e36 <_printf_float+0x24a>
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	079f      	lsls	r7, r3, #30
 8009e26:	f100 80fd 	bmi.w	800a024 <_printf_float+0x438>
 8009e2a:	68e0      	ldr	r0, [r4, #12]
 8009e2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e2e:	4298      	cmp	r0, r3
 8009e30:	bfb8      	it	lt
 8009e32:	4618      	movlt	r0, r3
 8009e34:	e733      	b.n	8009c9e <_printf_float+0xb2>
 8009e36:	2301      	movs	r3, #1
 8009e38:	4642      	mov	r2, r8
 8009e3a:	4659      	mov	r1, fp
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	47b0      	blx	r6
 8009e40:	3001      	adds	r0, #1
 8009e42:	f43f af2a 	beq.w	8009c9a <_printf_float+0xae>
 8009e46:	3701      	adds	r7, #1
 8009e48:	e7e7      	b.n	8009e1a <_printf_float+0x22e>
 8009e4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	dc2b      	bgt.n	8009ea8 <_printf_float+0x2bc>
 8009e50:	2301      	movs	r3, #1
 8009e52:	4a26      	ldr	r2, [pc, #152]	; (8009eec <_printf_float+0x300>)
 8009e54:	4659      	mov	r1, fp
 8009e56:	4628      	mov	r0, r5
 8009e58:	47b0      	blx	r6
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	f43f af1d 	beq.w	8009c9a <_printf_float+0xae>
 8009e60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e62:	b923      	cbnz	r3, 8009e6e <_printf_float+0x282>
 8009e64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e66:	b913      	cbnz	r3, 8009e6e <_printf_float+0x282>
 8009e68:	6823      	ldr	r3, [r4, #0]
 8009e6a:	07d9      	lsls	r1, r3, #31
 8009e6c:	d5d9      	bpl.n	8009e22 <_printf_float+0x236>
 8009e6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e72:	4659      	mov	r1, fp
 8009e74:	4628      	mov	r0, r5
 8009e76:	47b0      	blx	r6
 8009e78:	3001      	adds	r0, #1
 8009e7a:	f43f af0e 	beq.w	8009c9a <_printf_float+0xae>
 8009e7e:	f04f 0800 	mov.w	r8, #0
 8009e82:	f104 091a 	add.w	r9, r4, #26
 8009e86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e88:	425b      	negs	r3, r3
 8009e8a:	4543      	cmp	r3, r8
 8009e8c:	dc01      	bgt.n	8009e92 <_printf_float+0x2a6>
 8009e8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e90:	e797      	b.n	8009dc2 <_printf_float+0x1d6>
 8009e92:	2301      	movs	r3, #1
 8009e94:	464a      	mov	r2, r9
 8009e96:	4659      	mov	r1, fp
 8009e98:	4628      	mov	r0, r5
 8009e9a:	47b0      	blx	r6
 8009e9c:	3001      	adds	r0, #1
 8009e9e:	f43f aefc 	beq.w	8009c9a <_printf_float+0xae>
 8009ea2:	f108 0801 	add.w	r8, r8, #1
 8009ea6:	e7ee      	b.n	8009e86 <_printf_float+0x29a>
 8009ea8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009eaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009eac:	429a      	cmp	r2, r3
 8009eae:	bfa8      	it	ge
 8009eb0:	461a      	movge	r2, r3
 8009eb2:	2a00      	cmp	r2, #0
 8009eb4:	4690      	mov	r8, r2
 8009eb6:	dd07      	ble.n	8009ec8 <_printf_float+0x2dc>
 8009eb8:	4613      	mov	r3, r2
 8009eba:	4659      	mov	r1, fp
 8009ebc:	463a      	mov	r2, r7
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	47b0      	blx	r6
 8009ec2:	3001      	adds	r0, #1
 8009ec4:	f43f aee9 	beq.w	8009c9a <_printf_float+0xae>
 8009ec8:	f104 031a 	add.w	r3, r4, #26
 8009ecc:	f04f 0a00 	mov.w	sl, #0
 8009ed0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8009ed4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ed6:	e015      	b.n	8009f04 <_printf_float+0x318>
 8009ed8:	7fefffff 	.word	0x7fefffff
 8009edc:	0800b885 	.word	0x0800b885
 8009ee0:	0800b881 	.word	0x0800b881
 8009ee4:	0800b88d 	.word	0x0800b88d
 8009ee8:	0800b889 	.word	0x0800b889
 8009eec:	0800b891 	.word	0x0800b891
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ef4:	4659      	mov	r1, fp
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	47b0      	blx	r6
 8009efa:	3001      	adds	r0, #1
 8009efc:	f43f aecd 	beq.w	8009c9a <_printf_float+0xae>
 8009f00:	f10a 0a01 	add.w	sl, sl, #1
 8009f04:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8009f08:	eba9 0308 	sub.w	r3, r9, r8
 8009f0c:	4553      	cmp	r3, sl
 8009f0e:	dcef      	bgt.n	8009ef0 <_printf_float+0x304>
 8009f10:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009f14:	429a      	cmp	r2, r3
 8009f16:	444f      	add	r7, r9
 8009f18:	db14      	blt.n	8009f44 <_printf_float+0x358>
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	07da      	lsls	r2, r3, #31
 8009f1e:	d411      	bmi.n	8009f44 <_printf_float+0x358>
 8009f20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f22:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009f24:	eba3 0209 	sub.w	r2, r3, r9
 8009f28:	eba3 0901 	sub.w	r9, r3, r1
 8009f2c:	4591      	cmp	r9, r2
 8009f2e:	bfa8      	it	ge
 8009f30:	4691      	movge	r9, r2
 8009f32:	f1b9 0f00 	cmp.w	r9, #0
 8009f36:	dc0d      	bgt.n	8009f54 <_printf_float+0x368>
 8009f38:	2700      	movs	r7, #0
 8009f3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f3e:	f104 081a 	add.w	r8, r4, #26
 8009f42:	e018      	b.n	8009f76 <_printf_float+0x38a>
 8009f44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f48:	4659      	mov	r1, fp
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	47b0      	blx	r6
 8009f4e:	3001      	adds	r0, #1
 8009f50:	d1e6      	bne.n	8009f20 <_printf_float+0x334>
 8009f52:	e6a2      	b.n	8009c9a <_printf_float+0xae>
 8009f54:	464b      	mov	r3, r9
 8009f56:	463a      	mov	r2, r7
 8009f58:	4659      	mov	r1, fp
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	47b0      	blx	r6
 8009f5e:	3001      	adds	r0, #1
 8009f60:	d1ea      	bne.n	8009f38 <_printf_float+0x34c>
 8009f62:	e69a      	b.n	8009c9a <_printf_float+0xae>
 8009f64:	2301      	movs	r3, #1
 8009f66:	4642      	mov	r2, r8
 8009f68:	4659      	mov	r1, fp
 8009f6a:	4628      	mov	r0, r5
 8009f6c:	47b0      	blx	r6
 8009f6e:	3001      	adds	r0, #1
 8009f70:	f43f ae93 	beq.w	8009c9a <_printf_float+0xae>
 8009f74:	3701      	adds	r7, #1
 8009f76:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009f7a:	1a9b      	subs	r3, r3, r2
 8009f7c:	eba3 0309 	sub.w	r3, r3, r9
 8009f80:	42bb      	cmp	r3, r7
 8009f82:	dcef      	bgt.n	8009f64 <_printf_float+0x378>
 8009f84:	e74d      	b.n	8009e22 <_printf_float+0x236>
 8009f86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f88:	2a01      	cmp	r2, #1
 8009f8a:	dc01      	bgt.n	8009f90 <_printf_float+0x3a4>
 8009f8c:	07db      	lsls	r3, r3, #31
 8009f8e:	d538      	bpl.n	800a002 <_printf_float+0x416>
 8009f90:	2301      	movs	r3, #1
 8009f92:	463a      	mov	r2, r7
 8009f94:	4659      	mov	r1, fp
 8009f96:	4628      	mov	r0, r5
 8009f98:	47b0      	blx	r6
 8009f9a:	3001      	adds	r0, #1
 8009f9c:	f43f ae7d 	beq.w	8009c9a <_printf_float+0xae>
 8009fa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fa4:	4659      	mov	r1, fp
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	47b0      	blx	r6
 8009faa:	3001      	adds	r0, #1
 8009fac:	f107 0701 	add.w	r7, r7, #1
 8009fb0:	f43f ae73 	beq.w	8009c9a <_printf_float+0xae>
 8009fb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009fb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f103 38ff 	add.w	r8, r3, #4294967295
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	f7f6 fcfb 	bl	80009bc <__aeabi_dcmpeq>
 8009fc6:	b9c0      	cbnz	r0, 8009ffa <_printf_float+0x40e>
 8009fc8:	4643      	mov	r3, r8
 8009fca:	463a      	mov	r2, r7
 8009fcc:	4659      	mov	r1, fp
 8009fce:	4628      	mov	r0, r5
 8009fd0:	47b0      	blx	r6
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	d10d      	bne.n	8009ff2 <_printf_float+0x406>
 8009fd6:	e660      	b.n	8009c9a <_printf_float+0xae>
 8009fd8:	2301      	movs	r3, #1
 8009fda:	4642      	mov	r2, r8
 8009fdc:	4659      	mov	r1, fp
 8009fde:	4628      	mov	r0, r5
 8009fe0:	47b0      	blx	r6
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	f43f ae59 	beq.w	8009c9a <_printf_float+0xae>
 8009fe8:	3701      	adds	r7, #1
 8009fea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fec:	3b01      	subs	r3, #1
 8009fee:	42bb      	cmp	r3, r7
 8009ff0:	dcf2      	bgt.n	8009fd8 <_printf_float+0x3ec>
 8009ff2:	464b      	mov	r3, r9
 8009ff4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ff8:	e6e4      	b.n	8009dc4 <_printf_float+0x1d8>
 8009ffa:	2700      	movs	r7, #0
 8009ffc:	f104 081a 	add.w	r8, r4, #26
 800a000:	e7f3      	b.n	8009fea <_printf_float+0x3fe>
 800a002:	2301      	movs	r3, #1
 800a004:	e7e1      	b.n	8009fca <_printf_float+0x3de>
 800a006:	2301      	movs	r3, #1
 800a008:	4642      	mov	r2, r8
 800a00a:	4659      	mov	r1, fp
 800a00c:	4628      	mov	r0, r5
 800a00e:	47b0      	blx	r6
 800a010:	3001      	adds	r0, #1
 800a012:	f43f ae42 	beq.w	8009c9a <_printf_float+0xae>
 800a016:	3701      	adds	r7, #1
 800a018:	68e3      	ldr	r3, [r4, #12]
 800a01a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a01c:	1a9b      	subs	r3, r3, r2
 800a01e:	42bb      	cmp	r3, r7
 800a020:	dcf1      	bgt.n	800a006 <_printf_float+0x41a>
 800a022:	e702      	b.n	8009e2a <_printf_float+0x23e>
 800a024:	2700      	movs	r7, #0
 800a026:	f104 0819 	add.w	r8, r4, #25
 800a02a:	e7f5      	b.n	800a018 <_printf_float+0x42c>
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f43f ae94 	beq.w	8009d5a <_printf_float+0x16e>
 800a032:	f04f 0c00 	mov.w	ip, #0
 800a036:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800a03a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800a03e:	6022      	str	r2, [r4, #0]
 800a040:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800a044:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	463a      	mov	r2, r7
 800a04c:	464b      	mov	r3, r9
 800a04e:	4628      	mov	r0, r5
 800a050:	f7ff fd3a 	bl	8009ac8 <__cvt>
 800a054:	4607      	mov	r7, r0
 800a056:	e64f      	b.n	8009cf8 <_printf_float+0x10c>

0800a058 <_printf_common>:
 800a058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a05c:	4691      	mov	r9, r2
 800a05e:	461f      	mov	r7, r3
 800a060:	688a      	ldr	r2, [r1, #8]
 800a062:	690b      	ldr	r3, [r1, #16]
 800a064:	4606      	mov	r6, r0
 800a066:	4293      	cmp	r3, r2
 800a068:	bfb8      	it	lt
 800a06a:	4613      	movlt	r3, r2
 800a06c:	f8c9 3000 	str.w	r3, [r9]
 800a070:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a074:	460c      	mov	r4, r1
 800a076:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a07a:	b112      	cbz	r2, 800a082 <_printf_common+0x2a>
 800a07c:	3301      	adds	r3, #1
 800a07e:	f8c9 3000 	str.w	r3, [r9]
 800a082:	6823      	ldr	r3, [r4, #0]
 800a084:	0699      	lsls	r1, r3, #26
 800a086:	bf42      	ittt	mi
 800a088:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a08c:	3302      	addmi	r3, #2
 800a08e:	f8c9 3000 	strmi.w	r3, [r9]
 800a092:	6825      	ldr	r5, [r4, #0]
 800a094:	f015 0506 	ands.w	r5, r5, #6
 800a098:	d107      	bne.n	800a0aa <_printf_common+0x52>
 800a09a:	f104 0a19 	add.w	sl, r4, #25
 800a09e:	68e3      	ldr	r3, [r4, #12]
 800a0a0:	f8d9 2000 	ldr.w	r2, [r9]
 800a0a4:	1a9b      	subs	r3, r3, r2
 800a0a6:	42ab      	cmp	r3, r5
 800a0a8:	dc29      	bgt.n	800a0fe <_printf_common+0xa6>
 800a0aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a0ae:	6822      	ldr	r2, [r4, #0]
 800a0b0:	3300      	adds	r3, #0
 800a0b2:	bf18      	it	ne
 800a0b4:	2301      	movne	r3, #1
 800a0b6:	0692      	lsls	r2, r2, #26
 800a0b8:	d42e      	bmi.n	800a118 <_printf_common+0xc0>
 800a0ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0be:	4639      	mov	r1, r7
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	47c0      	blx	r8
 800a0c4:	3001      	adds	r0, #1
 800a0c6:	d021      	beq.n	800a10c <_printf_common+0xb4>
 800a0c8:	6823      	ldr	r3, [r4, #0]
 800a0ca:	68e5      	ldr	r5, [r4, #12]
 800a0cc:	f003 0306 	and.w	r3, r3, #6
 800a0d0:	2b04      	cmp	r3, #4
 800a0d2:	bf18      	it	ne
 800a0d4:	2500      	movne	r5, #0
 800a0d6:	f8d9 2000 	ldr.w	r2, [r9]
 800a0da:	f04f 0900 	mov.w	r9, #0
 800a0de:	bf08      	it	eq
 800a0e0:	1aad      	subeq	r5, r5, r2
 800a0e2:	68a3      	ldr	r3, [r4, #8]
 800a0e4:	6922      	ldr	r2, [r4, #16]
 800a0e6:	bf08      	it	eq
 800a0e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	bfc4      	itt	gt
 800a0f0:	1a9b      	subgt	r3, r3, r2
 800a0f2:	18ed      	addgt	r5, r5, r3
 800a0f4:	341a      	adds	r4, #26
 800a0f6:	454d      	cmp	r5, r9
 800a0f8:	d11a      	bne.n	800a130 <_printf_common+0xd8>
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	e008      	b.n	800a110 <_printf_common+0xb8>
 800a0fe:	2301      	movs	r3, #1
 800a100:	4652      	mov	r2, sl
 800a102:	4639      	mov	r1, r7
 800a104:	4630      	mov	r0, r6
 800a106:	47c0      	blx	r8
 800a108:	3001      	adds	r0, #1
 800a10a:	d103      	bne.n	800a114 <_printf_common+0xbc>
 800a10c:	f04f 30ff 	mov.w	r0, #4294967295
 800a110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a114:	3501      	adds	r5, #1
 800a116:	e7c2      	b.n	800a09e <_printf_common+0x46>
 800a118:	2030      	movs	r0, #48	; 0x30
 800a11a:	18e1      	adds	r1, r4, r3
 800a11c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a120:	1c5a      	adds	r2, r3, #1
 800a122:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a126:	4422      	add	r2, r4
 800a128:	3302      	adds	r3, #2
 800a12a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a12e:	e7c4      	b.n	800a0ba <_printf_common+0x62>
 800a130:	2301      	movs	r3, #1
 800a132:	4622      	mov	r2, r4
 800a134:	4639      	mov	r1, r7
 800a136:	4630      	mov	r0, r6
 800a138:	47c0      	blx	r8
 800a13a:	3001      	adds	r0, #1
 800a13c:	d0e6      	beq.n	800a10c <_printf_common+0xb4>
 800a13e:	f109 0901 	add.w	r9, r9, #1
 800a142:	e7d8      	b.n	800a0f6 <_printf_common+0x9e>

0800a144 <_sbrk_r>:
 800a144:	b538      	push	{r3, r4, r5, lr}
 800a146:	2300      	movs	r3, #0
 800a148:	4c05      	ldr	r4, [pc, #20]	; (800a160 <_sbrk_r+0x1c>)
 800a14a:	4605      	mov	r5, r0
 800a14c:	4608      	mov	r0, r1
 800a14e:	6023      	str	r3, [r4, #0]
 800a150:	f7fe fa0e 	bl	8008570 <_sbrk>
 800a154:	1c43      	adds	r3, r0, #1
 800a156:	d102      	bne.n	800a15e <_sbrk_r+0x1a>
 800a158:	6823      	ldr	r3, [r4, #0]
 800a15a:	b103      	cbz	r3, 800a15e <_sbrk_r+0x1a>
 800a15c:	602b      	str	r3, [r5, #0]
 800a15e:	bd38      	pop	{r3, r4, r5, pc}
 800a160:	20001150 	.word	0x20001150

0800a164 <_raise_r>:
 800a164:	291f      	cmp	r1, #31
 800a166:	b538      	push	{r3, r4, r5, lr}
 800a168:	4604      	mov	r4, r0
 800a16a:	460d      	mov	r5, r1
 800a16c:	d904      	bls.n	800a178 <_raise_r+0x14>
 800a16e:	2316      	movs	r3, #22
 800a170:	6003      	str	r3, [r0, #0]
 800a172:	f04f 30ff 	mov.w	r0, #4294967295
 800a176:	bd38      	pop	{r3, r4, r5, pc}
 800a178:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a17a:	b112      	cbz	r2, 800a182 <_raise_r+0x1e>
 800a17c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a180:	b94b      	cbnz	r3, 800a196 <_raise_r+0x32>
 800a182:	4620      	mov	r0, r4
 800a184:	f000 f830 	bl	800a1e8 <_getpid_r>
 800a188:	462a      	mov	r2, r5
 800a18a:	4601      	mov	r1, r0
 800a18c:	4620      	mov	r0, r4
 800a18e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a192:	f000 b817 	b.w	800a1c4 <_kill_r>
 800a196:	2b01      	cmp	r3, #1
 800a198:	d00a      	beq.n	800a1b0 <_raise_r+0x4c>
 800a19a:	1c59      	adds	r1, r3, #1
 800a19c:	d103      	bne.n	800a1a6 <_raise_r+0x42>
 800a19e:	2316      	movs	r3, #22
 800a1a0:	6003      	str	r3, [r0, #0]
 800a1a2:	2001      	movs	r0, #1
 800a1a4:	e7e7      	b.n	800a176 <_raise_r+0x12>
 800a1a6:	2400      	movs	r4, #0
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1ae:	4798      	blx	r3
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	e7e0      	b.n	800a176 <_raise_r+0x12>

0800a1b4 <raise>:
 800a1b4:	4b02      	ldr	r3, [pc, #8]	; (800a1c0 <raise+0xc>)
 800a1b6:	4601      	mov	r1, r0
 800a1b8:	6818      	ldr	r0, [r3, #0]
 800a1ba:	f7ff bfd3 	b.w	800a164 <_raise_r>
 800a1be:	bf00      	nop
 800a1c0:	20000018 	.word	0x20000018

0800a1c4 <_kill_r>:
 800a1c4:	b538      	push	{r3, r4, r5, lr}
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	4c06      	ldr	r4, [pc, #24]	; (800a1e4 <_kill_r+0x20>)
 800a1ca:	4605      	mov	r5, r0
 800a1cc:	4608      	mov	r0, r1
 800a1ce:	4611      	mov	r1, r2
 800a1d0:	6023      	str	r3, [r4, #0]
 800a1d2:	f7fe f9b2 	bl	800853a <_kill>
 800a1d6:	1c43      	adds	r3, r0, #1
 800a1d8:	d102      	bne.n	800a1e0 <_kill_r+0x1c>
 800a1da:	6823      	ldr	r3, [r4, #0]
 800a1dc:	b103      	cbz	r3, 800a1e0 <_kill_r+0x1c>
 800a1de:	602b      	str	r3, [r5, #0]
 800a1e0:	bd38      	pop	{r3, r4, r5, pc}
 800a1e2:	bf00      	nop
 800a1e4:	20001150 	.word	0x20001150

0800a1e8 <_getpid_r>:
 800a1e8:	f7fe b9a0 	b.w	800852c <_getpid>

0800a1ec <quorem>:
 800a1ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f0:	6903      	ldr	r3, [r0, #16]
 800a1f2:	690c      	ldr	r4, [r1, #16]
 800a1f4:	4680      	mov	r8, r0
 800a1f6:	42a3      	cmp	r3, r4
 800a1f8:	f2c0 8084 	blt.w	800a304 <quorem+0x118>
 800a1fc:	3c01      	subs	r4, #1
 800a1fe:	f101 0714 	add.w	r7, r1, #20
 800a202:	f100 0614 	add.w	r6, r0, #20
 800a206:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a20a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a20e:	3501      	adds	r5, #1
 800a210:	fbb0 f5f5 	udiv	r5, r0, r5
 800a214:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a218:	eb06 030c 	add.w	r3, r6, ip
 800a21c:	eb07 090c 	add.w	r9, r7, ip
 800a220:	9301      	str	r3, [sp, #4]
 800a222:	b39d      	cbz	r5, 800a28c <quorem+0xa0>
 800a224:	f04f 0a00 	mov.w	sl, #0
 800a228:	4638      	mov	r0, r7
 800a22a:	46b6      	mov	lr, r6
 800a22c:	46d3      	mov	fp, sl
 800a22e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a232:	b293      	uxth	r3, r2
 800a234:	fb05 a303 	mla	r3, r5, r3, sl
 800a238:	0c12      	lsrs	r2, r2, #16
 800a23a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a23e:	fb05 a202 	mla	r2, r5, r2, sl
 800a242:	b29b      	uxth	r3, r3
 800a244:	ebab 0303 	sub.w	r3, fp, r3
 800a248:	f8de b000 	ldr.w	fp, [lr]
 800a24c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a250:	fa1f fb8b 	uxth.w	fp, fp
 800a254:	445b      	add	r3, fp
 800a256:	fa1f fb82 	uxth.w	fp, r2
 800a25a:	f8de 2000 	ldr.w	r2, [lr]
 800a25e:	4581      	cmp	r9, r0
 800a260:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a264:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a268:	b29b      	uxth	r3, r3
 800a26a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a26e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a272:	f84e 3b04 	str.w	r3, [lr], #4
 800a276:	d2da      	bcs.n	800a22e <quorem+0x42>
 800a278:	f856 300c 	ldr.w	r3, [r6, ip]
 800a27c:	b933      	cbnz	r3, 800a28c <quorem+0xa0>
 800a27e:	9b01      	ldr	r3, [sp, #4]
 800a280:	3b04      	subs	r3, #4
 800a282:	429e      	cmp	r6, r3
 800a284:	461a      	mov	r2, r3
 800a286:	d331      	bcc.n	800a2ec <quorem+0x100>
 800a288:	f8c8 4010 	str.w	r4, [r8, #16]
 800a28c:	4640      	mov	r0, r8
 800a28e:	f001 f825 	bl	800b2dc <__mcmp>
 800a292:	2800      	cmp	r0, #0
 800a294:	db26      	blt.n	800a2e4 <quorem+0xf8>
 800a296:	4630      	mov	r0, r6
 800a298:	f04f 0c00 	mov.w	ip, #0
 800a29c:	3501      	adds	r5, #1
 800a29e:	f857 1b04 	ldr.w	r1, [r7], #4
 800a2a2:	f8d0 e000 	ldr.w	lr, [r0]
 800a2a6:	b28b      	uxth	r3, r1
 800a2a8:	ebac 0303 	sub.w	r3, ip, r3
 800a2ac:	fa1f f28e 	uxth.w	r2, lr
 800a2b0:	4413      	add	r3, r2
 800a2b2:	0c0a      	lsrs	r2, r1, #16
 800a2b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a2b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2c2:	45b9      	cmp	r9, r7
 800a2c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a2c8:	f840 3b04 	str.w	r3, [r0], #4
 800a2cc:	d2e7      	bcs.n	800a29e <quorem+0xb2>
 800a2ce:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a2d2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a2d6:	b92a      	cbnz	r2, 800a2e4 <quorem+0xf8>
 800a2d8:	3b04      	subs	r3, #4
 800a2da:	429e      	cmp	r6, r3
 800a2dc:	461a      	mov	r2, r3
 800a2de:	d30b      	bcc.n	800a2f8 <quorem+0x10c>
 800a2e0:	f8c8 4010 	str.w	r4, [r8, #16]
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	b003      	add	sp, #12
 800a2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ec:	6812      	ldr	r2, [r2, #0]
 800a2ee:	3b04      	subs	r3, #4
 800a2f0:	2a00      	cmp	r2, #0
 800a2f2:	d1c9      	bne.n	800a288 <quorem+0x9c>
 800a2f4:	3c01      	subs	r4, #1
 800a2f6:	e7c4      	b.n	800a282 <quorem+0x96>
 800a2f8:	6812      	ldr	r2, [r2, #0]
 800a2fa:	3b04      	subs	r3, #4
 800a2fc:	2a00      	cmp	r2, #0
 800a2fe:	d1ef      	bne.n	800a2e0 <quorem+0xf4>
 800a300:	3c01      	subs	r4, #1
 800a302:	e7ea      	b.n	800a2da <quorem+0xee>
 800a304:	2000      	movs	r0, #0
 800a306:	e7ee      	b.n	800a2e6 <quorem+0xfa>

0800a308 <_dtoa_r>:
 800a308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30c:	4616      	mov	r6, r2
 800a30e:	461f      	mov	r7, r3
 800a310:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a312:	b095      	sub	sp, #84	; 0x54
 800a314:	4604      	mov	r4, r0
 800a316:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800a31a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a31e:	b93d      	cbnz	r5, 800a330 <_dtoa_r+0x28>
 800a320:	2010      	movs	r0, #16
 800a322:	f7ff fad1 	bl	80098c8 <malloc>
 800a326:	6260      	str	r0, [r4, #36]	; 0x24
 800a328:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a32c:	6005      	str	r5, [r0, #0]
 800a32e:	60c5      	str	r5, [r0, #12]
 800a330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a332:	6819      	ldr	r1, [r3, #0]
 800a334:	b151      	cbz	r1, 800a34c <_dtoa_r+0x44>
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	2301      	movs	r3, #1
 800a33a:	4093      	lsls	r3, r2
 800a33c:	604a      	str	r2, [r1, #4]
 800a33e:	608b      	str	r3, [r1, #8]
 800a340:	4620      	mov	r0, r4
 800a342:	f000 fdeb 	bl	800af1c <_Bfree>
 800a346:	2200      	movs	r2, #0
 800a348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a34a:	601a      	str	r2, [r3, #0]
 800a34c:	1e3b      	subs	r3, r7, #0
 800a34e:	bfaf      	iteee	ge
 800a350:	2300      	movge	r3, #0
 800a352:	2201      	movlt	r2, #1
 800a354:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a358:	9303      	strlt	r3, [sp, #12]
 800a35a:	bfac      	ite	ge
 800a35c:	f8c8 3000 	strge.w	r3, [r8]
 800a360:	f8c8 2000 	strlt.w	r2, [r8]
 800a364:	4bae      	ldr	r3, [pc, #696]	; (800a620 <_dtoa_r+0x318>)
 800a366:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a36a:	ea33 0308 	bics.w	r3, r3, r8
 800a36e:	d11b      	bne.n	800a3a8 <_dtoa_r+0xa0>
 800a370:	f242 730f 	movw	r3, #9999	; 0x270f
 800a374:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a376:	6013      	str	r3, [r2, #0]
 800a378:	9b02      	ldr	r3, [sp, #8]
 800a37a:	b923      	cbnz	r3, 800a386 <_dtoa_r+0x7e>
 800a37c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a380:	2800      	cmp	r0, #0
 800a382:	f000 8545 	beq.w	800ae10 <_dtoa_r+0xb08>
 800a386:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a388:	b953      	cbnz	r3, 800a3a0 <_dtoa_r+0x98>
 800a38a:	4ba6      	ldr	r3, [pc, #664]	; (800a624 <_dtoa_r+0x31c>)
 800a38c:	e021      	b.n	800a3d2 <_dtoa_r+0xca>
 800a38e:	4ba6      	ldr	r3, [pc, #664]	; (800a628 <_dtoa_r+0x320>)
 800a390:	9306      	str	r3, [sp, #24]
 800a392:	3308      	adds	r3, #8
 800a394:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a396:	6013      	str	r3, [r2, #0]
 800a398:	9806      	ldr	r0, [sp, #24]
 800a39a:	b015      	add	sp, #84	; 0x54
 800a39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3a0:	4ba0      	ldr	r3, [pc, #640]	; (800a624 <_dtoa_r+0x31c>)
 800a3a2:	9306      	str	r3, [sp, #24]
 800a3a4:	3303      	adds	r3, #3
 800a3a6:	e7f5      	b.n	800a394 <_dtoa_r+0x8c>
 800a3a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	4639      	mov	r1, r7
 800a3b4:	f7f6 fb02 	bl	80009bc <__aeabi_dcmpeq>
 800a3b8:	4682      	mov	sl, r0
 800a3ba:	b160      	cbz	r0, 800a3d6 <_dtoa_r+0xce>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a3c0:	6013      	str	r3, [r2, #0]
 800a3c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	f000 8520 	beq.w	800ae0a <_dtoa_r+0xb02>
 800a3ca:	4b98      	ldr	r3, [pc, #608]	; (800a62c <_dtoa_r+0x324>)
 800a3cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a3ce:	6013      	str	r3, [r2, #0]
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	9306      	str	r3, [sp, #24]
 800a3d4:	e7e0      	b.n	800a398 <_dtoa_r+0x90>
 800a3d6:	ab12      	add	r3, sp, #72	; 0x48
 800a3d8:	9301      	str	r3, [sp, #4]
 800a3da:	ab13      	add	r3, sp, #76	; 0x4c
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	4632      	mov	r2, r6
 800a3e0:	463b      	mov	r3, r7
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f000 fff2 	bl	800b3cc <__d2b>
 800a3e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a3ec:	4683      	mov	fp, r0
 800a3ee:	2d00      	cmp	r5, #0
 800a3f0:	d07d      	beq.n	800a4ee <_dtoa_r+0x1e6>
 800a3f2:	46b0      	mov	r8, r6
 800a3f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a3f8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800a3fc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800a400:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a404:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800a408:	2200      	movs	r2, #0
 800a40a:	4b89      	ldr	r3, [pc, #548]	; (800a630 <_dtoa_r+0x328>)
 800a40c:	4640      	mov	r0, r8
 800a40e:	4649      	mov	r1, r9
 800a410:	f7f5 feb4 	bl	800017c <__aeabi_dsub>
 800a414:	a37c      	add	r3, pc, #496	; (adr r3, 800a608 <_dtoa_r+0x300>)
 800a416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41a:	f7f6 f867 	bl	80004ec <__aeabi_dmul>
 800a41e:	a37c      	add	r3, pc, #496	; (adr r3, 800a610 <_dtoa_r+0x308>)
 800a420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a424:	f7f5 feac 	bl	8000180 <__adddf3>
 800a428:	4606      	mov	r6, r0
 800a42a:	4628      	mov	r0, r5
 800a42c:	460f      	mov	r7, r1
 800a42e:	f7f5 fff3 	bl	8000418 <__aeabi_i2d>
 800a432:	a379      	add	r3, pc, #484	; (adr r3, 800a618 <_dtoa_r+0x310>)
 800a434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a438:	f7f6 f858 	bl	80004ec <__aeabi_dmul>
 800a43c:	4602      	mov	r2, r0
 800a43e:	460b      	mov	r3, r1
 800a440:	4630      	mov	r0, r6
 800a442:	4639      	mov	r1, r7
 800a444:	f7f5 fe9c 	bl	8000180 <__adddf3>
 800a448:	4606      	mov	r6, r0
 800a44a:	460f      	mov	r7, r1
 800a44c:	f7f6 fafe 	bl	8000a4c <__aeabi_d2iz>
 800a450:	2200      	movs	r2, #0
 800a452:	4682      	mov	sl, r0
 800a454:	2300      	movs	r3, #0
 800a456:	4630      	mov	r0, r6
 800a458:	4639      	mov	r1, r7
 800a45a:	f7f6 fab9 	bl	80009d0 <__aeabi_dcmplt>
 800a45e:	b148      	cbz	r0, 800a474 <_dtoa_r+0x16c>
 800a460:	4650      	mov	r0, sl
 800a462:	f7f5 ffd9 	bl	8000418 <__aeabi_i2d>
 800a466:	4632      	mov	r2, r6
 800a468:	463b      	mov	r3, r7
 800a46a:	f7f6 faa7 	bl	80009bc <__aeabi_dcmpeq>
 800a46e:	b908      	cbnz	r0, 800a474 <_dtoa_r+0x16c>
 800a470:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a474:	f1ba 0f16 	cmp.w	sl, #22
 800a478:	d85a      	bhi.n	800a530 <_dtoa_r+0x228>
 800a47a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a47e:	496d      	ldr	r1, [pc, #436]	; (800a634 <_dtoa_r+0x32c>)
 800a480:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a484:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a488:	f7f6 fac0 	bl	8000a0c <__aeabi_dcmpgt>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	d051      	beq.n	800a534 <_dtoa_r+0x22c>
 800a490:	2300      	movs	r3, #0
 800a492:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a496:	930d      	str	r3, [sp, #52]	; 0x34
 800a498:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a49a:	1b5d      	subs	r5, r3, r5
 800a49c:	1e6b      	subs	r3, r5, #1
 800a49e:	9307      	str	r3, [sp, #28]
 800a4a0:	bf43      	ittte	mi
 800a4a2:	2300      	movmi	r3, #0
 800a4a4:	f1c5 0901 	rsbmi	r9, r5, #1
 800a4a8:	9307      	strmi	r3, [sp, #28]
 800a4aa:	f04f 0900 	movpl.w	r9, #0
 800a4ae:	f1ba 0f00 	cmp.w	sl, #0
 800a4b2:	db41      	blt.n	800a538 <_dtoa_r+0x230>
 800a4b4:	9b07      	ldr	r3, [sp, #28]
 800a4b6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800a4ba:	4453      	add	r3, sl
 800a4bc:	9307      	str	r3, [sp, #28]
 800a4be:	2300      	movs	r3, #0
 800a4c0:	9308      	str	r3, [sp, #32]
 800a4c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a4c4:	2b09      	cmp	r3, #9
 800a4c6:	f200 808f 	bhi.w	800a5e8 <_dtoa_r+0x2e0>
 800a4ca:	2b05      	cmp	r3, #5
 800a4cc:	bfc4      	itt	gt
 800a4ce:	3b04      	subgt	r3, #4
 800a4d0:	931e      	strgt	r3, [sp, #120]	; 0x78
 800a4d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a4d4:	bfc8      	it	gt
 800a4d6:	2500      	movgt	r5, #0
 800a4d8:	f1a3 0302 	sub.w	r3, r3, #2
 800a4dc:	bfd8      	it	le
 800a4de:	2501      	movle	r5, #1
 800a4e0:	2b03      	cmp	r3, #3
 800a4e2:	f200 808d 	bhi.w	800a600 <_dtoa_r+0x2f8>
 800a4e6:	e8df f003 	tbb	[pc, r3]
 800a4ea:	7d7b      	.short	0x7d7b
 800a4ec:	6f2f      	.short	0x6f2f
 800a4ee:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a4f2:	441d      	add	r5, r3
 800a4f4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a4f8:	2820      	cmp	r0, #32
 800a4fa:	dd13      	ble.n	800a524 <_dtoa_r+0x21c>
 800a4fc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a500:	9b02      	ldr	r3, [sp, #8]
 800a502:	fa08 f800 	lsl.w	r8, r8, r0
 800a506:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a50a:	fa23 f000 	lsr.w	r0, r3, r0
 800a50e:	ea48 0000 	orr.w	r0, r8, r0
 800a512:	f7f5 ff71 	bl	80003f8 <__aeabi_ui2d>
 800a516:	2301      	movs	r3, #1
 800a518:	4680      	mov	r8, r0
 800a51a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800a51e:	3d01      	subs	r5, #1
 800a520:	9310      	str	r3, [sp, #64]	; 0x40
 800a522:	e771      	b.n	800a408 <_dtoa_r+0x100>
 800a524:	9b02      	ldr	r3, [sp, #8]
 800a526:	f1c0 0020 	rsb	r0, r0, #32
 800a52a:	fa03 f000 	lsl.w	r0, r3, r0
 800a52e:	e7f0      	b.n	800a512 <_dtoa_r+0x20a>
 800a530:	2301      	movs	r3, #1
 800a532:	e7b0      	b.n	800a496 <_dtoa_r+0x18e>
 800a534:	900d      	str	r0, [sp, #52]	; 0x34
 800a536:	e7af      	b.n	800a498 <_dtoa_r+0x190>
 800a538:	f1ca 0300 	rsb	r3, sl, #0
 800a53c:	9308      	str	r3, [sp, #32]
 800a53e:	2300      	movs	r3, #0
 800a540:	eba9 090a 	sub.w	r9, r9, sl
 800a544:	930c      	str	r3, [sp, #48]	; 0x30
 800a546:	e7bc      	b.n	800a4c2 <_dtoa_r+0x1ba>
 800a548:	2301      	movs	r3, #1
 800a54a:	9309      	str	r3, [sp, #36]	; 0x24
 800a54c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a54e:	2b00      	cmp	r3, #0
 800a550:	dd74      	ble.n	800a63c <_dtoa_r+0x334>
 800a552:	4698      	mov	r8, r3
 800a554:	9304      	str	r3, [sp, #16]
 800a556:	2200      	movs	r2, #0
 800a558:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a55a:	6072      	str	r2, [r6, #4]
 800a55c:	2204      	movs	r2, #4
 800a55e:	f102 0014 	add.w	r0, r2, #20
 800a562:	4298      	cmp	r0, r3
 800a564:	6871      	ldr	r1, [r6, #4]
 800a566:	d96e      	bls.n	800a646 <_dtoa_r+0x33e>
 800a568:	4620      	mov	r0, r4
 800a56a:	f000 fca3 	bl	800aeb4 <_Balloc>
 800a56e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a570:	6030      	str	r0, [r6, #0]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f1b8 0f0e 	cmp.w	r8, #14
 800a578:	9306      	str	r3, [sp, #24]
 800a57a:	f200 80ed 	bhi.w	800a758 <_dtoa_r+0x450>
 800a57e:	2d00      	cmp	r5, #0
 800a580:	f000 80ea 	beq.w	800a758 <_dtoa_r+0x450>
 800a584:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a588:	f1ba 0f00 	cmp.w	sl, #0
 800a58c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a590:	dd77      	ble.n	800a682 <_dtoa_r+0x37a>
 800a592:	4a28      	ldr	r2, [pc, #160]	; (800a634 <_dtoa_r+0x32c>)
 800a594:	f00a 030f 	and.w	r3, sl, #15
 800a598:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a59c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a5a0:	06f0      	lsls	r0, r6, #27
 800a5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a5aa:	d568      	bpl.n	800a67e <_dtoa_r+0x376>
 800a5ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a5b0:	4b21      	ldr	r3, [pc, #132]	; (800a638 <_dtoa_r+0x330>)
 800a5b2:	2503      	movs	r5, #3
 800a5b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5b8:	f7f6 f8c2 	bl	8000740 <__aeabi_ddiv>
 800a5bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5c0:	f006 060f 	and.w	r6, r6, #15
 800a5c4:	4f1c      	ldr	r7, [pc, #112]	; (800a638 <_dtoa_r+0x330>)
 800a5c6:	e04f      	b.n	800a668 <_dtoa_r+0x360>
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a5cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a5ce:	4453      	add	r3, sl
 800a5d0:	f103 0801 	add.w	r8, r3, #1
 800a5d4:	9304      	str	r3, [sp, #16]
 800a5d6:	4643      	mov	r3, r8
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	bfb8      	it	lt
 800a5dc:	2301      	movlt	r3, #1
 800a5de:	e7ba      	b.n	800a556 <_dtoa_r+0x24e>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	e7b2      	b.n	800a54a <_dtoa_r+0x242>
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	e7f0      	b.n	800a5ca <_dtoa_r+0x2c2>
 800a5e8:	2501      	movs	r5, #1
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	9509      	str	r5, [sp, #36]	; 0x24
 800a5ee:	931e      	str	r3, [sp, #120]	; 0x78
 800a5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	9304      	str	r3, [sp, #16]
 800a5f8:	4698      	mov	r8, r3
 800a5fa:	2312      	movs	r3, #18
 800a5fc:	921f      	str	r2, [sp, #124]	; 0x7c
 800a5fe:	e7aa      	b.n	800a556 <_dtoa_r+0x24e>
 800a600:	2301      	movs	r3, #1
 800a602:	9309      	str	r3, [sp, #36]	; 0x24
 800a604:	e7f4      	b.n	800a5f0 <_dtoa_r+0x2e8>
 800a606:	bf00      	nop
 800a608:	636f4361 	.word	0x636f4361
 800a60c:	3fd287a7 	.word	0x3fd287a7
 800a610:	8b60c8b3 	.word	0x8b60c8b3
 800a614:	3fc68a28 	.word	0x3fc68a28
 800a618:	509f79fb 	.word	0x509f79fb
 800a61c:	3fd34413 	.word	0x3fd34413
 800a620:	7ff00000 	.word	0x7ff00000
 800a624:	0800b89c 	.word	0x0800b89c
 800a628:	0800b893 	.word	0x0800b893
 800a62c:	0800b892 	.word	0x0800b892
 800a630:	3ff80000 	.word	0x3ff80000
 800a634:	0800b8d8 	.word	0x0800b8d8
 800a638:	0800b8b0 	.word	0x0800b8b0
 800a63c:	2301      	movs	r3, #1
 800a63e:	9304      	str	r3, [sp, #16]
 800a640:	4698      	mov	r8, r3
 800a642:	461a      	mov	r2, r3
 800a644:	e7da      	b.n	800a5fc <_dtoa_r+0x2f4>
 800a646:	3101      	adds	r1, #1
 800a648:	6071      	str	r1, [r6, #4]
 800a64a:	0052      	lsls	r2, r2, #1
 800a64c:	e787      	b.n	800a55e <_dtoa_r+0x256>
 800a64e:	07f1      	lsls	r1, r6, #31
 800a650:	d508      	bpl.n	800a664 <_dtoa_r+0x35c>
 800a652:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a65a:	f7f5 ff47 	bl	80004ec <__aeabi_dmul>
 800a65e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a662:	3501      	adds	r5, #1
 800a664:	1076      	asrs	r6, r6, #1
 800a666:	3708      	adds	r7, #8
 800a668:	2e00      	cmp	r6, #0
 800a66a:	d1f0      	bne.n	800a64e <_dtoa_r+0x346>
 800a66c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a670:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a674:	f7f6 f864 	bl	8000740 <__aeabi_ddiv>
 800a678:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a67c:	e01b      	b.n	800a6b6 <_dtoa_r+0x3ae>
 800a67e:	2502      	movs	r5, #2
 800a680:	e7a0      	b.n	800a5c4 <_dtoa_r+0x2bc>
 800a682:	f000 80a4 	beq.w	800a7ce <_dtoa_r+0x4c6>
 800a686:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a68a:	f1ca 0600 	rsb	r6, sl, #0
 800a68e:	4ba0      	ldr	r3, [pc, #640]	; (800a910 <_dtoa_r+0x608>)
 800a690:	f006 020f 	and.w	r2, r6, #15
 800a694:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69c:	f7f5 ff26 	bl	80004ec <__aeabi_dmul>
 800a6a0:	2502      	movs	r5, #2
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6a8:	4f9a      	ldr	r7, [pc, #616]	; (800a914 <_dtoa_r+0x60c>)
 800a6aa:	1136      	asrs	r6, r6, #4
 800a6ac:	2e00      	cmp	r6, #0
 800a6ae:	f040 8083 	bne.w	800a7b8 <_dtoa_r+0x4b0>
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d1e0      	bne.n	800a678 <_dtoa_r+0x370>
 800a6b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f000 808a 	beq.w	800a7d2 <_dtoa_r+0x4ca>
 800a6be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6c2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a6c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	4b92      	ldr	r3, [pc, #584]	; (800a918 <_dtoa_r+0x610>)
 800a6ce:	f7f6 f97f 	bl	80009d0 <__aeabi_dcmplt>
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	d07d      	beq.n	800a7d2 <_dtoa_r+0x4ca>
 800a6d6:	f1b8 0f00 	cmp.w	r8, #0
 800a6da:	d07a      	beq.n	800a7d2 <_dtoa_r+0x4ca>
 800a6dc:	9b04      	ldr	r3, [sp, #16]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	dd36      	ble.n	800a750 <_dtoa_r+0x448>
 800a6e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	4b8c      	ldr	r3, [pc, #560]	; (800a91c <_dtoa_r+0x614>)
 800a6ea:	f7f5 feff 	bl	80004ec <__aeabi_dmul>
 800a6ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6f2:	9e04      	ldr	r6, [sp, #16]
 800a6f4:	f10a 37ff 	add.w	r7, sl, #4294967295
 800a6f8:	3501      	adds	r5, #1
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	f7f5 fe8c 	bl	8000418 <__aeabi_i2d>
 800a700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a704:	f7f5 fef2 	bl	80004ec <__aeabi_dmul>
 800a708:	2200      	movs	r2, #0
 800a70a:	4b85      	ldr	r3, [pc, #532]	; (800a920 <_dtoa_r+0x618>)
 800a70c:	f7f5 fd38 	bl	8000180 <__adddf3>
 800a710:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800a714:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a718:	950b      	str	r5, [sp, #44]	; 0x2c
 800a71a:	2e00      	cmp	r6, #0
 800a71c:	d15c      	bne.n	800a7d8 <_dtoa_r+0x4d0>
 800a71e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a722:	2200      	movs	r2, #0
 800a724:	4b7f      	ldr	r3, [pc, #508]	; (800a924 <_dtoa_r+0x61c>)
 800a726:	f7f5 fd29 	bl	800017c <__aeabi_dsub>
 800a72a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a72c:	462b      	mov	r3, r5
 800a72e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a732:	f7f6 f96b 	bl	8000a0c <__aeabi_dcmpgt>
 800a736:	2800      	cmp	r0, #0
 800a738:	f040 8281 	bne.w	800ac3e <_dtoa_r+0x936>
 800a73c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a742:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a746:	f7f6 f943 	bl	80009d0 <__aeabi_dcmplt>
 800a74a:	2800      	cmp	r0, #0
 800a74c:	f040 8275 	bne.w	800ac3a <_dtoa_r+0x932>
 800a750:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a754:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a758:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f2c0 814b 	blt.w	800a9f6 <_dtoa_r+0x6ee>
 800a760:	f1ba 0f0e 	cmp.w	sl, #14
 800a764:	f300 8147 	bgt.w	800a9f6 <_dtoa_r+0x6ee>
 800a768:	4b69      	ldr	r3, [pc, #420]	; (800a910 <_dtoa_r+0x608>)
 800a76a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a772:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a776:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f280 80d7 	bge.w	800a92c <_dtoa_r+0x624>
 800a77e:	f1b8 0f00 	cmp.w	r8, #0
 800a782:	f300 80d3 	bgt.w	800a92c <_dtoa_r+0x624>
 800a786:	f040 8257 	bne.w	800ac38 <_dtoa_r+0x930>
 800a78a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a78e:	2200      	movs	r2, #0
 800a790:	4b64      	ldr	r3, [pc, #400]	; (800a924 <_dtoa_r+0x61c>)
 800a792:	f7f5 feab 	bl	80004ec <__aeabi_dmul>
 800a796:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a79a:	f7f6 f92d 	bl	80009f8 <__aeabi_dcmpge>
 800a79e:	4646      	mov	r6, r8
 800a7a0:	4647      	mov	r7, r8
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	f040 822d 	bne.w	800ac02 <_dtoa_r+0x8fa>
 800a7a8:	9b06      	ldr	r3, [sp, #24]
 800a7aa:	9a06      	ldr	r2, [sp, #24]
 800a7ac:	1c5d      	adds	r5, r3, #1
 800a7ae:	2331      	movs	r3, #49	; 0x31
 800a7b0:	f10a 0a01 	add.w	sl, sl, #1
 800a7b4:	7013      	strb	r3, [r2, #0]
 800a7b6:	e228      	b.n	800ac0a <_dtoa_r+0x902>
 800a7b8:	07f2      	lsls	r2, r6, #31
 800a7ba:	d505      	bpl.n	800a7c8 <_dtoa_r+0x4c0>
 800a7bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7c0:	f7f5 fe94 	bl	80004ec <__aeabi_dmul>
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	3501      	adds	r5, #1
 800a7c8:	1076      	asrs	r6, r6, #1
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	e76e      	b.n	800a6ac <_dtoa_r+0x3a4>
 800a7ce:	2502      	movs	r5, #2
 800a7d0:	e771      	b.n	800a6b6 <_dtoa_r+0x3ae>
 800a7d2:	4657      	mov	r7, sl
 800a7d4:	4646      	mov	r6, r8
 800a7d6:	e790      	b.n	800a6fa <_dtoa_r+0x3f2>
 800a7d8:	4b4d      	ldr	r3, [pc, #308]	; (800a910 <_dtoa_r+0x608>)
 800a7da:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a7de:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a7e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d048      	beq.n	800a87a <_dtoa_r+0x572>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	2000      	movs	r0, #0
 800a7ee:	494e      	ldr	r1, [pc, #312]	; (800a928 <_dtoa_r+0x620>)
 800a7f0:	f7f5 ffa6 	bl	8000740 <__aeabi_ddiv>
 800a7f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a7f8:	f7f5 fcc0 	bl	800017c <__aeabi_dsub>
 800a7fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a800:	9d06      	ldr	r5, [sp, #24]
 800a802:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a806:	f7f6 f921 	bl	8000a4c <__aeabi_d2iz>
 800a80a:	9011      	str	r0, [sp, #68]	; 0x44
 800a80c:	f7f5 fe04 	bl	8000418 <__aeabi_i2d>
 800a810:	4602      	mov	r2, r0
 800a812:	460b      	mov	r3, r1
 800a814:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a818:	f7f5 fcb0 	bl	800017c <__aeabi_dsub>
 800a81c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a81e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a822:	3330      	adds	r3, #48	; 0x30
 800a824:	f805 3b01 	strb.w	r3, [r5], #1
 800a828:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a82c:	f7f6 f8d0 	bl	80009d0 <__aeabi_dcmplt>
 800a830:	2800      	cmp	r0, #0
 800a832:	d163      	bne.n	800a8fc <_dtoa_r+0x5f4>
 800a834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a838:	2000      	movs	r0, #0
 800a83a:	4937      	ldr	r1, [pc, #220]	; (800a918 <_dtoa_r+0x610>)
 800a83c:	f7f5 fc9e 	bl	800017c <__aeabi_dsub>
 800a840:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a844:	f7f6 f8c4 	bl	80009d0 <__aeabi_dcmplt>
 800a848:	2800      	cmp	r0, #0
 800a84a:	f040 80b5 	bne.w	800a9b8 <_dtoa_r+0x6b0>
 800a84e:	9b06      	ldr	r3, [sp, #24]
 800a850:	1aeb      	subs	r3, r5, r3
 800a852:	429e      	cmp	r6, r3
 800a854:	f77f af7c 	ble.w	800a750 <_dtoa_r+0x448>
 800a858:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a85c:	2200      	movs	r2, #0
 800a85e:	4b2f      	ldr	r3, [pc, #188]	; (800a91c <_dtoa_r+0x614>)
 800a860:	f7f5 fe44 	bl	80004ec <__aeabi_dmul>
 800a864:	2200      	movs	r2, #0
 800a866:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a86a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a86e:	4b2b      	ldr	r3, [pc, #172]	; (800a91c <_dtoa_r+0x614>)
 800a870:	f7f5 fe3c 	bl	80004ec <__aeabi_dmul>
 800a874:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a878:	e7c3      	b.n	800a802 <_dtoa_r+0x4fa>
 800a87a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a87e:	f7f5 fe35 	bl	80004ec <__aeabi_dmul>
 800a882:	9b06      	ldr	r3, [sp, #24]
 800a884:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a888:	199d      	adds	r5, r3, r6
 800a88a:	461e      	mov	r6, r3
 800a88c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a890:	f7f6 f8dc 	bl	8000a4c <__aeabi_d2iz>
 800a894:	9011      	str	r0, [sp, #68]	; 0x44
 800a896:	f7f5 fdbf 	bl	8000418 <__aeabi_i2d>
 800a89a:	4602      	mov	r2, r0
 800a89c:	460b      	mov	r3, r1
 800a89e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8a2:	f7f5 fc6b 	bl	800017c <__aeabi_dsub>
 800a8a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a8a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8ac:	3330      	adds	r3, #48	; 0x30
 800a8ae:	f806 3b01 	strb.w	r3, [r6], #1
 800a8b2:	42ae      	cmp	r6, r5
 800a8b4:	f04f 0200 	mov.w	r2, #0
 800a8b8:	d124      	bne.n	800a904 <_dtoa_r+0x5fc>
 800a8ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a8be:	4b1a      	ldr	r3, [pc, #104]	; (800a928 <_dtoa_r+0x620>)
 800a8c0:	f7f5 fc5e 	bl	8000180 <__adddf3>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8cc:	f7f6 f89e 	bl	8000a0c <__aeabi_dcmpgt>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d171      	bne.n	800a9b8 <_dtoa_r+0x6b0>
 800a8d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a8d8:	2000      	movs	r0, #0
 800a8da:	4913      	ldr	r1, [pc, #76]	; (800a928 <_dtoa_r+0x620>)
 800a8dc:	f7f5 fc4e 	bl	800017c <__aeabi_dsub>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8e8:	f7f6 f872 	bl	80009d0 <__aeabi_dcmplt>
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	f43f af2f 	beq.w	800a750 <_dtoa_r+0x448>
 800a8f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a8f6:	1e6a      	subs	r2, r5, #1
 800a8f8:	2b30      	cmp	r3, #48	; 0x30
 800a8fa:	d001      	beq.n	800a900 <_dtoa_r+0x5f8>
 800a8fc:	46ba      	mov	sl, r7
 800a8fe:	e04a      	b.n	800a996 <_dtoa_r+0x68e>
 800a900:	4615      	mov	r5, r2
 800a902:	e7f6      	b.n	800a8f2 <_dtoa_r+0x5ea>
 800a904:	4b05      	ldr	r3, [pc, #20]	; (800a91c <_dtoa_r+0x614>)
 800a906:	f7f5 fdf1 	bl	80004ec <__aeabi_dmul>
 800a90a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a90e:	e7bd      	b.n	800a88c <_dtoa_r+0x584>
 800a910:	0800b8d8 	.word	0x0800b8d8
 800a914:	0800b8b0 	.word	0x0800b8b0
 800a918:	3ff00000 	.word	0x3ff00000
 800a91c:	40240000 	.word	0x40240000
 800a920:	401c0000 	.word	0x401c0000
 800a924:	40140000 	.word	0x40140000
 800a928:	3fe00000 	.word	0x3fe00000
 800a92c:	9d06      	ldr	r5, [sp, #24]
 800a92e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a932:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a936:	4630      	mov	r0, r6
 800a938:	4639      	mov	r1, r7
 800a93a:	f7f5 ff01 	bl	8000740 <__aeabi_ddiv>
 800a93e:	f7f6 f885 	bl	8000a4c <__aeabi_d2iz>
 800a942:	4681      	mov	r9, r0
 800a944:	f7f5 fd68 	bl	8000418 <__aeabi_i2d>
 800a948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a94c:	f7f5 fdce 	bl	80004ec <__aeabi_dmul>
 800a950:	4602      	mov	r2, r0
 800a952:	460b      	mov	r3, r1
 800a954:	4630      	mov	r0, r6
 800a956:	4639      	mov	r1, r7
 800a958:	f7f5 fc10 	bl	800017c <__aeabi_dsub>
 800a95c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800a960:	f805 6b01 	strb.w	r6, [r5], #1
 800a964:	9e06      	ldr	r6, [sp, #24]
 800a966:	4602      	mov	r2, r0
 800a968:	1bae      	subs	r6, r5, r6
 800a96a:	45b0      	cmp	r8, r6
 800a96c:	460b      	mov	r3, r1
 800a96e:	d135      	bne.n	800a9dc <_dtoa_r+0x6d4>
 800a970:	f7f5 fc06 	bl	8000180 <__adddf3>
 800a974:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a978:	4606      	mov	r6, r0
 800a97a:	460f      	mov	r7, r1
 800a97c:	f7f6 f846 	bl	8000a0c <__aeabi_dcmpgt>
 800a980:	b9c8      	cbnz	r0, 800a9b6 <_dtoa_r+0x6ae>
 800a982:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a986:	4630      	mov	r0, r6
 800a988:	4639      	mov	r1, r7
 800a98a:	f7f6 f817 	bl	80009bc <__aeabi_dcmpeq>
 800a98e:	b110      	cbz	r0, 800a996 <_dtoa_r+0x68e>
 800a990:	f019 0f01 	tst.w	r9, #1
 800a994:	d10f      	bne.n	800a9b6 <_dtoa_r+0x6ae>
 800a996:	4659      	mov	r1, fp
 800a998:	4620      	mov	r0, r4
 800a99a:	f000 fabf 	bl	800af1c <_Bfree>
 800a99e:	2300      	movs	r3, #0
 800a9a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a9a2:	702b      	strb	r3, [r5, #0]
 800a9a4:	f10a 0301 	add.w	r3, sl, #1
 800a9a8:	6013      	str	r3, [r2, #0]
 800a9aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f43f acf3 	beq.w	800a398 <_dtoa_r+0x90>
 800a9b2:	601d      	str	r5, [r3, #0]
 800a9b4:	e4f0      	b.n	800a398 <_dtoa_r+0x90>
 800a9b6:	4657      	mov	r7, sl
 800a9b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a9bc:	1e6b      	subs	r3, r5, #1
 800a9be:	2a39      	cmp	r2, #57	; 0x39
 800a9c0:	d106      	bne.n	800a9d0 <_dtoa_r+0x6c8>
 800a9c2:	9a06      	ldr	r2, [sp, #24]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d107      	bne.n	800a9d8 <_dtoa_r+0x6d0>
 800a9c8:	2330      	movs	r3, #48	; 0x30
 800a9ca:	7013      	strb	r3, [r2, #0]
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	3701      	adds	r7, #1
 800a9d0:	781a      	ldrb	r2, [r3, #0]
 800a9d2:	3201      	adds	r2, #1
 800a9d4:	701a      	strb	r2, [r3, #0]
 800a9d6:	e791      	b.n	800a8fc <_dtoa_r+0x5f4>
 800a9d8:	461d      	mov	r5, r3
 800a9da:	e7ed      	b.n	800a9b8 <_dtoa_r+0x6b0>
 800a9dc:	2200      	movs	r2, #0
 800a9de:	4b99      	ldr	r3, [pc, #612]	; (800ac44 <_dtoa_r+0x93c>)
 800a9e0:	f7f5 fd84 	bl	80004ec <__aeabi_dmul>
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	4606      	mov	r6, r0
 800a9ea:	460f      	mov	r7, r1
 800a9ec:	f7f5 ffe6 	bl	80009bc <__aeabi_dcmpeq>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	d09e      	beq.n	800a932 <_dtoa_r+0x62a>
 800a9f4:	e7cf      	b.n	800a996 <_dtoa_r+0x68e>
 800a9f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9f8:	2a00      	cmp	r2, #0
 800a9fa:	f000 8088 	beq.w	800ab0e <_dtoa_r+0x806>
 800a9fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800aa00:	2a01      	cmp	r2, #1
 800aa02:	dc6d      	bgt.n	800aae0 <_dtoa_r+0x7d8>
 800aa04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa06:	2a00      	cmp	r2, #0
 800aa08:	d066      	beq.n	800aad8 <_dtoa_r+0x7d0>
 800aa0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa0e:	464d      	mov	r5, r9
 800aa10:	9e08      	ldr	r6, [sp, #32]
 800aa12:	9a07      	ldr	r2, [sp, #28]
 800aa14:	2101      	movs	r1, #1
 800aa16:	441a      	add	r2, r3
 800aa18:	4620      	mov	r0, r4
 800aa1a:	4499      	add	r9, r3
 800aa1c:	9207      	str	r2, [sp, #28]
 800aa1e:	f000 fb1d 	bl	800b05c <__i2b>
 800aa22:	4607      	mov	r7, r0
 800aa24:	2d00      	cmp	r5, #0
 800aa26:	dd0b      	ble.n	800aa40 <_dtoa_r+0x738>
 800aa28:	9b07      	ldr	r3, [sp, #28]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	dd08      	ble.n	800aa40 <_dtoa_r+0x738>
 800aa2e:	42ab      	cmp	r3, r5
 800aa30:	bfa8      	it	ge
 800aa32:	462b      	movge	r3, r5
 800aa34:	9a07      	ldr	r2, [sp, #28]
 800aa36:	eba9 0903 	sub.w	r9, r9, r3
 800aa3a:	1aed      	subs	r5, r5, r3
 800aa3c:	1ad3      	subs	r3, r2, r3
 800aa3e:	9307      	str	r3, [sp, #28]
 800aa40:	9b08      	ldr	r3, [sp, #32]
 800aa42:	b1eb      	cbz	r3, 800aa80 <_dtoa_r+0x778>
 800aa44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d065      	beq.n	800ab16 <_dtoa_r+0x80e>
 800aa4a:	b18e      	cbz	r6, 800aa70 <_dtoa_r+0x768>
 800aa4c:	4639      	mov	r1, r7
 800aa4e:	4632      	mov	r2, r6
 800aa50:	4620      	mov	r0, r4
 800aa52:	f000 fba1 	bl	800b198 <__pow5mult>
 800aa56:	465a      	mov	r2, fp
 800aa58:	4601      	mov	r1, r0
 800aa5a:	4607      	mov	r7, r0
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	f000 fb06 	bl	800b06e <__multiply>
 800aa62:	4659      	mov	r1, fp
 800aa64:	900a      	str	r0, [sp, #40]	; 0x28
 800aa66:	4620      	mov	r0, r4
 800aa68:	f000 fa58 	bl	800af1c <_Bfree>
 800aa6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa6e:	469b      	mov	fp, r3
 800aa70:	9b08      	ldr	r3, [sp, #32]
 800aa72:	1b9a      	subs	r2, r3, r6
 800aa74:	d004      	beq.n	800aa80 <_dtoa_r+0x778>
 800aa76:	4659      	mov	r1, fp
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f000 fb8d 	bl	800b198 <__pow5mult>
 800aa7e:	4683      	mov	fp, r0
 800aa80:	2101      	movs	r1, #1
 800aa82:	4620      	mov	r0, r4
 800aa84:	f000 faea 	bl	800b05c <__i2b>
 800aa88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa8a:	4606      	mov	r6, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f000 81c6 	beq.w	800ae1e <_dtoa_r+0xb16>
 800aa92:	461a      	mov	r2, r3
 800aa94:	4601      	mov	r1, r0
 800aa96:	4620      	mov	r0, r4
 800aa98:	f000 fb7e 	bl	800b198 <__pow5mult>
 800aa9c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800aa9e:	4606      	mov	r6, r0
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	dc3e      	bgt.n	800ab22 <_dtoa_r+0x81a>
 800aaa4:	9b02      	ldr	r3, [sp, #8]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d137      	bne.n	800ab1a <_dtoa_r+0x812>
 800aaaa:	9b03      	ldr	r3, [sp, #12]
 800aaac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d134      	bne.n	800ab1e <_dtoa_r+0x816>
 800aab4:	9b03      	ldr	r3, [sp, #12]
 800aab6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aaba:	0d1b      	lsrs	r3, r3, #20
 800aabc:	051b      	lsls	r3, r3, #20
 800aabe:	b12b      	cbz	r3, 800aacc <_dtoa_r+0x7c4>
 800aac0:	9b07      	ldr	r3, [sp, #28]
 800aac2:	f109 0901 	add.w	r9, r9, #1
 800aac6:	3301      	adds	r3, #1
 800aac8:	9307      	str	r3, [sp, #28]
 800aaca:	2301      	movs	r3, #1
 800aacc:	9308      	str	r3, [sp, #32]
 800aace:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d128      	bne.n	800ab26 <_dtoa_r+0x81e>
 800aad4:	2001      	movs	r0, #1
 800aad6:	e02e      	b.n	800ab36 <_dtoa_r+0x82e>
 800aad8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aada:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aade:	e796      	b.n	800aa0e <_dtoa_r+0x706>
 800aae0:	9b08      	ldr	r3, [sp, #32]
 800aae2:	f108 36ff 	add.w	r6, r8, #4294967295
 800aae6:	42b3      	cmp	r3, r6
 800aae8:	bfb7      	itett	lt
 800aaea:	9b08      	ldrlt	r3, [sp, #32]
 800aaec:	1b9e      	subge	r6, r3, r6
 800aaee:	1af2      	sublt	r2, r6, r3
 800aaf0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800aaf2:	bfbf      	itttt	lt
 800aaf4:	9608      	strlt	r6, [sp, #32]
 800aaf6:	189b      	addlt	r3, r3, r2
 800aaf8:	930c      	strlt	r3, [sp, #48]	; 0x30
 800aafa:	2600      	movlt	r6, #0
 800aafc:	f1b8 0f00 	cmp.w	r8, #0
 800ab00:	bfb9      	ittee	lt
 800ab02:	eba9 0508 	sublt.w	r5, r9, r8
 800ab06:	2300      	movlt	r3, #0
 800ab08:	464d      	movge	r5, r9
 800ab0a:	4643      	movge	r3, r8
 800ab0c:	e781      	b.n	800aa12 <_dtoa_r+0x70a>
 800ab0e:	9e08      	ldr	r6, [sp, #32]
 800ab10:	464d      	mov	r5, r9
 800ab12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ab14:	e786      	b.n	800aa24 <_dtoa_r+0x71c>
 800ab16:	9a08      	ldr	r2, [sp, #32]
 800ab18:	e7ad      	b.n	800aa76 <_dtoa_r+0x76e>
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	e7d6      	b.n	800aacc <_dtoa_r+0x7c4>
 800ab1e:	9b02      	ldr	r3, [sp, #8]
 800ab20:	e7d4      	b.n	800aacc <_dtoa_r+0x7c4>
 800ab22:	2300      	movs	r3, #0
 800ab24:	9308      	str	r3, [sp, #32]
 800ab26:	6933      	ldr	r3, [r6, #16]
 800ab28:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ab2c:	6918      	ldr	r0, [r3, #16]
 800ab2e:	f000 fa47 	bl	800afc0 <__hi0bits>
 800ab32:	f1c0 0020 	rsb	r0, r0, #32
 800ab36:	9b07      	ldr	r3, [sp, #28]
 800ab38:	4418      	add	r0, r3
 800ab3a:	f010 001f 	ands.w	r0, r0, #31
 800ab3e:	d047      	beq.n	800abd0 <_dtoa_r+0x8c8>
 800ab40:	f1c0 0320 	rsb	r3, r0, #32
 800ab44:	2b04      	cmp	r3, #4
 800ab46:	dd3b      	ble.n	800abc0 <_dtoa_r+0x8b8>
 800ab48:	9b07      	ldr	r3, [sp, #28]
 800ab4a:	f1c0 001c 	rsb	r0, r0, #28
 800ab4e:	4481      	add	r9, r0
 800ab50:	4405      	add	r5, r0
 800ab52:	4403      	add	r3, r0
 800ab54:	9307      	str	r3, [sp, #28]
 800ab56:	f1b9 0f00 	cmp.w	r9, #0
 800ab5a:	dd05      	ble.n	800ab68 <_dtoa_r+0x860>
 800ab5c:	4659      	mov	r1, fp
 800ab5e:	464a      	mov	r2, r9
 800ab60:	4620      	mov	r0, r4
 800ab62:	f000 fb67 	bl	800b234 <__lshift>
 800ab66:	4683      	mov	fp, r0
 800ab68:	9b07      	ldr	r3, [sp, #28]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	dd05      	ble.n	800ab7a <_dtoa_r+0x872>
 800ab6e:	4631      	mov	r1, r6
 800ab70:	461a      	mov	r2, r3
 800ab72:	4620      	mov	r0, r4
 800ab74:	f000 fb5e 	bl	800b234 <__lshift>
 800ab78:	4606      	mov	r6, r0
 800ab7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab7c:	b353      	cbz	r3, 800abd4 <_dtoa_r+0x8cc>
 800ab7e:	4631      	mov	r1, r6
 800ab80:	4658      	mov	r0, fp
 800ab82:	f000 fbab 	bl	800b2dc <__mcmp>
 800ab86:	2800      	cmp	r0, #0
 800ab88:	da24      	bge.n	800abd4 <_dtoa_r+0x8cc>
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	4659      	mov	r1, fp
 800ab8e:	220a      	movs	r2, #10
 800ab90:	4620      	mov	r0, r4
 800ab92:	f000 f9da 	bl	800af4a <__multadd>
 800ab96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab98:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab9c:	4683      	mov	fp, r0
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f000 8144 	beq.w	800ae2c <_dtoa_r+0xb24>
 800aba4:	2300      	movs	r3, #0
 800aba6:	4639      	mov	r1, r7
 800aba8:	220a      	movs	r2, #10
 800abaa:	4620      	mov	r0, r4
 800abac:	f000 f9cd 	bl	800af4a <__multadd>
 800abb0:	9b04      	ldr	r3, [sp, #16]
 800abb2:	4607      	mov	r7, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	dc4d      	bgt.n	800ac54 <_dtoa_r+0x94c>
 800abb8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800abba:	2b02      	cmp	r3, #2
 800abbc:	dd4a      	ble.n	800ac54 <_dtoa_r+0x94c>
 800abbe:	e011      	b.n	800abe4 <_dtoa_r+0x8dc>
 800abc0:	d0c9      	beq.n	800ab56 <_dtoa_r+0x84e>
 800abc2:	9a07      	ldr	r2, [sp, #28]
 800abc4:	331c      	adds	r3, #28
 800abc6:	441a      	add	r2, r3
 800abc8:	4499      	add	r9, r3
 800abca:	441d      	add	r5, r3
 800abcc:	4613      	mov	r3, r2
 800abce:	e7c1      	b.n	800ab54 <_dtoa_r+0x84c>
 800abd0:	4603      	mov	r3, r0
 800abd2:	e7f6      	b.n	800abc2 <_dtoa_r+0x8ba>
 800abd4:	f1b8 0f00 	cmp.w	r8, #0
 800abd8:	dc36      	bgt.n	800ac48 <_dtoa_r+0x940>
 800abda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800abdc:	2b02      	cmp	r3, #2
 800abde:	dd33      	ble.n	800ac48 <_dtoa_r+0x940>
 800abe0:	f8cd 8010 	str.w	r8, [sp, #16]
 800abe4:	9b04      	ldr	r3, [sp, #16]
 800abe6:	b963      	cbnz	r3, 800ac02 <_dtoa_r+0x8fa>
 800abe8:	4631      	mov	r1, r6
 800abea:	2205      	movs	r2, #5
 800abec:	4620      	mov	r0, r4
 800abee:	f000 f9ac 	bl	800af4a <__multadd>
 800abf2:	4601      	mov	r1, r0
 800abf4:	4606      	mov	r6, r0
 800abf6:	4658      	mov	r0, fp
 800abf8:	f000 fb70 	bl	800b2dc <__mcmp>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	f73f add3 	bgt.w	800a7a8 <_dtoa_r+0x4a0>
 800ac02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ac04:	9d06      	ldr	r5, [sp, #24]
 800ac06:	ea6f 0a03 	mvn.w	sl, r3
 800ac0a:	f04f 0900 	mov.w	r9, #0
 800ac0e:	4631      	mov	r1, r6
 800ac10:	4620      	mov	r0, r4
 800ac12:	f000 f983 	bl	800af1c <_Bfree>
 800ac16:	2f00      	cmp	r7, #0
 800ac18:	f43f aebd 	beq.w	800a996 <_dtoa_r+0x68e>
 800ac1c:	f1b9 0f00 	cmp.w	r9, #0
 800ac20:	d005      	beq.n	800ac2e <_dtoa_r+0x926>
 800ac22:	45b9      	cmp	r9, r7
 800ac24:	d003      	beq.n	800ac2e <_dtoa_r+0x926>
 800ac26:	4649      	mov	r1, r9
 800ac28:	4620      	mov	r0, r4
 800ac2a:	f000 f977 	bl	800af1c <_Bfree>
 800ac2e:	4639      	mov	r1, r7
 800ac30:	4620      	mov	r0, r4
 800ac32:	f000 f973 	bl	800af1c <_Bfree>
 800ac36:	e6ae      	b.n	800a996 <_dtoa_r+0x68e>
 800ac38:	2600      	movs	r6, #0
 800ac3a:	4637      	mov	r7, r6
 800ac3c:	e7e1      	b.n	800ac02 <_dtoa_r+0x8fa>
 800ac3e:	46ba      	mov	sl, r7
 800ac40:	4637      	mov	r7, r6
 800ac42:	e5b1      	b.n	800a7a8 <_dtoa_r+0x4a0>
 800ac44:	40240000 	.word	0x40240000
 800ac48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac4a:	f8cd 8010 	str.w	r8, [sp, #16]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f000 80f3 	beq.w	800ae3a <_dtoa_r+0xb32>
 800ac54:	2d00      	cmp	r5, #0
 800ac56:	dd05      	ble.n	800ac64 <_dtoa_r+0x95c>
 800ac58:	4639      	mov	r1, r7
 800ac5a:	462a      	mov	r2, r5
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	f000 fae9 	bl	800b234 <__lshift>
 800ac62:	4607      	mov	r7, r0
 800ac64:	9b08      	ldr	r3, [sp, #32]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d04c      	beq.n	800ad04 <_dtoa_r+0x9fc>
 800ac6a:	6879      	ldr	r1, [r7, #4]
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	f000 f921 	bl	800aeb4 <_Balloc>
 800ac72:	4605      	mov	r5, r0
 800ac74:	693a      	ldr	r2, [r7, #16]
 800ac76:	f107 010c 	add.w	r1, r7, #12
 800ac7a:	3202      	adds	r2, #2
 800ac7c:	0092      	lsls	r2, r2, #2
 800ac7e:	300c      	adds	r0, #12
 800ac80:	f7fe fe4f 	bl	8009922 <memcpy>
 800ac84:	2201      	movs	r2, #1
 800ac86:	4629      	mov	r1, r5
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f000 fad3 	bl	800b234 <__lshift>
 800ac8e:	46b9      	mov	r9, r7
 800ac90:	4607      	mov	r7, r0
 800ac92:	9b06      	ldr	r3, [sp, #24]
 800ac94:	9307      	str	r3, [sp, #28]
 800ac96:	9b02      	ldr	r3, [sp, #8]
 800ac98:	f003 0301 	and.w	r3, r3, #1
 800ac9c:	9308      	str	r3, [sp, #32]
 800ac9e:	4631      	mov	r1, r6
 800aca0:	4658      	mov	r0, fp
 800aca2:	f7ff faa3 	bl	800a1ec <quorem>
 800aca6:	4649      	mov	r1, r9
 800aca8:	4605      	mov	r5, r0
 800acaa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800acae:	4658      	mov	r0, fp
 800acb0:	f000 fb14 	bl	800b2dc <__mcmp>
 800acb4:	463a      	mov	r2, r7
 800acb6:	9002      	str	r0, [sp, #8]
 800acb8:	4631      	mov	r1, r6
 800acba:	4620      	mov	r0, r4
 800acbc:	f000 fb28 	bl	800b310 <__mdiff>
 800acc0:	68c3      	ldr	r3, [r0, #12]
 800acc2:	4602      	mov	r2, r0
 800acc4:	bb03      	cbnz	r3, 800ad08 <_dtoa_r+0xa00>
 800acc6:	4601      	mov	r1, r0
 800acc8:	9009      	str	r0, [sp, #36]	; 0x24
 800acca:	4658      	mov	r0, fp
 800accc:	f000 fb06 	bl	800b2dc <__mcmp>
 800acd0:	4603      	mov	r3, r0
 800acd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acd4:	4611      	mov	r1, r2
 800acd6:	4620      	mov	r0, r4
 800acd8:	9309      	str	r3, [sp, #36]	; 0x24
 800acda:	f000 f91f 	bl	800af1c <_Bfree>
 800acde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ace0:	b9a3      	cbnz	r3, 800ad0c <_dtoa_r+0xa04>
 800ace2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ace4:	b992      	cbnz	r2, 800ad0c <_dtoa_r+0xa04>
 800ace6:	9a08      	ldr	r2, [sp, #32]
 800ace8:	b982      	cbnz	r2, 800ad0c <_dtoa_r+0xa04>
 800acea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800acee:	d029      	beq.n	800ad44 <_dtoa_r+0xa3c>
 800acf0:	9b02      	ldr	r3, [sp, #8]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	dd01      	ble.n	800acfa <_dtoa_r+0x9f2>
 800acf6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800acfa:	9b07      	ldr	r3, [sp, #28]
 800acfc:	1c5d      	adds	r5, r3, #1
 800acfe:	f883 8000 	strb.w	r8, [r3]
 800ad02:	e784      	b.n	800ac0e <_dtoa_r+0x906>
 800ad04:	4638      	mov	r0, r7
 800ad06:	e7c2      	b.n	800ac8e <_dtoa_r+0x986>
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e7e3      	b.n	800acd4 <_dtoa_r+0x9cc>
 800ad0c:	9a02      	ldr	r2, [sp, #8]
 800ad0e:	2a00      	cmp	r2, #0
 800ad10:	db04      	blt.n	800ad1c <_dtoa_r+0xa14>
 800ad12:	d123      	bne.n	800ad5c <_dtoa_r+0xa54>
 800ad14:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ad16:	bb0a      	cbnz	r2, 800ad5c <_dtoa_r+0xa54>
 800ad18:	9a08      	ldr	r2, [sp, #32]
 800ad1a:	b9fa      	cbnz	r2, 800ad5c <_dtoa_r+0xa54>
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	ddec      	ble.n	800acfa <_dtoa_r+0x9f2>
 800ad20:	4659      	mov	r1, fp
 800ad22:	2201      	movs	r2, #1
 800ad24:	4620      	mov	r0, r4
 800ad26:	f000 fa85 	bl	800b234 <__lshift>
 800ad2a:	4631      	mov	r1, r6
 800ad2c:	4683      	mov	fp, r0
 800ad2e:	f000 fad5 	bl	800b2dc <__mcmp>
 800ad32:	2800      	cmp	r0, #0
 800ad34:	dc03      	bgt.n	800ad3e <_dtoa_r+0xa36>
 800ad36:	d1e0      	bne.n	800acfa <_dtoa_r+0x9f2>
 800ad38:	f018 0f01 	tst.w	r8, #1
 800ad3c:	d0dd      	beq.n	800acfa <_dtoa_r+0x9f2>
 800ad3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ad42:	d1d8      	bne.n	800acf6 <_dtoa_r+0x9ee>
 800ad44:	9b07      	ldr	r3, [sp, #28]
 800ad46:	9a07      	ldr	r2, [sp, #28]
 800ad48:	1c5d      	adds	r5, r3, #1
 800ad4a:	2339      	movs	r3, #57	; 0x39
 800ad4c:	7013      	strb	r3, [r2, #0]
 800ad4e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad52:	1e6a      	subs	r2, r5, #1
 800ad54:	2b39      	cmp	r3, #57	; 0x39
 800ad56:	d04d      	beq.n	800adf4 <_dtoa_r+0xaec>
 800ad58:	3301      	adds	r3, #1
 800ad5a:	e052      	b.n	800ae02 <_dtoa_r+0xafa>
 800ad5c:	9a07      	ldr	r2, [sp, #28]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f102 0501 	add.w	r5, r2, #1
 800ad64:	dd06      	ble.n	800ad74 <_dtoa_r+0xa6c>
 800ad66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ad6a:	d0eb      	beq.n	800ad44 <_dtoa_r+0xa3c>
 800ad6c:	f108 0801 	add.w	r8, r8, #1
 800ad70:	9b07      	ldr	r3, [sp, #28]
 800ad72:	e7c4      	b.n	800acfe <_dtoa_r+0x9f6>
 800ad74:	9b06      	ldr	r3, [sp, #24]
 800ad76:	9a04      	ldr	r2, [sp, #16]
 800ad78:	1aeb      	subs	r3, r5, r3
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ad80:	d021      	beq.n	800adc6 <_dtoa_r+0xabe>
 800ad82:	4659      	mov	r1, fp
 800ad84:	2300      	movs	r3, #0
 800ad86:	220a      	movs	r2, #10
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f000 f8de 	bl	800af4a <__multadd>
 800ad8e:	45b9      	cmp	r9, r7
 800ad90:	4683      	mov	fp, r0
 800ad92:	f04f 0300 	mov.w	r3, #0
 800ad96:	f04f 020a 	mov.w	r2, #10
 800ad9a:	4649      	mov	r1, r9
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	d105      	bne.n	800adac <_dtoa_r+0xaa4>
 800ada0:	f000 f8d3 	bl	800af4a <__multadd>
 800ada4:	4681      	mov	r9, r0
 800ada6:	4607      	mov	r7, r0
 800ada8:	9507      	str	r5, [sp, #28]
 800adaa:	e778      	b.n	800ac9e <_dtoa_r+0x996>
 800adac:	f000 f8cd 	bl	800af4a <__multadd>
 800adb0:	4639      	mov	r1, r7
 800adb2:	4681      	mov	r9, r0
 800adb4:	2300      	movs	r3, #0
 800adb6:	220a      	movs	r2, #10
 800adb8:	4620      	mov	r0, r4
 800adba:	f000 f8c6 	bl	800af4a <__multadd>
 800adbe:	4607      	mov	r7, r0
 800adc0:	e7f2      	b.n	800ada8 <_dtoa_r+0xaa0>
 800adc2:	f04f 0900 	mov.w	r9, #0
 800adc6:	4659      	mov	r1, fp
 800adc8:	2201      	movs	r2, #1
 800adca:	4620      	mov	r0, r4
 800adcc:	f000 fa32 	bl	800b234 <__lshift>
 800add0:	4631      	mov	r1, r6
 800add2:	4683      	mov	fp, r0
 800add4:	f000 fa82 	bl	800b2dc <__mcmp>
 800add8:	2800      	cmp	r0, #0
 800adda:	dcb8      	bgt.n	800ad4e <_dtoa_r+0xa46>
 800addc:	d102      	bne.n	800ade4 <_dtoa_r+0xadc>
 800adde:	f018 0f01 	tst.w	r8, #1
 800ade2:	d1b4      	bne.n	800ad4e <_dtoa_r+0xa46>
 800ade4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ade8:	1e6a      	subs	r2, r5, #1
 800adea:	2b30      	cmp	r3, #48	; 0x30
 800adec:	f47f af0f 	bne.w	800ac0e <_dtoa_r+0x906>
 800adf0:	4615      	mov	r5, r2
 800adf2:	e7f7      	b.n	800ade4 <_dtoa_r+0xadc>
 800adf4:	9b06      	ldr	r3, [sp, #24]
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d105      	bne.n	800ae06 <_dtoa_r+0xafe>
 800adfa:	2331      	movs	r3, #49	; 0x31
 800adfc:	9a06      	ldr	r2, [sp, #24]
 800adfe:	f10a 0a01 	add.w	sl, sl, #1
 800ae02:	7013      	strb	r3, [r2, #0]
 800ae04:	e703      	b.n	800ac0e <_dtoa_r+0x906>
 800ae06:	4615      	mov	r5, r2
 800ae08:	e7a1      	b.n	800ad4e <_dtoa_r+0xa46>
 800ae0a:	4b17      	ldr	r3, [pc, #92]	; (800ae68 <_dtoa_r+0xb60>)
 800ae0c:	f7ff bae1 	b.w	800a3d2 <_dtoa_r+0xca>
 800ae10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	f47f aabb 	bne.w	800a38e <_dtoa_r+0x86>
 800ae18:	4b14      	ldr	r3, [pc, #80]	; (800ae6c <_dtoa_r+0xb64>)
 800ae1a:	f7ff bada 	b.w	800a3d2 <_dtoa_r+0xca>
 800ae1e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	f77f ae3f 	ble.w	800aaa4 <_dtoa_r+0x79c>
 800ae26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae28:	9308      	str	r3, [sp, #32]
 800ae2a:	e653      	b.n	800aad4 <_dtoa_r+0x7cc>
 800ae2c:	9b04      	ldr	r3, [sp, #16]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	dc03      	bgt.n	800ae3a <_dtoa_r+0xb32>
 800ae32:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	f73f aed5 	bgt.w	800abe4 <_dtoa_r+0x8dc>
 800ae3a:	9d06      	ldr	r5, [sp, #24]
 800ae3c:	4631      	mov	r1, r6
 800ae3e:	4658      	mov	r0, fp
 800ae40:	f7ff f9d4 	bl	800a1ec <quorem>
 800ae44:	9b06      	ldr	r3, [sp, #24]
 800ae46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ae4a:	f805 8b01 	strb.w	r8, [r5], #1
 800ae4e:	9a04      	ldr	r2, [sp, #16]
 800ae50:	1aeb      	subs	r3, r5, r3
 800ae52:	429a      	cmp	r2, r3
 800ae54:	ddb5      	ble.n	800adc2 <_dtoa_r+0xaba>
 800ae56:	4659      	mov	r1, fp
 800ae58:	2300      	movs	r3, #0
 800ae5a:	220a      	movs	r2, #10
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	f000 f874 	bl	800af4a <__multadd>
 800ae62:	4683      	mov	fp, r0
 800ae64:	e7ea      	b.n	800ae3c <_dtoa_r+0xb34>
 800ae66:	bf00      	nop
 800ae68:	0800b891 	.word	0x0800b891
 800ae6c:	0800b893 	.word	0x0800b893

0800ae70 <_localeconv_r>:
 800ae70:	4b04      	ldr	r3, [pc, #16]	; (800ae84 <_localeconv_r+0x14>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	6a18      	ldr	r0, [r3, #32]
 800ae76:	4b04      	ldr	r3, [pc, #16]	; (800ae88 <_localeconv_r+0x18>)
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	bf08      	it	eq
 800ae7c:	4618      	moveq	r0, r3
 800ae7e:	30f0      	adds	r0, #240	; 0xf0
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	20000018 	.word	0x20000018
 800ae88:	2000007c 	.word	0x2000007c

0800ae8c <__ascii_mbtowc>:
 800ae8c:	b082      	sub	sp, #8
 800ae8e:	b901      	cbnz	r1, 800ae92 <__ascii_mbtowc+0x6>
 800ae90:	a901      	add	r1, sp, #4
 800ae92:	b142      	cbz	r2, 800aea6 <__ascii_mbtowc+0x1a>
 800ae94:	b14b      	cbz	r3, 800aeaa <__ascii_mbtowc+0x1e>
 800ae96:	7813      	ldrb	r3, [r2, #0]
 800ae98:	600b      	str	r3, [r1, #0]
 800ae9a:	7812      	ldrb	r2, [r2, #0]
 800ae9c:	1c10      	adds	r0, r2, #0
 800ae9e:	bf18      	it	ne
 800aea0:	2001      	movne	r0, #1
 800aea2:	b002      	add	sp, #8
 800aea4:	4770      	bx	lr
 800aea6:	4610      	mov	r0, r2
 800aea8:	e7fb      	b.n	800aea2 <__ascii_mbtowc+0x16>
 800aeaa:	f06f 0001 	mvn.w	r0, #1
 800aeae:	e7f8      	b.n	800aea2 <__ascii_mbtowc+0x16>

0800aeb0 <__malloc_lock>:
 800aeb0:	4770      	bx	lr

0800aeb2 <__malloc_unlock>:
 800aeb2:	4770      	bx	lr

0800aeb4 <_Balloc>:
 800aeb4:	b570      	push	{r4, r5, r6, lr}
 800aeb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aeb8:	4604      	mov	r4, r0
 800aeba:	460e      	mov	r6, r1
 800aebc:	b93d      	cbnz	r5, 800aece <_Balloc+0x1a>
 800aebe:	2010      	movs	r0, #16
 800aec0:	f7fe fd02 	bl	80098c8 <malloc>
 800aec4:	6260      	str	r0, [r4, #36]	; 0x24
 800aec6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aeca:	6005      	str	r5, [r0, #0]
 800aecc:	60c5      	str	r5, [r0, #12]
 800aece:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800aed0:	68eb      	ldr	r3, [r5, #12]
 800aed2:	b183      	cbz	r3, 800aef6 <_Balloc+0x42>
 800aed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800aedc:	b9b8      	cbnz	r0, 800af0e <_Balloc+0x5a>
 800aede:	2101      	movs	r1, #1
 800aee0:	fa01 f506 	lsl.w	r5, r1, r6
 800aee4:	1d6a      	adds	r2, r5, #5
 800aee6:	0092      	lsls	r2, r2, #2
 800aee8:	4620      	mov	r0, r4
 800aeea:	f000 fabe 	bl	800b46a <_calloc_r>
 800aeee:	b160      	cbz	r0, 800af0a <_Balloc+0x56>
 800aef0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800aef4:	e00e      	b.n	800af14 <_Balloc+0x60>
 800aef6:	2221      	movs	r2, #33	; 0x21
 800aef8:	2104      	movs	r1, #4
 800aefa:	4620      	mov	r0, r4
 800aefc:	f000 fab5 	bl	800b46a <_calloc_r>
 800af00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af02:	60e8      	str	r0, [r5, #12]
 800af04:	68db      	ldr	r3, [r3, #12]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d1e4      	bne.n	800aed4 <_Balloc+0x20>
 800af0a:	2000      	movs	r0, #0
 800af0c:	bd70      	pop	{r4, r5, r6, pc}
 800af0e:	6802      	ldr	r2, [r0, #0]
 800af10:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800af14:	2300      	movs	r3, #0
 800af16:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af1a:	e7f7      	b.n	800af0c <_Balloc+0x58>

0800af1c <_Bfree>:
 800af1c:	b570      	push	{r4, r5, r6, lr}
 800af1e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800af20:	4606      	mov	r6, r0
 800af22:	460d      	mov	r5, r1
 800af24:	b93c      	cbnz	r4, 800af36 <_Bfree+0x1a>
 800af26:	2010      	movs	r0, #16
 800af28:	f7fe fcce 	bl	80098c8 <malloc>
 800af2c:	6270      	str	r0, [r6, #36]	; 0x24
 800af2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af32:	6004      	str	r4, [r0, #0]
 800af34:	60c4      	str	r4, [r0, #12]
 800af36:	b13d      	cbz	r5, 800af48 <_Bfree+0x2c>
 800af38:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800af3a:	686a      	ldr	r2, [r5, #4]
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af42:	6029      	str	r1, [r5, #0]
 800af44:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800af48:	bd70      	pop	{r4, r5, r6, pc}

0800af4a <__multadd>:
 800af4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af4e:	461f      	mov	r7, r3
 800af50:	4606      	mov	r6, r0
 800af52:	460c      	mov	r4, r1
 800af54:	2300      	movs	r3, #0
 800af56:	690d      	ldr	r5, [r1, #16]
 800af58:	f101 0c14 	add.w	ip, r1, #20
 800af5c:	f8dc 0000 	ldr.w	r0, [ip]
 800af60:	3301      	adds	r3, #1
 800af62:	b281      	uxth	r1, r0
 800af64:	fb02 7101 	mla	r1, r2, r1, r7
 800af68:	0c00      	lsrs	r0, r0, #16
 800af6a:	0c0f      	lsrs	r7, r1, #16
 800af6c:	fb02 7000 	mla	r0, r2, r0, r7
 800af70:	b289      	uxth	r1, r1
 800af72:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800af76:	429d      	cmp	r5, r3
 800af78:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800af7c:	f84c 1b04 	str.w	r1, [ip], #4
 800af80:	dcec      	bgt.n	800af5c <__multadd+0x12>
 800af82:	b1d7      	cbz	r7, 800afba <__multadd+0x70>
 800af84:	68a3      	ldr	r3, [r4, #8]
 800af86:	42ab      	cmp	r3, r5
 800af88:	dc12      	bgt.n	800afb0 <__multadd+0x66>
 800af8a:	6861      	ldr	r1, [r4, #4]
 800af8c:	4630      	mov	r0, r6
 800af8e:	3101      	adds	r1, #1
 800af90:	f7ff ff90 	bl	800aeb4 <_Balloc>
 800af94:	4680      	mov	r8, r0
 800af96:	6922      	ldr	r2, [r4, #16]
 800af98:	f104 010c 	add.w	r1, r4, #12
 800af9c:	3202      	adds	r2, #2
 800af9e:	0092      	lsls	r2, r2, #2
 800afa0:	300c      	adds	r0, #12
 800afa2:	f7fe fcbe 	bl	8009922 <memcpy>
 800afa6:	4621      	mov	r1, r4
 800afa8:	4630      	mov	r0, r6
 800afaa:	f7ff ffb7 	bl	800af1c <_Bfree>
 800afae:	4644      	mov	r4, r8
 800afb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800afb4:	3501      	adds	r5, #1
 800afb6:	615f      	str	r7, [r3, #20]
 800afb8:	6125      	str	r5, [r4, #16]
 800afba:	4620      	mov	r0, r4
 800afbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800afc0 <__hi0bits>:
 800afc0:	0c02      	lsrs	r2, r0, #16
 800afc2:	0412      	lsls	r2, r2, #16
 800afc4:	4603      	mov	r3, r0
 800afc6:	b9b2      	cbnz	r2, 800aff6 <__hi0bits+0x36>
 800afc8:	0403      	lsls	r3, r0, #16
 800afca:	2010      	movs	r0, #16
 800afcc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800afd0:	bf04      	itt	eq
 800afd2:	021b      	lsleq	r3, r3, #8
 800afd4:	3008      	addeq	r0, #8
 800afd6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800afda:	bf04      	itt	eq
 800afdc:	011b      	lsleq	r3, r3, #4
 800afde:	3004      	addeq	r0, #4
 800afe0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800afe4:	bf04      	itt	eq
 800afe6:	009b      	lsleq	r3, r3, #2
 800afe8:	3002      	addeq	r0, #2
 800afea:	2b00      	cmp	r3, #0
 800afec:	db06      	blt.n	800affc <__hi0bits+0x3c>
 800afee:	005b      	lsls	r3, r3, #1
 800aff0:	d503      	bpl.n	800affa <__hi0bits+0x3a>
 800aff2:	3001      	adds	r0, #1
 800aff4:	4770      	bx	lr
 800aff6:	2000      	movs	r0, #0
 800aff8:	e7e8      	b.n	800afcc <__hi0bits+0xc>
 800affa:	2020      	movs	r0, #32
 800affc:	4770      	bx	lr

0800affe <__lo0bits>:
 800affe:	6803      	ldr	r3, [r0, #0]
 800b000:	4601      	mov	r1, r0
 800b002:	f013 0207 	ands.w	r2, r3, #7
 800b006:	d00b      	beq.n	800b020 <__lo0bits+0x22>
 800b008:	07da      	lsls	r2, r3, #31
 800b00a:	d423      	bmi.n	800b054 <__lo0bits+0x56>
 800b00c:	0798      	lsls	r0, r3, #30
 800b00e:	bf49      	itett	mi
 800b010:	085b      	lsrmi	r3, r3, #1
 800b012:	089b      	lsrpl	r3, r3, #2
 800b014:	2001      	movmi	r0, #1
 800b016:	600b      	strmi	r3, [r1, #0]
 800b018:	bf5c      	itt	pl
 800b01a:	600b      	strpl	r3, [r1, #0]
 800b01c:	2002      	movpl	r0, #2
 800b01e:	4770      	bx	lr
 800b020:	b298      	uxth	r0, r3
 800b022:	b9a8      	cbnz	r0, 800b050 <__lo0bits+0x52>
 800b024:	2010      	movs	r0, #16
 800b026:	0c1b      	lsrs	r3, r3, #16
 800b028:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b02c:	bf04      	itt	eq
 800b02e:	0a1b      	lsreq	r3, r3, #8
 800b030:	3008      	addeq	r0, #8
 800b032:	071a      	lsls	r2, r3, #28
 800b034:	bf04      	itt	eq
 800b036:	091b      	lsreq	r3, r3, #4
 800b038:	3004      	addeq	r0, #4
 800b03a:	079a      	lsls	r2, r3, #30
 800b03c:	bf04      	itt	eq
 800b03e:	089b      	lsreq	r3, r3, #2
 800b040:	3002      	addeq	r0, #2
 800b042:	07da      	lsls	r2, r3, #31
 800b044:	d402      	bmi.n	800b04c <__lo0bits+0x4e>
 800b046:	085b      	lsrs	r3, r3, #1
 800b048:	d006      	beq.n	800b058 <__lo0bits+0x5a>
 800b04a:	3001      	adds	r0, #1
 800b04c:	600b      	str	r3, [r1, #0]
 800b04e:	4770      	bx	lr
 800b050:	4610      	mov	r0, r2
 800b052:	e7e9      	b.n	800b028 <__lo0bits+0x2a>
 800b054:	2000      	movs	r0, #0
 800b056:	4770      	bx	lr
 800b058:	2020      	movs	r0, #32
 800b05a:	4770      	bx	lr

0800b05c <__i2b>:
 800b05c:	b510      	push	{r4, lr}
 800b05e:	460c      	mov	r4, r1
 800b060:	2101      	movs	r1, #1
 800b062:	f7ff ff27 	bl	800aeb4 <_Balloc>
 800b066:	2201      	movs	r2, #1
 800b068:	6144      	str	r4, [r0, #20]
 800b06a:	6102      	str	r2, [r0, #16]
 800b06c:	bd10      	pop	{r4, pc}

0800b06e <__multiply>:
 800b06e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b072:	4614      	mov	r4, r2
 800b074:	690a      	ldr	r2, [r1, #16]
 800b076:	6923      	ldr	r3, [r4, #16]
 800b078:	4688      	mov	r8, r1
 800b07a:	429a      	cmp	r2, r3
 800b07c:	bfbe      	ittt	lt
 800b07e:	460b      	movlt	r3, r1
 800b080:	46a0      	movlt	r8, r4
 800b082:	461c      	movlt	r4, r3
 800b084:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b088:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b08c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b090:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b094:	eb07 0609 	add.w	r6, r7, r9
 800b098:	42b3      	cmp	r3, r6
 800b09a:	bfb8      	it	lt
 800b09c:	3101      	addlt	r1, #1
 800b09e:	f7ff ff09 	bl	800aeb4 <_Balloc>
 800b0a2:	f100 0514 	add.w	r5, r0, #20
 800b0a6:	462b      	mov	r3, r5
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b0ae:	4573      	cmp	r3, lr
 800b0b0:	d316      	bcc.n	800b0e0 <__multiply+0x72>
 800b0b2:	f104 0214 	add.w	r2, r4, #20
 800b0b6:	f108 0114 	add.w	r1, r8, #20
 800b0ba:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b0be:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b0c2:	9300      	str	r3, [sp, #0]
 800b0c4:	9b00      	ldr	r3, [sp, #0]
 800b0c6:	9201      	str	r2, [sp, #4]
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d80c      	bhi.n	800b0e6 <__multiply+0x78>
 800b0cc:	2e00      	cmp	r6, #0
 800b0ce:	dd03      	ble.n	800b0d8 <__multiply+0x6a>
 800b0d0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d05d      	beq.n	800b194 <__multiply+0x126>
 800b0d8:	6106      	str	r6, [r0, #16]
 800b0da:	b003      	add	sp, #12
 800b0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e0:	f843 2b04 	str.w	r2, [r3], #4
 800b0e4:	e7e3      	b.n	800b0ae <__multiply+0x40>
 800b0e6:	f8b2 b000 	ldrh.w	fp, [r2]
 800b0ea:	f1bb 0f00 	cmp.w	fp, #0
 800b0ee:	d023      	beq.n	800b138 <__multiply+0xca>
 800b0f0:	4689      	mov	r9, r1
 800b0f2:	46ac      	mov	ip, r5
 800b0f4:	f04f 0800 	mov.w	r8, #0
 800b0f8:	f859 4b04 	ldr.w	r4, [r9], #4
 800b0fc:	f8dc a000 	ldr.w	sl, [ip]
 800b100:	b2a3      	uxth	r3, r4
 800b102:	fa1f fa8a 	uxth.w	sl, sl
 800b106:	fb0b a303 	mla	r3, fp, r3, sl
 800b10a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b10e:	f8dc 4000 	ldr.w	r4, [ip]
 800b112:	4443      	add	r3, r8
 800b114:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b118:	fb0b 840a 	mla	r4, fp, sl, r8
 800b11c:	46e2      	mov	sl, ip
 800b11e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b122:	b29b      	uxth	r3, r3
 800b124:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b128:	454f      	cmp	r7, r9
 800b12a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b12e:	f84a 3b04 	str.w	r3, [sl], #4
 800b132:	d82b      	bhi.n	800b18c <__multiply+0x11e>
 800b134:	f8cc 8004 	str.w	r8, [ip, #4]
 800b138:	9b01      	ldr	r3, [sp, #4]
 800b13a:	3204      	adds	r2, #4
 800b13c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b140:	f1ba 0f00 	cmp.w	sl, #0
 800b144:	d020      	beq.n	800b188 <__multiply+0x11a>
 800b146:	4689      	mov	r9, r1
 800b148:	46a8      	mov	r8, r5
 800b14a:	f04f 0b00 	mov.w	fp, #0
 800b14e:	682b      	ldr	r3, [r5, #0]
 800b150:	f8b9 c000 	ldrh.w	ip, [r9]
 800b154:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b158:	b29b      	uxth	r3, r3
 800b15a:	fb0a 440c 	mla	r4, sl, ip, r4
 800b15e:	46c4      	mov	ip, r8
 800b160:	445c      	add	r4, fp
 800b162:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b166:	f84c 3b04 	str.w	r3, [ip], #4
 800b16a:	f859 3b04 	ldr.w	r3, [r9], #4
 800b16e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b172:	0c1b      	lsrs	r3, r3, #16
 800b174:	fb0a b303 	mla	r3, sl, r3, fp
 800b178:	454f      	cmp	r7, r9
 800b17a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b17e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b182:	d805      	bhi.n	800b190 <__multiply+0x122>
 800b184:	f8c8 3004 	str.w	r3, [r8, #4]
 800b188:	3504      	adds	r5, #4
 800b18a:	e79b      	b.n	800b0c4 <__multiply+0x56>
 800b18c:	46d4      	mov	ip, sl
 800b18e:	e7b3      	b.n	800b0f8 <__multiply+0x8a>
 800b190:	46e0      	mov	r8, ip
 800b192:	e7dd      	b.n	800b150 <__multiply+0xe2>
 800b194:	3e01      	subs	r6, #1
 800b196:	e799      	b.n	800b0cc <__multiply+0x5e>

0800b198 <__pow5mult>:
 800b198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b19c:	4615      	mov	r5, r2
 800b19e:	f012 0203 	ands.w	r2, r2, #3
 800b1a2:	4606      	mov	r6, r0
 800b1a4:	460f      	mov	r7, r1
 800b1a6:	d007      	beq.n	800b1b8 <__pow5mult+0x20>
 800b1a8:	4c21      	ldr	r4, [pc, #132]	; (800b230 <__pow5mult+0x98>)
 800b1aa:	3a01      	subs	r2, #1
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1b2:	f7ff feca 	bl	800af4a <__multadd>
 800b1b6:	4607      	mov	r7, r0
 800b1b8:	10ad      	asrs	r5, r5, #2
 800b1ba:	d035      	beq.n	800b228 <__pow5mult+0x90>
 800b1bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b1be:	b93c      	cbnz	r4, 800b1d0 <__pow5mult+0x38>
 800b1c0:	2010      	movs	r0, #16
 800b1c2:	f7fe fb81 	bl	80098c8 <malloc>
 800b1c6:	6270      	str	r0, [r6, #36]	; 0x24
 800b1c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1cc:	6004      	str	r4, [r0, #0]
 800b1ce:	60c4      	str	r4, [r0, #12]
 800b1d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b1d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1d8:	b94c      	cbnz	r4, 800b1ee <__pow5mult+0x56>
 800b1da:	f240 2171 	movw	r1, #625	; 0x271
 800b1de:	4630      	mov	r0, r6
 800b1e0:	f7ff ff3c 	bl	800b05c <__i2b>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1ec:	6003      	str	r3, [r0, #0]
 800b1ee:	f04f 0800 	mov.w	r8, #0
 800b1f2:	07eb      	lsls	r3, r5, #31
 800b1f4:	d50a      	bpl.n	800b20c <__pow5mult+0x74>
 800b1f6:	4639      	mov	r1, r7
 800b1f8:	4622      	mov	r2, r4
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	f7ff ff37 	bl	800b06e <__multiply>
 800b200:	4681      	mov	r9, r0
 800b202:	4639      	mov	r1, r7
 800b204:	4630      	mov	r0, r6
 800b206:	f7ff fe89 	bl	800af1c <_Bfree>
 800b20a:	464f      	mov	r7, r9
 800b20c:	106d      	asrs	r5, r5, #1
 800b20e:	d00b      	beq.n	800b228 <__pow5mult+0x90>
 800b210:	6820      	ldr	r0, [r4, #0]
 800b212:	b938      	cbnz	r0, 800b224 <__pow5mult+0x8c>
 800b214:	4622      	mov	r2, r4
 800b216:	4621      	mov	r1, r4
 800b218:	4630      	mov	r0, r6
 800b21a:	f7ff ff28 	bl	800b06e <__multiply>
 800b21e:	6020      	str	r0, [r4, #0]
 800b220:	f8c0 8000 	str.w	r8, [r0]
 800b224:	4604      	mov	r4, r0
 800b226:	e7e4      	b.n	800b1f2 <__pow5mult+0x5a>
 800b228:	4638      	mov	r0, r7
 800b22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b22e:	bf00      	nop
 800b230:	0800b9a0 	.word	0x0800b9a0

0800b234 <__lshift>:
 800b234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b238:	460c      	mov	r4, r1
 800b23a:	4607      	mov	r7, r0
 800b23c:	4616      	mov	r6, r2
 800b23e:	6923      	ldr	r3, [r4, #16]
 800b240:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b244:	eb0a 0903 	add.w	r9, sl, r3
 800b248:	6849      	ldr	r1, [r1, #4]
 800b24a:	68a3      	ldr	r3, [r4, #8]
 800b24c:	f109 0501 	add.w	r5, r9, #1
 800b250:	42ab      	cmp	r3, r5
 800b252:	db32      	blt.n	800b2ba <__lshift+0x86>
 800b254:	4638      	mov	r0, r7
 800b256:	f7ff fe2d 	bl	800aeb4 <_Balloc>
 800b25a:	2300      	movs	r3, #0
 800b25c:	4680      	mov	r8, r0
 800b25e:	461a      	mov	r2, r3
 800b260:	f100 0114 	add.w	r1, r0, #20
 800b264:	4553      	cmp	r3, sl
 800b266:	db2b      	blt.n	800b2c0 <__lshift+0x8c>
 800b268:	6920      	ldr	r0, [r4, #16]
 800b26a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b26e:	f104 0314 	add.w	r3, r4, #20
 800b272:	f016 021f 	ands.w	r2, r6, #31
 800b276:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b27a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b27e:	d025      	beq.n	800b2cc <__lshift+0x98>
 800b280:	2000      	movs	r0, #0
 800b282:	f1c2 0e20 	rsb	lr, r2, #32
 800b286:	468a      	mov	sl, r1
 800b288:	681e      	ldr	r6, [r3, #0]
 800b28a:	4096      	lsls	r6, r2
 800b28c:	4330      	orrs	r0, r6
 800b28e:	f84a 0b04 	str.w	r0, [sl], #4
 800b292:	f853 0b04 	ldr.w	r0, [r3], #4
 800b296:	459c      	cmp	ip, r3
 800b298:	fa20 f00e 	lsr.w	r0, r0, lr
 800b29c:	d814      	bhi.n	800b2c8 <__lshift+0x94>
 800b29e:	6048      	str	r0, [r1, #4]
 800b2a0:	b108      	cbz	r0, 800b2a6 <__lshift+0x72>
 800b2a2:	f109 0502 	add.w	r5, r9, #2
 800b2a6:	3d01      	subs	r5, #1
 800b2a8:	4638      	mov	r0, r7
 800b2aa:	f8c8 5010 	str.w	r5, [r8, #16]
 800b2ae:	4621      	mov	r1, r4
 800b2b0:	f7ff fe34 	bl	800af1c <_Bfree>
 800b2b4:	4640      	mov	r0, r8
 800b2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ba:	3101      	adds	r1, #1
 800b2bc:	005b      	lsls	r3, r3, #1
 800b2be:	e7c7      	b.n	800b250 <__lshift+0x1c>
 800b2c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	e7cd      	b.n	800b264 <__lshift+0x30>
 800b2c8:	4651      	mov	r1, sl
 800b2ca:	e7dc      	b.n	800b286 <__lshift+0x52>
 800b2cc:	3904      	subs	r1, #4
 800b2ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2d2:	459c      	cmp	ip, r3
 800b2d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b2d8:	d8f9      	bhi.n	800b2ce <__lshift+0x9a>
 800b2da:	e7e4      	b.n	800b2a6 <__lshift+0x72>

0800b2dc <__mcmp>:
 800b2dc:	6903      	ldr	r3, [r0, #16]
 800b2de:	690a      	ldr	r2, [r1, #16]
 800b2e0:	b530      	push	{r4, r5, lr}
 800b2e2:	1a9b      	subs	r3, r3, r2
 800b2e4:	d10c      	bne.n	800b300 <__mcmp+0x24>
 800b2e6:	0092      	lsls	r2, r2, #2
 800b2e8:	3014      	adds	r0, #20
 800b2ea:	3114      	adds	r1, #20
 800b2ec:	1884      	adds	r4, r0, r2
 800b2ee:	4411      	add	r1, r2
 800b2f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b2f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b2f8:	4295      	cmp	r5, r2
 800b2fa:	d003      	beq.n	800b304 <__mcmp+0x28>
 800b2fc:	d305      	bcc.n	800b30a <__mcmp+0x2e>
 800b2fe:	2301      	movs	r3, #1
 800b300:	4618      	mov	r0, r3
 800b302:	bd30      	pop	{r4, r5, pc}
 800b304:	42a0      	cmp	r0, r4
 800b306:	d3f3      	bcc.n	800b2f0 <__mcmp+0x14>
 800b308:	e7fa      	b.n	800b300 <__mcmp+0x24>
 800b30a:	f04f 33ff 	mov.w	r3, #4294967295
 800b30e:	e7f7      	b.n	800b300 <__mcmp+0x24>

0800b310 <__mdiff>:
 800b310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b314:	460d      	mov	r5, r1
 800b316:	4607      	mov	r7, r0
 800b318:	4611      	mov	r1, r2
 800b31a:	4628      	mov	r0, r5
 800b31c:	4614      	mov	r4, r2
 800b31e:	f7ff ffdd 	bl	800b2dc <__mcmp>
 800b322:	1e06      	subs	r6, r0, #0
 800b324:	d108      	bne.n	800b338 <__mdiff+0x28>
 800b326:	4631      	mov	r1, r6
 800b328:	4638      	mov	r0, r7
 800b32a:	f7ff fdc3 	bl	800aeb4 <_Balloc>
 800b32e:	2301      	movs	r3, #1
 800b330:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b338:	bfa4      	itt	ge
 800b33a:	4623      	movge	r3, r4
 800b33c:	462c      	movge	r4, r5
 800b33e:	4638      	mov	r0, r7
 800b340:	6861      	ldr	r1, [r4, #4]
 800b342:	bfa6      	itte	ge
 800b344:	461d      	movge	r5, r3
 800b346:	2600      	movge	r6, #0
 800b348:	2601      	movlt	r6, #1
 800b34a:	f7ff fdb3 	bl	800aeb4 <_Balloc>
 800b34e:	f04f 0e00 	mov.w	lr, #0
 800b352:	60c6      	str	r6, [r0, #12]
 800b354:	692b      	ldr	r3, [r5, #16]
 800b356:	6926      	ldr	r6, [r4, #16]
 800b358:	f104 0214 	add.w	r2, r4, #20
 800b35c:	f105 0914 	add.w	r9, r5, #20
 800b360:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b364:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b368:	f100 0114 	add.w	r1, r0, #20
 800b36c:	f852 ab04 	ldr.w	sl, [r2], #4
 800b370:	f859 5b04 	ldr.w	r5, [r9], #4
 800b374:	fa1f f38a 	uxth.w	r3, sl
 800b378:	4473      	add	r3, lr
 800b37a:	b2ac      	uxth	r4, r5
 800b37c:	1b1b      	subs	r3, r3, r4
 800b37e:	0c2c      	lsrs	r4, r5, #16
 800b380:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800b384:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800b388:	b29b      	uxth	r3, r3
 800b38a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800b38e:	45c8      	cmp	r8, r9
 800b390:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800b394:	4694      	mov	ip, r2
 800b396:	f841 4b04 	str.w	r4, [r1], #4
 800b39a:	d8e7      	bhi.n	800b36c <__mdiff+0x5c>
 800b39c:	45bc      	cmp	ip, r7
 800b39e:	d304      	bcc.n	800b3aa <__mdiff+0x9a>
 800b3a0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b3a4:	b183      	cbz	r3, 800b3c8 <__mdiff+0xb8>
 800b3a6:	6106      	str	r6, [r0, #16]
 800b3a8:	e7c4      	b.n	800b334 <__mdiff+0x24>
 800b3aa:	f85c 4b04 	ldr.w	r4, [ip], #4
 800b3ae:	b2a2      	uxth	r2, r4
 800b3b0:	4472      	add	r2, lr
 800b3b2:	1413      	asrs	r3, r2, #16
 800b3b4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b3b8:	b292      	uxth	r2, r2
 800b3ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b3be:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b3c2:	f841 2b04 	str.w	r2, [r1], #4
 800b3c6:	e7e9      	b.n	800b39c <__mdiff+0x8c>
 800b3c8:	3e01      	subs	r6, #1
 800b3ca:	e7e9      	b.n	800b3a0 <__mdiff+0x90>

0800b3cc <__d2b>:
 800b3cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b3d0:	461c      	mov	r4, r3
 800b3d2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800b3d6:	2101      	movs	r1, #1
 800b3d8:	4690      	mov	r8, r2
 800b3da:	f7ff fd6b 	bl	800aeb4 <_Balloc>
 800b3de:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800b3e2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b3e6:	4607      	mov	r7, r0
 800b3e8:	bb34      	cbnz	r4, 800b438 <__d2b+0x6c>
 800b3ea:	9201      	str	r2, [sp, #4]
 800b3ec:	f1b8 0200 	subs.w	r2, r8, #0
 800b3f0:	d027      	beq.n	800b442 <__d2b+0x76>
 800b3f2:	a802      	add	r0, sp, #8
 800b3f4:	f840 2d08 	str.w	r2, [r0, #-8]!
 800b3f8:	f7ff fe01 	bl	800affe <__lo0bits>
 800b3fc:	9900      	ldr	r1, [sp, #0]
 800b3fe:	b1f0      	cbz	r0, 800b43e <__d2b+0x72>
 800b400:	9a01      	ldr	r2, [sp, #4]
 800b402:	f1c0 0320 	rsb	r3, r0, #32
 800b406:	fa02 f303 	lsl.w	r3, r2, r3
 800b40a:	430b      	orrs	r3, r1
 800b40c:	40c2      	lsrs	r2, r0
 800b40e:	617b      	str	r3, [r7, #20]
 800b410:	9201      	str	r2, [sp, #4]
 800b412:	9b01      	ldr	r3, [sp, #4]
 800b414:	2b00      	cmp	r3, #0
 800b416:	bf14      	ite	ne
 800b418:	2102      	movne	r1, #2
 800b41a:	2101      	moveq	r1, #1
 800b41c:	61bb      	str	r3, [r7, #24]
 800b41e:	6139      	str	r1, [r7, #16]
 800b420:	b1c4      	cbz	r4, 800b454 <__d2b+0x88>
 800b422:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b426:	4404      	add	r4, r0
 800b428:	6034      	str	r4, [r6, #0]
 800b42a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b42e:	6028      	str	r0, [r5, #0]
 800b430:	4638      	mov	r0, r7
 800b432:	b002      	add	sp, #8
 800b434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b438:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b43c:	e7d5      	b.n	800b3ea <__d2b+0x1e>
 800b43e:	6179      	str	r1, [r7, #20]
 800b440:	e7e7      	b.n	800b412 <__d2b+0x46>
 800b442:	a801      	add	r0, sp, #4
 800b444:	f7ff fddb 	bl	800affe <__lo0bits>
 800b448:	2101      	movs	r1, #1
 800b44a:	9b01      	ldr	r3, [sp, #4]
 800b44c:	6139      	str	r1, [r7, #16]
 800b44e:	617b      	str	r3, [r7, #20]
 800b450:	3020      	adds	r0, #32
 800b452:	e7e5      	b.n	800b420 <__d2b+0x54>
 800b454:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b458:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b45c:	6030      	str	r0, [r6, #0]
 800b45e:	6918      	ldr	r0, [r3, #16]
 800b460:	f7ff fdae 	bl	800afc0 <__hi0bits>
 800b464:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b468:	e7e1      	b.n	800b42e <__d2b+0x62>

0800b46a <_calloc_r>:
 800b46a:	b538      	push	{r3, r4, r5, lr}
 800b46c:	fb02 f401 	mul.w	r4, r2, r1
 800b470:	4621      	mov	r1, r4
 800b472:	f7fe facf 	bl	8009a14 <_malloc_r>
 800b476:	4605      	mov	r5, r0
 800b478:	b118      	cbz	r0, 800b482 <_calloc_r+0x18>
 800b47a:	4622      	mov	r2, r4
 800b47c:	2100      	movs	r1, #0
 800b47e:	f7fe fa74 	bl	800996a <memset>
 800b482:	4628      	mov	r0, r5
 800b484:	bd38      	pop	{r3, r4, r5, pc}

0800b486 <__ascii_wctomb>:
 800b486:	b149      	cbz	r1, 800b49c <__ascii_wctomb+0x16>
 800b488:	2aff      	cmp	r2, #255	; 0xff
 800b48a:	bf8b      	itete	hi
 800b48c:	238a      	movhi	r3, #138	; 0x8a
 800b48e:	700a      	strbls	r2, [r1, #0]
 800b490:	6003      	strhi	r3, [r0, #0]
 800b492:	2001      	movls	r0, #1
 800b494:	bf88      	it	hi
 800b496:	f04f 30ff 	movhi.w	r0, #4294967295
 800b49a:	4770      	bx	lr
 800b49c:	4608      	mov	r0, r1
 800b49e:	4770      	bx	lr

0800b4a0 <_init>:
 800b4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4a2:	bf00      	nop
 800b4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4a6:	bc08      	pop	{r3}
 800b4a8:	469e      	mov	lr, r3
 800b4aa:	4770      	bx	lr

0800b4ac <_fini>:
 800b4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ae:	bf00      	nop
 800b4b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4b2:	bc08      	pop	{r3}
 800b4b4:	469e      	mov	lr, r3
 800b4b6:	4770      	bx	lr
